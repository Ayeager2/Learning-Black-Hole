{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":3905,\"hp\":3656,\"max_hp\":3656,\"strength\":44376,\"defense\":36465,\"dexterity\":9663,\"agility\":11062,\"charisma\":898,\"intelligence\":161,\"hacking_chance_mult\":2.7817194164183436,\"hacking_speed_mult\":2.6524336716890637,\"hacking_money_mult\":14.740240735636418,\"hacking_grow_mult\":11.598546960000002,\"hacking_exp\":183215071.94629866,\"strength_exp\":23285.64393528601,\"defense_exp\":23858.1719670558,\"dexterity_exp\":108499.16557753854,\"agility_exp\":138837.76359561618,\"charisma_exp\":81510.3309873417,\"intelligence_exp\":80076.41571544892,\"hacking_mult\":19.106964046291694,\"strength_mult\":804.9883407793529,\"defense_mult\":657.3986558342697,\"dexterity_mult\":125.44950308889379,\"agility_mult\":137.31184637843734,\"charisma_mult\":12.313171548112297,\"hacking_exp_mult\":22.377409332653393,\"strength_exp_mult\":9.54213386282957,\"defense_exp_mult\":9.54213386282957,\"dexterity_exp_mult\":10.973453942254004,\"agility_exp_mult\":9.54213386282957,\"charisma_exp_mult\":7.684269859367861,\"company_rep_mult\":19.9067135849566,\"faction_rep_mult\":3.0131555694239998,\"money\":44572228150.062485,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\",\"hacknet-node-12\",\"hacknet-node-13\",\"hacknet-node-14\",\"hacknet-node-15\",\"hacknet-node-16\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":17825792,\"hashes\":1558461.576223439,\"upgrades\":{\"Sell for Money\":76,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Slum Snakes\",\"Bladeburners\"],\"factionInvitations\":[\"Sector-12\",\"Daedalus\",\"The Syndicate\",\"Netburners\",\"Illuminati\",\"The Covenant\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hyperion Plasma Cannon V1\"},{\"level\":1,\"name\":\"Vangelis Virus\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: Power Cells Upgrade\"},{\"level\":1,\"name\":\"Hyperion Plasma Cannon V2\"},{\"level\":1,\"name\":\"I.N.T.E.R.L.I.N.K.E.D\"},{\"level\":1,\"name\":\"Blade's Runners\"}],\"augmentations\":[{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"BrachiBlades\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"TITN-41 Gene-Modification Injection\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Neurotrainer III\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"FocusWire\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Enhanced Social Interaction Implant\"},{\"level\":1,\"name\":\"nextSENS Gene Modification\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"HyperSight Corneal Implant\"},{\"level\":1,\"name\":\"SmartJaw\"},{\"level\":1,\"name\":\"Photosynthetic Cells\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Neotra\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Graphene Bionic Arms Upgrade\"},{\"level\":1,\"name\":\"Graphene Bionic Legs Upgrade\"},{\"level\":1,\"name\":\"Xanipher\"},{\"level\":1,\"name\":\"Graphene Bone Lacings\"},{\"level\":1,\"name\":\"CordiARC Fusion Reactor\"},{\"level\":1,\"name\":\"SPTN-97 Gene Modification\"},{\"level\":1,\"name\":\"Graphene Bionic Spine Upgrade\"},{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"ADR-V2 Pheromone Gene\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Neuronal Densification\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"OmniTek InfoLoad\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface Optimization Submodule\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"ECorp HVMind Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"PC Direct-Neural Interface NeuroNet Injector\"},{\"level\":1,\"name\":\"EsperTech Bladeburner Eyewear\"},{\"level\":1,\"name\":\"EMS-4 Recombination\"},{\"level\":1,\"name\":\"ORION-MKIV Shoulder\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor\"},{\"level\":1,\"name\":\"BLADE-51b Tesla Armor: IPU Upgrade\"}],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":8},{\"lvl\":3,\"n\":6},{\"lvl\":3,\"n\":7},{\"lvl\":2,\"n\":9}],\"numPeopleKilled\":0,\"karma\":-63351,\"crime_money_mult\":5.542131973978599,\"crime_success_mult\":2.9656893506240003,\"isWorking\":false,\"focus\":false,\"workType\":\"\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":3000,\"work_money_mult\":3.4261806458879995,\"hacknet_node_money_mult\":3.6192892735999997,\"hacknet_node_purchase_cost_mult\":0.48421929599999997,\"hacknet_node_ram_cost_mult\":0.6329663999999999,\"hacknet_node_core_cost_mult\":0.6329663999999999,\"hacknet_node_level_cost_mult\":0.5380214400000001,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":3912972082.84312,\"hack\":98248,\"str\":6745290,\"def\":2093749,\"dex\":194539,\"agi\":425633,\"cha\":52827,\"hack_exp\":17591121.839696754,\"str_exp\":302619448.493845,\"def_exp\":110038202.45477049,\"dex_exp\":48404211.0794797,\"agi_exp\":22816922.001796175,\"cha_exp\":12844426.45901194,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":33544516.024748135,\"str_asc_points\":590890891.2496057,\"def_asc_points\":236382297.9404887,\"dex_asc_points\":114490425.13638952,\"agi_asc_points\":58299099.097695835,\"cha_asc_points\":25000387.099017285,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member129\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4332516033.693922,\"hack\":91176,\"str\":6706478,\"def\":2104182,\"dex\":191387,\"agi\":445701,\"cha\":48981,\"hack_exp\":18242321.993886508,\"str_exp\":430722686.663322,\"def_exp\":157873145.0563057,\"dex_exp\":59701742.066233456,\"agi_exp\":36288161.7514162,\"cha_exp\":13307916.475583347,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":28688968.881592527,\"str_asc_points\":554250000.4569852,\"def_asc_points\":225289567.22841725,\"dex_asc_points\":106858274.77179581,\"agi_asc_points\":58719727.42309366,\"cha_asc_points\":21343108.93922545,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member423\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5324553951.527029,\"hack\":84770,\"str\":6451674,\"def\":2033582,\"dex\":186416,\"agi\":427108,\"cha\":45770,\"hack_exp\":21303633.010880653,\"str_exp\":332534043.3797644,\"def_exp\":122578951.71747904,\"dex_exp\":59582214.86600508,\"agi_exp\":24288427.62915104,\"cha_exp\":15606477.985904451,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":24079986.70991174,\"str_asc_points\":532974180.6572261,\"def_asc_points\":219119032.54018983,\"dex_asc_points\":101413752.27759291,\"agi_asc_points\":58023741.84686622,\"cha_asc_points\":18065149.086816803,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member790\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":4791521261.571024,\"hack\":84785,\"str\":7244171,\"def\":2285542,\"dex\":196232,\"agi\":487424,\"cha\":45677,\"hack_exp\":17850035.591209687,\"str_exp\":330448317.609595,\"def_exp\":121921188.22153126,\"dex_exp\":53655242.75919489,\"agi_exp\":25181287.58356409,\"cha_exp\":13056216.862204263,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":24910932.667678267,\"str_asc_points\":672585453.1448196,\"def_asc_points\":277021262.53871197,\"dex_asc_points\":114423193.22477618,\"agi_asc_points\":75064072.29771039,\"cha_asc_points\":18630708.391384747,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member172\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5089392176.224811,\"hack\":87163,\"str\":6374174,\"def\":2005254,\"dex\":187325,\"agi\":426508,\"cha\":46929,\"hack_exp\":21057598.088555034,\"str_exp\":356711094.5099841,\"def_exp\":131203735.20056146,\"dex_exp\":60512127.87826559,\"agi_exp\":27557354.57158292,\"cha_exp\":15386855.075008977,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":25514824.009646997,\"str_asc_points\":514828136.9125019,\"def_asc_points\":210734572.03278512,\"dex_asc_points\":102133444.81389856,\"agi_asc_points\":56525690.156164564,\"cha_asc_points\":19043969.71136241,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member550\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":505189766.38012874,\"hack\":90378,\"str\":7044954,\"def\":2148578,\"dex\":189946,\"agi\":432771,\"cha\":48003,\"hack_exp\":2536331.088574998,\"str_exp\":55765342.35653725,\"def_exp\":20175590.189275157,\"dex_exp\":7833999.540342939,\"agi_exp\":4454103.41164079,\"cha_exp\":1843457.4258316,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":42799413.37243221,\"str_asc_points\":846465677.7343255,\"def_asc_points\":335233533.3803917,\"dex_asc_points\":154363142.03078455,\"agi_asc_points\":83966276.59437966,\"cha_asc_points\":31606397.212534457,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member677\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":388712017.04202276,\"hack\":87987,\"str\":7230683,\"def\":2195162,\"dex\":188607,\"agi\":441654,\"cha\":46637,\"hack_exp\":1939395.0528491696,\"str_exp\":48012657.53619302,\"def_exp\":17318278.53545066,\"dex_exp\":6316325.586946329,\"agi_exp\":3900408.3411150705,\"cha_exp\":1408594.59052204,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":43253190.54542678,\"str_asc_points\":915178932.2187569,\"def_asc_points\":360261883.6730197,\"dex_asc_points\":159238557.1226831,\"agi_asc_points\":90068716.49014246,\"cha_asc_points\":31896310.994030133,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member686\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":5107559241.078206,\"hack\":85344,\"str\":6223498,\"def\":1980428,\"dex\":186813,\"agi\":423900,\"cha\":46090,\"hack_exp\":21077279.419198263,\"str_exp\":350675641.6794531,\"def_exp\":130372040.52200407,\"dex_exp\":61205903.6901407,\"agi_exp\":27388077.661475636,\"cha_exp\":15444132.435290597,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":24456560.144671913,\"str_asc_points\":492024668.9548863,\"def_asc_points\":205759053.9009269,\"dex_asc_points\":101377403.0933665,\"agi_asc_points\":55899755.91293216,\"cha_asc_points\":18355919.48807168,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member747\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":5179213873.271287,\"hack\":77831,\"str\":6502531,\"def\":2118617,\"dex\":189551,\"agi\":475206,\"cha\":42007,\"hack_exp\":19167276.497735318,\"str_exp\":418522043.5686611,\"def_exp\":158881972.47180572,\"dex_exp\":65425326.727123305,\"agi_exp\":36529216.511320114,\"cha_exp\":14040361.393506847,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":20709175.085540526,\"str_asc_points\":523256293.6318036,\"def_asc_points\":228160985.02744806,\"dex_asc_points\":103190476.43999273,\"agi_asc_points\":66672463.12774123,\"cha_asc_points\":15533932.023854248,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member918\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Train Combat\",\"earnedRespect\":5676498842.409719,\"hack\":84907,\"str\":6057084,\"def\":1943873,\"dex\":183260,\"agi\":429606,\"cha\":45580,\"hack_exp\":23276403.651439264,\"str_exp\":457623040.13563246,\"def_exp\":171228458.3057328,\"dex_exp\":72474530.7325387,\"agi_exp\":39249952.0334745,\"cha_exp\":16958218.64531211,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":23759976.0697256,\"str_asc_points\":448117584.71320444,\"def_asc_points\":189820217.55411088,\"dex_asc_points\":94795804.18031295,\"agi_asc_points\":53796080.75471823,\"cha_asc_points\":17630212.33386374,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member945\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":206576460.77002496,\"hack\":81091,\"str\":6848710,\"def\":2076590,\"dex\":176874,\"agi\":416086,\"cha\":42697,\"hack_exp\":1072840.4304940393,\"str_exp\":29666768.466712896,\"def_exp\":10730609.723477777,\"dex_exp\":3715683.7553503197,\"agi_exp\":2480177.464747977,\"cha_exp\":776811.756117767,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":42654290.68196739,\"str_asc_points\":894786135.6936028,\"def_asc_points\":354194581.1478415,\"dex_asc_points\":157279515.68163335,\"agi_asc_points\":88711016.63137005,\"cha_asc_points\":31261289.106762987,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member573\"}},{\"ctor\":\"GangMember\",\"data\":{\"task\":\"Human Trafficking\",\"earnedRespect\":2288904607.4562125,\"hack\":96856,\"str\":7565963,\"def\":2327374,\"dex\":203042,\"agi\":479623,\"cha\":51960,\"hack_exp\":9967036.354156602,\"str_exp\":214769564.79177174,\"def_exp\":77602884.4192968,\"dex_exp\":30336759.1467842,\"agi_exp\":16939436.636858076,\"cha_exp\":7274458.573625369,\"hack_mult\":2.2723515045,\"str_mult\":29.206517322318337,\"def_mult\":15.515548794797633,\"dex_mult\":2.2200750000000005,\"agi_mult\":7.285657510010883,\"cha_mult\":1.4592614400000004,\"hack_asc_points\":36463228.28196572,\"str_asc_points\":783358929.1001347,\"def_asc_points\":309446377.3977413,\"dex_asc_points\":135559493.0632002,\"agi_asc_points\":78330173.78700499,\"cha_asc_points\":27152337.603460178,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[\"BitWire\",\"DataJack\",\"Bionic Arms\",\"Bionic Legs\",\"Bionic Spine\",\"BrachiBlades\",\"Nanofiber Weave\",\"Synfibril Muscle\",\"Neuralstimulator\",\"Synthetic Heart\",\"Graphene Bone Lacings\"],\"name\":\"member953\"}}],\"wanted\":16708.530212463524,\"respect\":42803609404.39437,\"isHackingGang\":false,\"respectGainRate\":202178.8944259612,\"wantedGainRate\":0.00010231147975501258,\"moneyGainRate\":989031094.562365,\"storedCycles\":5,\"storedTerritoryAndPowerCycles\":42,\"territoryClashChance\":1,\"territoryWarfareEngaged\":true,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":0,\"moneyLost\":0,\"rank\":18109.621244440015,\"maxRank\":18109.621244440015,\"skillPoints\":1250,\"totalSkillPoints\":6036,\"teamSize\":0,\"teamLost\":0,\"hpLost\":0,\"storedCycles\":1471487,\"randomEventCounter\":428,\"actionTimeToComplete\":10,\"actionTimeCurrent\":0,\"actionTimeOverflow\":2,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"Undercover Operation\",\"type\":3}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":2707386277,\"popEst\":1592072903.7261832,\"comms\":107,\"chaos\":2.6913302090562725}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":694843922,\"popEst\":677301896.6482053,\"comms\":125,\"chaos\":5.2920103362980635}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":2230834047,\"popEst\":2230834047,\"comms\":19,\"chaos\":0.46505859673881933}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1723591919,\"popEst\":699470432.1374857,\"comms\":11,\"chaos\":5.103649345009392}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":3044582851,\"popEst\":979717871.7073327,\"comms\":96,\"chaos\":0.9893045611752309}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":608614741,\"popEst\":1723148806.6902077,\"comms\":79,\"chaos\":6.668857602406459}}},\"city\":\"Sector-12\",\"skills\":{\"Overclock\":77},\"skillMultipliers\":{\"successChanceAll\":1,\"successChanceStealth\":1,\"successChanceKill\":1,\"successChanceContract\":1,\"successChanceOperation\":1,\"successChanceEstimate\":1,\"actionTime\":0.22999999999999998,\"effHack\":1,\"effStr\":1,\"effDef\":1,\"effDex\":1,\"effAgi\":1,\"effCha\":1,\"effInt\":1,\"stamina\":1,\"money\":1,\"expGain\":1},\"staminaBonus\":0,\"maxStamina\":1958.434057164828,\"stamina\":1815.9316727588039,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"level\":16,\"maxLevel\":16,\"autoLevel\":true,\"baseDifficulty\":131.33507812054472,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":154,\"failures\":0,\"rankGain\":0.3,\"rankLoss\":0,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":901.9952083333291,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1},\"teamCount\":0}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":250.31548438752296,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":0,\"failures\":0,\"rankGain\":0.9,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":987.9666666666641,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":218.98949042413133,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"rankLoss\":0,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":971.4027083333358,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9},\"teamCount\":0}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"level\":28,\"maxLevel\":28,\"autoLevel\":true,\"baseDifficulty\":388.870226924598,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":431,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"hpLoss\":0,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":227.5922916666884,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":25}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"level\":22,\"maxLevel\":22,\"autoLevel\":true,\"baseDifficulty\":466.42200141901486,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":265,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":415.28354166670283,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":100}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":624.4829937400616,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":560.1735416666872,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"teamCount\":0,\"reqdRank\":500}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":725.9280525926097,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":602.912916666754,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":3000}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":983.5016783977283,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":317.9362500000141,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"teamCount\":0,\"reqdRank\":20000}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1645.62232225376,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":388.43479166685756,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"teamCount\":0,\"reqdRank\":50000}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshHigh\":0,\"automateActionLow\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"name\":\"\",\"type\":1}},\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[3/29 19:55:15] Undercover Operation successfully completed! Gained 17.111 rank\",\"[3/29 19:55:17] Undercover Operation successfully completed! Gained 15.615 rank\",\"[3/29 19:55:19] Undercover Operation successfully completed! Gained 16.070 rank\",\"[3/29 19:55:21] Undercover Operation successfully completed! Gained 14.647 rank\",\"[3/29 19:55:23] Undercover Operation successfully completed! Gained 14.765 rank\",\"[3/29 19:55:24] Undercover Operation successfully completed! Gained 16.747 rank\",\"[3/29 19:55:26] Undercover Operation successfully completed! Gained 16.324 rank\",\"[3/29 19:55:28] Undercover Operation successfully completed! Gained 14.603 rank\",\"[3/29 19:55:30] Undercover Operation successfully completed! Gained 16.855 rank\",\"[3/29 19:55:32] Undercover Operation successfully completed! Gained 14.701 rank\",\"[3/29 19:55:33] Undercover Operation successfully completed! Gained 16.525 rank\",\"[3/29 19:55:35] Undercover Operation successfully completed! Gained 15.599 rank\",\"[3/29 19:55:37] Undercover Operation successfully completed! Gained 15.122 rank\",\"[3/29 19:55:39] Undercover Operation successfully completed! Gained 18.436 rank\",\"[3/29 19:55:41] Undercover Operation successfully completed! Gained 16.927 rank\",\"[3/29 19:55:42] Undercover Operation successfully completed! Gained 18.441 rank\",\"[3/29 19:55:44] Undercover Operation successfully completed! Gained 17.363 rank\",\"[3/29 19:55:46] Undercover Operation successfully completed! Gained 17.385 rank\",\"[3/29 19:55:48] Undercover Operation successfully completed! Gained 18.701 rank\",\"[3/29 19:55:50] Undercover Operation successfully completed! Gained 15.608 rank\",\"[3/29 19:55:51] Undercover Operation successfully completed! Gained 17.894 rank\",\"[3/29 19:55:53] Undercover Operation successfully completed! Gained 15.999 rank\",\"[3/29 19:55:55] Undercover Operation successfully completed! Gained 15.850 rank\",\"[3/29 19:55:57] Undercover Operation successfully completed! Gained 17.325 rank\",\"[3/29 19:55:59] Undercover Operation successfully completed! Gained 16.665 rank\",\"[3/29 19:56:00] Undercover Operation successfully completed! Gained 15.715 rank\",\"[3/29 19:56:02] Undercover Operation successfully completed! Gained 17.702 rank\",\"[3/29 19:56:03] Intelligence indicates that a large number of Synthoids migrated from Volhaven to some other city\",\"[3/29 19:56:04] Undercover Operation successfully completed! Gained 16.023 rank\",\"[3/29 19:56:06] Undercover Operation successfully completed! Gained 18.580 rank\",\"[3/29 19:56:08] Undercover Operation successfully completed! Gained 16.613 rank\",\"[3/29 19:56:09] Undercover Operation successfully completed! Gained 16.394 rank\",\"[3/29 19:56:11] Undercover Operation successfully completed! Gained 16.021 rank\",\"[3/29 19:56:13] Undercover Operation successfully completed! Gained 17.494 rank\",\"[3/29 19:56:15] Undercover Operation successfully completed! Gained 19.555 rank\",\"[3/29 19:56:17] Undercover Operation successfully completed! Gained 16.817 rank\",\"[3/29 19:56:18] Undercover Operation successfully completed! Gained 19.199 rank\",\"[3/29 19:56:20] Undercover Operation successfully completed! Gained 20.048 rank\",\"[3/29 19:56:22] Undercover Operation successfully completed! Gained 19.426 rank\",\"[3/29 19:56:24] Undercover Operation successfully completed! Gained 20.294 rank\",\"[3/29 19:56:26] Undercover Operation successfully completed! Gained 17.083 rank\",\"[3/29 19:56:27] Undercover Operation successfully completed! Gained 18.013 rank\",\"[3/29 19:56:29] Undercover Operation successfully completed! Gained 18.241 rank\",\"[3/29 19:56:31] Undercover Operation successfully completed! Gained 20.180 rank\",\"[3/29 19:56:33] Undercover Operation successfully completed! Gained 19.734 rank\",\"[3/29 19:56:35] Undercover Operation successfully completed! Gained 20.163 rank\",\"[3/29 19:56:36] Undercover Operation successfully completed! Gained 18.564 rank\",\"[3/29 19:56:38] Undercover Operation successfully completed! Gained 17.979 rank\",\"[3/29 19:56:40] Undercover Operation successfully completed! Gained 18.322 rank\",\"[3/29 19:56:42] Undercover Operation successfully completed! Gained 17.224 rank\",\"[3/29 19:56:44] Undercover Operation successfully completed! Gained 17.402 rank\",\"[3/29 19:56:45] Undercover Operation successfully completed! Gained 20.445 rank\",\"[3/29 19:56:47] Undercover Operation successfully completed! Gained 17.000 rank\",\"[3/29 19:56:49] Undercover Operation successfully completed! Gained 19.840 rank\",\"[3/29 19:56:51] Undercover Operation successfully completed! Gained 21.922 rank\",\"[3/29 19:56:53] Undercover Operation successfully completed! Gained 19.393 rank\",\"[3/29 19:56:55] Undercover Operation successfully completed! Gained 19.414 rank\",\"[3/29 19:56:57] Undercover Operation successfully completed! Gained 21.786 rank\",\"[3/29 19:56:59] Undercover Operation successfully completed! Gained 19.891 rank\",\"[3/29 19:57:01] Undercover Operation successfully completed! Gained 20.026 rank\",\"[3/29 19:57:03] Undercover Operation successfully completed! Gained 21.682 rank\",\"[3/29 19:57:05] Undercover Operation successfully completed! Gained 20.244 rank\",\"[3/29 19:57:07] Undercover Operation successfully completed! Gained 21.453 rank\",\"[3/29 19:57:09] Undercover Operation successfully completed! Gained 21.489 rank\",\"[3/29 19:57:11] Undercover Operation successfully completed! Gained 19.263 rank\",\"[3/29 19:57:13] Undercover Operation successfully completed! Gained 21.691 rank\",\"[3/29 19:57:15] Undercover Operation successfully completed! Gained 20.149 rank\",\"[3/29 19:57:17] Undercover Operation successfully completed! Gained 19.575 rank\",\"[3/29 19:57:19] Undercover Operation successfully completed! Gained 20.732 rank\",\"[3/29 19:57:21] Undercover Operation successfully completed! Gained 21.934 rank\",\"[3/29 19:57:23] Undercover Operation successfully completed! Gained 20.175 rank\",\"[3/29 19:57:25] Undercover Operation successfully completed! Gained 19.118 rank\",\"[3/29 19:57:27] Undercover Operation successfully completed! Gained 19.683 rank\",\"[3/29 19:57:29] Undercover Operation successfully completed! Gained 20.459 rank\",\"[3/29 19:57:31] Undercover Operation successfully completed! Gained 20.949 rank\",\"[3/29 19:57:33] Undercover Operation successfully completed! Gained 23.596 rank\",\"[3/29 19:57:35] Undercover Operation successfully completed! Gained 23.897 rank\",\"[3/29 19:57:37] Undercover Operation successfully completed! Gained 21.389 rank\",\"[3/29 19:57:39] Undercover Operation successfully completed! Gained 20.409 rank\",\"[3/29 19:57:41] Undercover Operation successfully completed! Gained 23.249 rank\",\"[3/29 19:57:43] Undercover Operation successfully completed! Gained 22.494 rank\",\"[3/29 19:57:45] Undercover Operation successfully completed! Gained 20.343 rank\",\"[3/29 19:57:47] Undercover Operation successfully completed! Gained 22.124 rank\",\"[3/29 19:57:49] Undercover Operation successfully completed! Gained 21.345 rank\",\"[3/29 19:57:51] Undercover Operation successfully completed! Gained 22.640 rank\",\"[3/29 19:57:53] Undercover Operation successfully completed! Gained 20.470 rank\",\"[3/29 19:57:55] Undercover Operation successfully completed! Gained 23.448 rank\",\"[3/29 19:57:57] Undercover Operation successfully completed! Gained 22.995 rank\",\"[3/29 19:57:59] Undercover Operation successfully completed! Gained 22.206 rank\",\"[3/29 19:58:01] Undercover Operation successfully completed! Gained 23.910 rank\",\"[3/29 19:58:03] Undercover Operation successfully completed! Gained 22.329 rank\",\"[3/29 19:58:05] Undercover Operation successfully completed! Gained 22.815 rank\",\"[3/29 19:58:07] Undercover Operation successfully completed! Gained 22.214 rank\",\"[3/29 19:58:09] Undercover Operation successfully completed! Gained 22.921 rank\",\"[3/29 19:58:11] Undercover Operation successfully completed! Gained 21.817 rank\",\"[3/29 19:58:13] Undercover Operation successfully completed! Gained 21.833 rank\",\"[3/29 19:58:15] Undercover Operation successfully completed! Gained 23.983 rank\",\"[3/29 19:58:17] Undercover Operation successfully completed! Gained 21.972 rank\",\"[3/29 19:58:19] Undercover Operation successfully completed! Gained 25.935 rank\",\"[3/29 19:58:21] Undercover Operation successfully completed! Gained 24.723 rank\"]}},\"bladeburner_max_stamina_mult\":1.1400000000000001,\"bladeburner_stamina_gain_mult\":1.1860560000000002,\"bladeburner_analysis_mult\":1.3765500000000002,\"bladeburner_success_chance_mult\":1.3214478738240003,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":9,\"entropy\":0,\"lastUpdate\":1648598302343,\"lastSave\":1648598296275,\"totalPlaytime\":8994413600,\"playtimeSinceLastAug\":10537000,\"playtimeSinceLastBitnode\":443037600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":3143444.5148768583,\"casino\":0,\"class\":-2245920,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":693425936832772.6,\"hacking\":1291456048,\"hacknet\":76000000,\"hacknet_expenses\":-692739745494947.4,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":44571228150.062485,\"work\":0,\"servers\":0,\"other\":-305700000,\"augmentations\":-642682763250}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":56019606.514599696,\"casino\":0,\"class\":-49837920,\"codingcontract\":0,\"corporation\":0,\"crime\":864464432.8323909,\"gang\":709556577353342.6,\"hacking\":1309967597.6023989,\"hacknet\":453046000000,\"hacknet_expenses\":-708282529185844.9,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":421948407058.4717,\"work\":0,\"servers\":-231825876420.8307,\"other\":-611400000,\"augmentations\":-1074889097737.905}},\"scriptProdSinceLastAug\":1291456048,\"exploits\":[\"TimeCompression\"],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641679545816},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641679545829},{\"ID\":\"SF1.1\",\"unlockedOn\":1641679545831},{\"ID\":\"SF2.1\",\"unlockedOn\":1641679545834},{\"ID\":\"NS2\",\"unlockedOn\":1641679545836},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641679545838},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641679545841},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641679545844},{\"ID\":\"TOR\",\"unlockedOn\":1641679545847},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641679545850},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1641679545853},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641698402221},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641698402224},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641705602216},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641712742217},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641714302213},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641714362215},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641714362216},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641749250436},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641752856235},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641765826652},{\"ID\":\"NITESEC\",\"unlockedOn\":1641766606638},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641822300679},{\"ID\":\"DONATION\",\"unlockedOn\":1641860520680},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641862620680},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641870387319},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1641961091609},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641990891549},{\"ID\":\"SF5.1\",\"unlockedOn\":1642041531544},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642647100479},{\"ID\":\"SF4.1\",\"unlockedOn\":1642981341605},{\"ID\":\"FROZE\",\"unlockedOn\":1643063744540},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643570359263},{\"ID\":\"GANG\",\"unlockedOn\":1643670755353},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643763927542},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643901669999},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643940624755},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643978638009},{\"ID\":\"SF3.1\",\"unlockedOn\":1643998666423},{\"ID\":\"4S\",\"unlockedOn\":1644542400710},{\"ID\":\"SF8.1\",\"unlockedOn\":1644984423389},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645667472731},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1645670412751},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1645917615054},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1645918215045},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1645918215047},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1645921935048},{\"ID\":\"SF6.1\",\"unlockedOn\":1645925235051},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1646793042526},{\"ID\":\"SF7.1\",\"unlockedOn\":1646796058317},{\"ID\":\"BLADEBURNER_UNSPENT_100000\",\"unlockedOn\":1647194267627},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1647532293094},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1647547887089},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1647558987094},{\"ID\":\"SF9.1\",\"unlockedOn\":1647818241084}],\"terminalCommandHistory\":[\"run hacknetNode.js\",\"ls\",\"nano homeCrimesSingularity.js\",\"nano bladeMidGame.js\",\"nano blade\",\"nano blade.js\",\"run bladeMidGame.js\",\"run cbGang.js\",\"run bladeMidGame.js\",\"ls\",\"nano bladeMidGame.js\",\"run hacknetNode.js\",\"run cbGang.js\",\"run bladeMidGame.js\",\"run hacknetNode.js\",\"run cbGang.js\",\"run homeCrimesSingularity.js\",\"run blade\",\"run blade.js\",\"nano blade\",\"nano blade.js\",\"run blade\",\"run blade.js\",\"run hacknetNode.js\",\"run spendHashOnCash.js\",\"run karma.js\",\"run homeCrimesSingularity.js\",\"run karma.js\",\"run cbGang.js\",\"run hacknetNode.js\",\"run hash\",\"ls\",\"run spendHashOnCash.js\",\"buyall\",\"ls'\",\"run bladeMidGame.js\",\"run scan.js\",\"run newStartScripts/uhm.js\",\"run scan.js\",\"run OPScripts/joesop.js\",\"run bladeMidGame.js\",\"nano bladeMidGame.js\",\"run cbGang.js\",\"run hacknetNode.js\",\"run spendHashOnCash.js\",\"run OPScripts/joesop.js\",\"buyall\",\"run newStartScripts/uhm.js\",\"kill newStartScripts/uhm.js\",\"run OPScripts/joesop.js\"],\"identifier\":\"a1c3578cd3ad\",\"factionWorkType\":\"Faction Security Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"54.6.6.5\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"Formulas.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\"],\"ramUsed\":4877.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"cbGang.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9556.409999999021,\"pid\":2,\"ramUsage\":29.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"cbGang.js\",\"url\":\"blob:file:///cd6f19f9-d96d-4830-b14c-c5eb69e83670\",\"moduleSequenceNumber\":591}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknetNode.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9552.609999999007,\"pid\":3,\"ramUsage\":5.7,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"hacknetNode.js\",\"url\":\"blob:file:///ad07a1a3-4ffb-41df-8b67-75d6e5d6c26c\",\"moduleSequenceNumber\":593}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"spendHashOnCash.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9529.809999998924,\"pid\":4,\"ramUsage\":5.6,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"spendHashOnCash.js\",\"url\":\"blob:file:///fe16a919-1b02-4b31-9abc-770758bead2f\",\"moduleSequenceNumber\":592}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/OPScripts/joesop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":182687820.71371526,\"onlineMoneyMade\":1290813264,\"onlineRunningTime\":9466.009999998692,\"pid\":89,\"ramUsage\":6.05,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/OPScripts/joesop.js\",\"url\":\"blob:file:///ee207c41-ddbf-43ce-a33e-2a3f3b3b3f23\",\"moduleSequenceNumber\":2315}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",0,4147],\"dataMap\":{},\"filename\":\"/OPScripts/OPweaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":12531,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":1736,\"dependencies\":[{\"filename\":\"/OPScripts/OPweaken.js\",\"url\":\"blob:file:///69128de2-32e4-4a44-a9d7-d17d1fbb59a2\",\"moduleSequenceNumber\":2316}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",412.7845223106259,4147],\"dataMap\":{},\"filename\":\"/OPScripts/OPgrow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":12532,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":933,\"dependencies\":[{\"filename\":\"/OPScripts/OPgrow.js\",\"url\":\"blob:file:///cff40561-b155-422d-b346-020734a4bace\",\"moduleSequenceNumber\":2317}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\",1970.0383833444214,4147],\"dataMap\":{},\"filename\":\"/OPScripts/OPhack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"pid\":12533,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":94,\"dependencies\":[{\"filename\":\"/OPScripts/OPhack.js\",\"url\":\"blob:file:///094b119c-dada-491d-b2b4-5d8c80569457\",\"moduleSequenceNumber\":3102}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let baseName = \\\"HomeServer\\\";\\n    let multi = 13; // assumes you need up to 8gb for your hack and distro script. you may be able to lower this accordingly.\\n    let hackScript = \\\"/OPScripts/OP.js\\\";\\n\\n\\n    let servers = ns.getPurchasedServers();\\n\\n    if (servers.length > 0) {\\n        let maxRam = servers.reduce((a, e) => Math.max(a, ns.getServerMaxRam(e)), 3);\\n        while (Math.pow(2, multi) < maxRam) multi++;\\n    }\\n\\n    let queue = new Queue();\\n    for (let i = 0; i < servers.length; i++) {\\n        queue.enqueue(servers[i]);\\n    }\\n\\n    let nameCounter = 1;\\n    let maxRam = Math.pow(2, 20);\\n    while (true) {\\n        if (Math.pow(2, multi) >= maxRam) {\\n            ns.tprint(\\\"maxed on servers, killing process\\\");\\n            return;\\n        }\\n\\n        let count = queue.length;\\n        let cash = ns.getPlayer().money;\\n        let ram = Math.min(Math.pow(2, 20), Math.pow(2, multi));\\n        let cost = ns.getPurchasedServerCost(ram);\\n\\n        if (count >= ns.getPurchasedServerLimit() && cash >= cost) {\\n            let current = queue.peek();\\n            if (Math.min(maxRam, Math.pow(2, multi)) <= ns.getServerMaxRam(current)) {\\n                ns.tprint(\\\"bumping ram multi from \\\" + multi + \\\" to \\\" + (multi + 1));\\n                multi++;\\n                continue;\\n            }\\n            else {\\n                current = queue.dequeue();\\n                ns.killall(current);\\n                ns.deleteServer(current);\\n            }\\n        }\\n        else if (count < ns.getPurchasedServerLimit() && cash >= cost) {\\n            let name = baseName + nameCounter;\\n            nameCounter++;\\n            let newBox = ns.purchaseServer(name, ram);\\n            queue.enqueue(newBox);  \\n            \\n            await ns.scp(hackScript, newBox);\\n            //await ns.scp(\\\"OP.ns\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPgrow.js\\\", \\\"home\\\", newBox)\\n            await ns.scp(\\\"/OPScripts/OPweaken.js\\\", \\\"home\\\", newBox)\\n            await ns.scp(\\\"/OPScripts/OPhack.js\\\", \\\"home\\\", newBox)\\n            ns.exec(hackScript, newBox);\\n        }\\n\\n        await ns.asleep(1000);\\n    }\\n}\\n\\nclass Queue extends Array {\\n    enqueue(val) {\\n        this.push(val);\\n    }\\n\\n    dequeue() {\\n        return this.shift();\\n    }\\n\\n    peek() {\\n        return this[0];\\n    }\\n\\n    isEmpty() {\\n        return this.length === 0;\\n    }\\n}\",\"filename\":\"/ScaleingServerPurchase/scaleingServerPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/ScaleingServerPurchase/scaleingServerPurchase.js\",\"url\":\"blob:file:///7e411164-961f-4e89-a739-71b01538e9e0\",\"moduleSequenceNumber\":195132}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":1483,\"_hash\":\"e1c90593f8e29227ebbabfd65ea021af39bd90c034599d019a0aa2532ef8d73c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//run calcRam.js this hackscript.ns \\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n    var goalSys = ns.args[0];\\n\\n\\tif(goalSys == \\\"this\\\"){\\n\\t\\tgoalSys = ns.getHostname();\\n\\t}\\n\\n\\tvar server = ns.getServer(goalSys);\\n\\n\\t//calcs cost of script to use\\n\\tvar scriptCost = ns.getScriptRam(ns.args[1]);\\n\\n\\t//calc cost of calcRam.js\\n\\tvar usedScriptRam = ns.getScriptRam(ns.getScriptName(this));\\n\\t//cal server max ram\\n\\tvar fullRam = server.maxRam;\\n\\t//cal server ram in use (subtracts cost of calcRam.js)\\n\\tvar usedRam = server.ramUsed - usedScriptRam;\\n\\t//cals ram available for use\\n\\tvar freeRam = fullRam - usedRam;\\n\\t//calcs the max useable threads for the script to use\\n\\tvar maxThreads = freeRam / scriptCost;\\n\\n\\tif(scriptCost == 0 || server == isNaN){\\n\\t\\tns.tprint(\\\"Check parameters; args[0]: server. args[1]: script.\\\");\\n\\t}\\n\\telse{\\n\\t\\tns.tprint(\\\"\\\\n\\\\n\\\" + ns.args[1] + \\\" cost:\\\" + scriptCost + \\\" GB\\\"\\n\\t\\t+ \\\"\\\\nFree server ram: \\\" + freeRam + \\\" GB\\\"\\n\\t\\t+ \\\"\\\\nMax useable threads: \\\" + parseInt(maxThreads) + \\\"\\\\n \\\");\\n\\t}\\n\\n\\n}\",\"filename\":\"/HelperScripts/calcRam.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"calcRam.js\",\"url\":\"blob:file:///1fce2e70-0de2-409d-a12b-9e9fb8060896\"}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":1484,\"_hash\":\"8a775f30b2b4647e8b4cd95fdef8c4cd99d856d069edc0d579ea42041b62a549\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   //if no arguments provided tell the user how to use script.\\n   if (ns.args.length === 0) {\\n      ns.alert(\\\"Please include one to five arguments as server names to hack. The script will propogate across all servers and grow, weaken and hack the specified targets. As you get new hacking tools, kill all scripts and rerun from home.\\\");\\n      return;\\n   }\\n   ns.toast('Running worm on ' + ns.getHostname());\\n   //get all connectable servers and ram cost of script\\n\\n   //get all servers you can connect to\\n   var servers = ns.scan(ns.getHostname());\\n   //get ram for this script\\n   var scriptram = ns.getScriptRam('/OPScripts/worm.js', 'home');\\n   //get ram for hack script\\n   var hackscriptram = ns.getScriptRam('/OPScripts/joesop.js', 'home')\\n   //get available server ram for this server\\n   var avsram = ns.getServerMaxRam(ns.getHostname()) - ns.getServerUsedRam(ns.getHostname()) + scriptram;\\n   //calculate usethreads for hack script for this server\\n   var hsthreads = Math.floor(avsram / hackscriptram);\\n   for (const server of servers) {\\n      //count and use hack tools owned if you don't have root\\n      var hacktoolnum = 0;\\n      //attack server\\n      if (!ns.hasRootAccess(server)) {\\n         ns.toast('Opening ports on ' + server);\\n         if (ns.fileExists('BruteSSH.exe', 'home')) {\\n            ns.brutessh(server);\\n            hacktoolnum++;\\n         }\\n         if (ns.fileExists('FTPCrack.exe', 'home')) {\\n            ns.ftpcrack(server);\\n            hacktoolnum++;\\n\\n         }\\n         if (ns.fileExists('relaySMTP.exe', 'home')) {\\n            ns.relaysmtp(server);\\n            hacktoolnum++;\\n\\n         }\\n         if (ns.fileExists('HTTPWorm.exe', 'home')) {\\n            ns.httpworm(server);\\n            hacktoolnum++;\\n\\n         }\\n         if (ns.fileExists('SQLInject.exe', 'home')) {\\n            ns.sqlinject(server);\\n            hacktoolnum++;\\n\\n         }\\n      }\\n      //if you don't have access and used enough tools nuke target server\\n      if (ns.getServerNumPortsRequired(server) <= hacktoolnum && !ns.hasRootAccess(server)) {\\n         ns.toast(\\\"nuking \\\" + server);\\n         ns.nuke(server);\\n      } else\\n         //if you still don't have access, skip\\n         if (!ns.hasRootAccess(server)) {\\n            ns.toast(\\\"unable to gain root to \\\" + server, \\\"error\\\");\\n            continue;\\n         }\\n      //if the server has enough ram to run the worm script\\n      if (ns.getServerMaxRam(server) > ns.getServerUsedRam(server) + scriptram) {\\n         //copy WORM script to server and run\\n         if (!ns.fileExists('/OPScripts/worm.js', server)) {\\n            ns.print('/OPScripts/worm.js being copied to ' + server);\\n\\n            await ns.scp('/OPScripts/worm.js', 'home', server);\\n         }\\n         //if you don't see either script running on target server, run worm on it.\\n         if (!ns.scriptRunning('/OPScripts/worm.js', server) && !ns.scriptRunning('/OPScripts/joesop.js', server)) {\\n            ns.print('running worm on ' + server);\\n            await ns.sleep(11000);\\n\\n            await ns.scp('/OPScripts/worm.js', 'home', server);\\n            if (ns.args.length === 1) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0]);\\n            }\\n            if (ns.args.length === 2) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1]);\\n            }\\n            if (ns.args.length === 3) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1], ns.args[2]);\\n            }\\n            if (ns.args.length === 4) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3]);\\n            }\\n            if (ns.args.length === 5) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]);\\n            }\\n         }\\n      } else {\\n         //if server can't run script, look at servers it can connect to, gain root, and run script there\\n         var moreservs = ns.scan(server);\\n         for (const server2 of moreservs) {\\n            var hacktoolnum2 = 0;\\n\\n            //attack server\\n            if (!ns.hasRootAccess(server2)) {\\n               ns.toast('Opening ports on ' + server2)\\n               if (ns.fileExists('BruteSSH.exe', 'home')) {\\n                  ns.brutessh(server2);\\n                  hacktoolnum2++;\\n               }\\n               if (ns.fileExists('FTPCrack.exe', 'home')) {\\n                  ns.ftpcrack(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n               if (ns.fileExists('relaySMTP.exe', 'home')) {\\n                  ns.relaysmtp(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n               if (ns.fileExists('HTTPWorm.exe', 'home')) {\\n                  ns.httpworm(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n               if (ns.fileExists('SQLInject.exe', 'home')) {\\n                  ns.sqlinject(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n            }\\n            if (ns.getServerNumPortsRequired(server2) <= hacktoolnum2 && !ns.hasRootAccess(server2)) {\\n               ns.toast(\\\"nuking \\\" + server2);\\n               ns.nuke(server2);\\n            } else\\n               //if you still don't have access, skip\\n               if (!ns.hasRootAccess(server2)) {\\n                  ns.toast(\\\"unable to gain root to \\\" + server2, \\\"error\\\");\\n                  continue;\\n               }\\n            if (ns.getServerMaxRam(server2) > ns.getServerUsedRam(server2) + scriptram) {\\n               //copy WORM script to server and run\\n               if (!ns.fileExists('/OPScripts/worm.js', server2)) {\\n                  ns.print('/OPScripts/worm.js being copied to ' + server2);\\n                  await ns.scp('/OPScripts/worm.js', 'home', server2);               }\\n               if (!ns.scriptRunning('/OPScripts/worm.js', server2) && !ns.scriptRunning('/OPScripts/joesop.js', server2)) {\\n                  ns.print('running worm on ' + server2);\\n                  await ns.sleep(11000);\\n                  await ns.scp('/OPScripts/worm.js', 'home', server2);\\n                  if (ns.args.length === 1) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0]);\\n                  }\\n                  if (ns.args.length === 2) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1]);\\n                  }\\n                  if (ns.args.length === 3) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1], ns.args[2]);\\n                  }\\n                  if (ns.args.length === 4) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3]);\\n                  }\\n                  if (ns.args.length === 5) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]);\\n                  }\\n               }\\n\\n            }\\n         }\\n      }\\n   }\\n   //if usethreads exists for this script, build args array of parameters based on this scripts args\\n   if (hsthreads) {\\n      var hsargs = [];\\n      for (const argument of ns.args) {\\n         hsargs.push(argument);\\n         hsargs.push(ns.getServerMinSecurityLevel(argument));\\n         hsargs.push(ns.getServerMaxMoney(argument));\\n         hsargs.push(ns.getServerRequiredHackingLevel(argument));\\n      }\\n      //copy hack script to this server and spawn script with threads and arguments as a single string\\n      if (ns.getHostname() != 'home') {\\n         await ns.scp('/OPScripts/OPhack.js', 'home', ns.getHostname());\\n         await ns.scp('/OPScripts/OPweaken.js', 'home', ns.getHostname());\\n         await ns.scp('/OPScripts/OPgrown.js', 'home', ns.getHostname());\\n         await ns.scp('/OPScripts/joesop.js', 'home', ns.getHostname());\\n      }\\n      ns.spawn('/OPScripts/joesop.js');\\n   }\\n}\",\"filename\":\"/OPScripts/worm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/worm.js\",\"url\":\"blob:file:///e3fb9c1d-6e0b-4b8d-a046-9450687773a2\",\"moduleSequenceNumber\":830}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":1485,\"_hash\":\"bb7db5f785efa78f75d2e2bd5b70db6314f92723a22bdb23e114242c024c857e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    //*********PARAMS FOR SCRIPT ***************//\\n    var maxSharePer = 1.0                     // maximum percent of a symbol's total stock to buy\\n    var stockBuyPer = 0.6                     //  percent probablity to buy symbol\\n    var stockVolPer = .03                    //   percent stock will move to buy\\n    var moneyKeep = 9000000000000000           //    min money to keep on hand\\n    var minSharePer = 5                    //     min shares to buy\\n    var orderMax = 1000000000000000          //      max money to spend on a single order\\n    var profPer = 0.05                   //       min profit percentage to sell\\n    var panicPer = 0.50                 //        percentage loss to panic sell at\\n    //*********************************//\\n    while (true) {\\n        ns.disableLog('disableLog');\\n        ns.disableLog('sleep');\\n        ns.disableLog('getServerMoneyAvailable')\\n        var stocks = ns.stock.getSymbols();\\n        for (const stock of stocks) {\\n            var position = ns.stock.getPosition(stock)\\n            if (position[0]) {\\n                ns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n                sellPositions(stock);\\n            }\\n            buyPositions(stock);\\n \\n        }\\n        await ns.sleep(6000);\\n    }\\n    function sellPositions(stock) {\\n        //check profit\\n        if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) >= 1 + profPer && ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") > 100000) {\\n            //sell stock\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n            ns.stock.sell(stock, position[0]);\\n        } else if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) < (1 - panicPer)) {\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" loss!\\\", \\\"warning\\\");\\n            ns.stock.sell(stock, position[0]);\\n        }\\n    }\\n \\n    function buyPositions(stock) {\\n        var maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n        var askPrice = ns.stock.getAskPrice(stock);\\n        var forecast = ns.stock.getForecast(stock);\\n        var volPer = ns.stock.getVolatility(stock);\\n        var playerMoney = ns.getServerMoneyAvailable('home');\\n        //if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n            //check money for one share\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n                var shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n                ns.stock.buy(stock, Math.min(shares, maxShares));\\n                \\n            }\\n        }\\n    }\\n \\n}\",\"filename\":\"/HelperScripts/stocks.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/HelperScripts/stocks.ns\",\"url\":\"blob:file:///e437b6bd-e4d1-470d-8cf7-4276dd72b6ad\"}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":1486,\"_hash\":\"060833ff0bed6afa36406c362b3e3e56fc076c37337e4b2b26ee52559934d298\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        var servers = scanAndHack(ns);\\n       //var opServer = \\\"megacorp\\\";\\n        var opServer = \\\"joesguns\\\";\\n\\n        for (let server of servers) {\\n            await ns.scp(\\\"/OPScripts/hack.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/weaken.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/grow.js\\\", \\\"home\\\", server)\\n\\n            await ns.scp(\\\"/OPScripts/OP.ns\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPgrow.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPweaken.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPhack.js\\\", \\\"home\\\", server)\\n            ns.exec(\\\"/OPScripts/OP.ns\\\", server)\\n            //await ns.installBackdoor(server)\\n        }\\n        ns.print(`servers:${[...servers.values()]}`)\\n        var freeRams = getFreeRam(ns, servers);\\n         //ns.tprint(`freeRams:${freeRams.map(value => JSON.stringify(value))}`)\\n        var hackables = getHackable(ns, servers);\\n         //ns.tprint(`hackable:${[...hackables.values()]}`)\\n        var hackstates = getHackStates(ns, servers, hackables)\\n        //ns.print(`hackstates:${[...hackstates.entries()].map((v, _i) => `${v[0]}:{${JSON.stringify(v[1])}}\\\\n`)}`)\\n        manageAndHack(ns, freeRams, hackables, hackstates)\\n        await ns.sleep(4000)\\n    }\\n}\\n \\nfunction manageAndHack(ns, freeRams, hackables, hackstates) {\\n    for (let target of hackables) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        const maxMoney = ns.getServerMaxMoney(target);\\n        const minSec = ns.getServerMinSecurityLevel(target);\\n        const sec = ns.getServerSecurityLevel(target);\\n\\n        var secDiff = sec - minSec\\n        \\n        if (secDiff > 0) {\\n            var threads = Math.floor(secDiff * 20) - hackstates.get(target).weaken;\\n                        //ns.tprint(\\\"Weaken: \\\"+ target+ \\\": \\\" + threads);    \\n                        //ns.tprint( hackstates.get(target).weaken);\\n            if (threads > 0) {\\n                if (!findPlaceToRun(ns, \\\"/OPScripts/weaken.js\\\", threads, freeRams, target)) {\\n                    return\\n                }\\n            }\\n \\n        }\\n \\n        var moneyPercent = money / maxMoney * 100\\n        if (moneyPercent < 90) {\\n            var threads = Math.floor(ns.growthAnalyze(target, 100 / moneyPercent))\\n                - hackstates.get(target).grow;\\n                        //ns.tprint(\\\"Grow: \\\" + target+ \\\": \\\" + threads);    \\n            if (threads > 0) {\\n                if (!findPlaceToRun(ns, \\\"/OPScripts/grow.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n \\n        if (moneyPercent > 75 && secDiff < 50) {\\n            var threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney)))\\n                - hackstates.get(target).hack\\n                        //ns.tprint(\\\"Hack: \\\" + target+ \\\": \\\" + threads);    \\n            if (threads > 0) {\\n                // hack to money percent = 70\\n                if (!findPlaceToRun(ns, \\\"/OPScripts/hack.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n         //ns.tprint(`target:${target} secDiff:${secDiff.toFixed(2)} moneyPercent:${moneyPercent.toFixed(2)}`)\\n    }\\n    // for hacking exp\\n     //hackables=[\\\"joesguns\\\"];\\n     //findPlaceToRun(ns, \\\"grow.js\\\", 20000000000, freeRams, hackables[0])\\n}\\nfunction findPlaceToRun(ns, script, threads, freeRams, target) {\\n    let scriptRam = ns.getScriptRam(script)\\n    var remaingThread = threads;\\n    while (true) {\\n        if (freeRams.length === 0) {\\n            return false;\\n        }\\n        var host = freeRams[0].host;\\n        var ram = freeRams[0].freeRam;\\n \\n        if (ram < scriptRam) {\\n            freeRams.shift()\\n        } else if (ram < scriptRam * remaingThread) {\\n            const threadForThisHost = Math.floor(ram / scriptRam)\\n            // ns.tprint(`executing ${script} on ${host} with ${threadForThisHost} threads, targeting ${target}`)\\n \\n            if (ns.exec(script, host, threadForThisHost, target) === 0) {\\n                ns.kill(script, host, target)\\n                ns.exec(script, host, threadForThisHost, target)\\n            }\\n            remaingThread -= threadForThisHost\\n            freeRams.shift()\\n        } else {\\n            // ns.tprint(`executing ${script} on ${host} with ${remaingThread} threads, targeting ${target}`)\\n            if (ns.exec(script, host, remaingThread, target) === 0) {\\n                ns.kill(script, host, target)\\n                ns.exec(script, host, remaingThread, target)\\n            }\\n            freeRams[0].freeRam -= scriptRam * remaingThread\\n \\n            return true;\\n        }\\n    }\\n \\n}\\nfunction getHackStates(ns, servers, hackables) {\\n    var hackstates = new Map();\\n    for (let server of servers.values()) {\\n        for (let hackable of hackables.values()) {\\n            let weakenScript = ns.getRunningScript(\\\"/OPScripts/weaken.js\\\", server, hackable);\\n            let growScript = ns.getRunningScript(\\\"/OPScripts/grow.js\\\", server, hackable);\\n            let hackScript = ns.getRunningScript(\\\"/OPScripts/hack.js\\\", server, hackable);\\n            if (hackstates.has(hackable)) {\\n                hackstates.get(hackable).weaken += weakenScript === null ? 0 : weakenScript.threads\\n                hackstates.get(hackable).grow += growScript === null ? 0 : growScript.threads\\n                hackstates.get(hackable).hack += hackScript === null ? 0 : hackScript.threads\\n            } else {\\n                hackstates.set(hackable, {\\n                    weaken: weakenScript === null ? 0 : weakenScript.threads,\\n                    grow: growScript === null ? 0 : growScript.threads,\\n                    hack: hackScript === null ? 0 : hackScript.threads\\n                })\\n            }\\n        }\\n    }\\n    return hackstates\\n}\\nfunction getHackable(ns, servers) {\\n    return [...servers.values()].filter(server => ns.getServerMaxMoney(server) > 100000\\n        && ns.getServerMoneyAvailable(server) > 1000\\n        && ns.getServerGrowth(server))\\n        .sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b))\\n}\\n \\nfunction getFreeRam(ns, servers) {\\n    const freeRams = [];\\n    for (let server of servers) {\\n        const freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n        if (freeRam > 1) {\\n            freeRams.push({ host: server, freeRam: freeRam });\\n        }\\n \\n    }\\n    var sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n    return sortedFreeRams;\\n}\\n \\nfunction scanAndHack(ns) {\\n    let servers = new Set([\\\"home\\\"]);\\n    scanAll(\\\"home\\\", servers, ns);\\n    const accesibleServers = new Set();\\n    for (let server of servers) {\\n        var portOpened = 0;\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n            ns.brutessh(server);\\n            portOpened++;\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n            ns.ftpcrack(server);\\n            portOpened++;\\n        }\\n \\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n            ns.httpworm(server);\\n            portOpened++;\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n            ns.relaysmtp(server);\\n            portOpened++;\\n        }\\n \\n        if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n            ns.sqlinject(server);\\n            portOpened++;\\n        }\\n \\n        if (ns.getServerNumPortsRequired(server) <= portOpened\\n            && ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n            ns.nuke(server);\\n            accesibleServers.add(server);\\n        }\\n    }\\n    return accesibleServers.add(\\\"home\\\");\\n}\\n \\nfunction scanAll(host, servers, ns) {\\n    var hosts = ns.scan(host);\\n    ns.print(hosts);\\n    for (let i = 0; i < hosts.length; i++) {\\n        if (!servers.has(hosts[i])) {\\n            servers.add(hosts[i]);\\n            scanAll(hosts[i], servers, ns);\\n        }\\n \\n    }\\n}\",\"filename\":\"/OPScripts/ultimateHackingMGR.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/ultimateHackingMGR.js\",\"url\":\"blob:file:///db5c24a1-0fbc-4419-93a3-9ce1f7616bd3\",\"moduleSequenceNumber\":830}],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":1487,\"_hash\":\"71702e035d0f4c6219f78d4962a9895ca61b9fd034f41ac8d9b08729faaa62d9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/OPScripts/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/weaken.js\",\"url\":\"blob:file:///cc63878a-6330-4243-b1e9-d5e6c1ea6677\",\"moduleSequenceNumber\":898}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1488,\"_hash\":\"1c4b8896d7d6509e96e446277247667004f8af0c1f968ceb1e55974f06c74930\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"/HelperScripts/find_coding_contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_coding_contracts.js\",\"url\":\"blob:file:///8e1fcdd4-0aec-4f0e-a62f-c6d543a904bb\"}],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":1489,\"_hash\":\"60f71098e4f2ae9f5a01cd3b08d175affba09b8937787c8a148ca8c8d24cbe1c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"/HelperScripts/custom_stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"custom_stats.js\",\"url\":\"blob:file:///a5fc02ec-988c-4fa6-b996-00c140795910\"}],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":1490,\"_hash\":\"9b84fb4c333acbaf3b93f1e8d1b4c0e157cce1b06e22e1c7fdffecf3c0018676\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   var server = \\\"megacorp\\\";   //Host to hack\\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/megaop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/megaop.js\",\"url\":\"blob:file:///231107be-6f3d-412f-b17d-f06604b8086a\",\"moduleSequenceNumber\":211366}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1491,\"_hash\":\"468009e7e46d12a69ccbd538ddf2fcec942e87ed6577cf914759908c8d84afb2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nvar server = ns.args[0];\\nvar sleeptime = ns.args[1];\\nawait ns.sleep(sleeptime);\\nawait ns.hack(server);\\n}\",\"filename\":\"/OPScripts/OPhack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/OPScripts/OPhack.js\",\"url\":\"blob:file:///094b119c-dada-491d-b2b4-5d8c80569457\",\"moduleSequenceNumber\":3102}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":3102,\"_hash\":\"c609c5a5b980bdeb5d0712171758c46083d9d89319ece98f9ff4767dc4e75b56\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nvar server = ns.args[0];\\nvar sleeptime = ns.args[1];\\nawait ns.sleep(sleeptime);\\nawait ns.weaken(server);\\n}\",\"filename\":\"/OPScripts/OPweaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/OPScripts/OPweaken.js\",\"url\":\"blob:file:///69128de2-32e4-4a44-a9d7-d17d1fbb59a2\",\"moduleSequenceNumber\":2316}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":2316,\"_hash\":\"3710b6675d812f61a251f3c6fbae1fab7f50afd1f358069b6547c4d942aa7f4d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nvar server = ns.args[0];\\nvar sleeptime = ns.args[1];\\nawait ns.sleep(sleeptime);\\nawait ns.grow(server);\\n}\",\"filename\":\"/OPScripts/OPgrow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/OPScripts/OPgrow.js\",\"url\":\"blob:file:///cff40561-b155-422d-b346-020734a4bace\",\"moduleSequenceNumber\":2317}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":2317,\"_hash\":\"3c7d64173a9a4eb40a8c9f56584c164fc52874faa6cce5cf20696f7ceb2e435f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/OPScripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/hack.js\",\"url\":\"blob:file:///3a459712-e6b4-44f0-8ce9-031f7a4f7742\",\"moduleSequenceNumber\":877}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":1495,\"_hash\":\"b14431d02324f4543ef5cc3c94cff2e6e86e1302460bb5f6f7c0d224264dfb83\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/OPScripts/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/grow.js\",\"url\":\"blob:file:///50337218-aae4-4063-a1f1-c5f186f87c9c\",\"moduleSequenceNumber\":899}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":1496,\"_hash\":\"5ff97751b119123cb164c20ad838bf99d6707201cea52db6e0ffed1172274e54\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// If the percentage of money on server is LESS than this, grow it to max\\nconst growPercent =  90\\n// hack the sever only if the percentage of money on server is MORE than this \\nconst hackPercent =  75\\n// hack the sever only if the security of the server is this many above the minimal\\nconst secThreshold =  50\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.print(ns.heart.break());\\n    while (true) {\\n        // scan and hack all accesible servers\\n        var servers = scanAndHack(ns);\\n        // ns.tprint(`servers:${[...servers.values()]}`)\\n\\n        // transfer file to servers\\n        for (let server of servers) {\\n            await ns.scp(\\\"/newStartScripts/h1.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/newStartScripts/w1.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/newStartScripts/g1.js\\\", \\\"home\\\", server)\\n            // some script to help you save time backdooring servers\\n            // , requires singularity module\\n            //             if(server === \\\"CSEC\\\" || server === \\\"I.I.I.I\\\" \\n            //             || server === \\\"avmnite-02h\\\" || server === \\\"run4theh111z\\\"){\\n            // await ns.installBackdoor(server)\\n            //             }\\n\\n        }\\n\\n        // find servers that we can run scripts on\\n        var freeRams = getFreeRam(ns, servers);\\n        // ns.tprint(`freeRams:${freeRams.map(value => JSON.stringify(value))}`)\\n\\n        // find servers that we can hack\\n        var hackables = getHackable(ns, servers);\\n        // ns.tprint(`hackable:${[...hackables.values()]}`)\\n\\n        // get currently running scripts on servers\\n        var hackstates = getHackStates(ns, servers, hackables)\\n        // ns.tprint(`hackstates:${[...hackstates.entries()].map((v, _i) => `${v[0]}:{${JSON.stringify(v[1])}}\\\\n`)}`)\\n\\n        // Main logic sits here, determine whether or not and how many threadsd\\n        // we should call weaken, grow and hack asynchronously \\n        manageAndHack(ns, freeRams, hackables, hackstates)\\n\\n        await ns.sleep(2000)\\n    }\\n}\\n\\nfunction manageAndHack(ns, freeRams, hackables, hackstates) {\\n    for (let target of hackables) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        const maxMoney = ns.getServerMaxMoney(target);\\n        const minSec = ns.getServerMinSecurityLevel(target);\\n        const sec = ns.getServerSecurityLevel(target);\\n\\n        var secDiff = sec - minSec\\n        // weaken if the security of the host is not at its minimum\\n        if (secDiff > 0) {\\n            var threads = Math.floor(secDiff * 20) - hackstates.get(target).weaken;\\n            if (threads > 0) {\\n                // if we didnt find any place to run, \\n                // it means we have ran out of places to run anything, so stop this \\n                // and wait for next cycle\\n                if (!findPlaceToRun(ns, \\\"/newStartScripts/w1.js\\\", threads, freeRams, target)) {\\n                    return\\n                }\\n            }\\n\\n        }\\n\\n        var moneyPercent = money / maxMoney * 100\\n        // grow if money is less then the percentage \\n        if (moneyPercent < growPercent) {\\n            var threads = Math.floor(ns.growthAnalyze(target, 100 / moneyPercent))\\n                - hackstates.get(target).grow;\\n            if (threads > 0) {\\n                // if we didnt find any place to run, \\n                // it means we have ran out of places to run anything, so stop this \\n                // and wait for next cycle\\n                if (!findPlaceToRun(ns, \\\"/newStartScripts/g1.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n\\n        if (moneyPercent > hackPercent && secDiff < secThreshold) {\\n            var threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney)))\\n                - hackstates.get(target).hack\\n            if (threads > 0) {\\n                // hack to money percent = 70\\n                if (!findPlaceToRun(ns, \\\"/newStartScripts/h1.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n        // ns.tprint(`target:${target} secDiff:${secDiff.toFixed(2)} moneyPercent:${moneyPercent.toFixed(2)}`)\\n    }\\n\\n}\\n\\n// find some place to run the script with given amount of threads\\n// returns ture means script was executed, false means it didnt\\nfunction findPlaceToRun(ns, script, threads, freeRams, target) {\\n    let scriptRam = ns.getScriptRam(script)\\n    var remaingThread = threads;\\n    while (true) {\\n        // if no more host with ram, return false\\n        if (freeRams.length === 0) {\\n            return false;\\n        }\\n\\n        // try with first availiable host\\n        var host = freeRams[0].host;\\n        var ram = freeRams[0].freeRam;\\n\\n        // if not enough ram on host to even run 1 thread, remove the host from list\\n        if (ram < scriptRam) {\\n            freeRams.shift()\\n\\n            // else if the ram on the host is not enough to run all threads, just run as much as it can\\n        } else if (ram < scriptRam * remaingThread) {\\n            const threadForThisHost = Math.floor(ram / scriptRam)\\n\\n            // try to run the script, at this point this will only fail if\\n            // the host is already running the script against the same target,\\n            // from an earlier cycle\\n            if (ns.exec(script, host, threadForThisHost, target) === 0) {\\n                // if failed, than find the next host to run it, and return its result\\n                return findPlaceToRun(ns, script, threads, freeRams.slice(1), target)\\n            } else {\\n                // if run successed update thread to run and remove this host from the list\\n                // if (script === \\\"hack.js\\\") {\\n                // ns.tprint(`executing ${script} on ${host} with ${threadForThisHost} threads, targeting ${target}`)\\n                // }\\n                remaingThread -= threadForThisHost\\n                freeRams.shift()\\n            }\\n\\n        } else {\\n            // try to run the script, at this point this will only fail if\\n            // the host is already running the script against the same target,\\n            // from an earlier cycle\\n            if (ns.exec(script, host, remaingThread, target) === 0) {\\n                // if failed, than find the next host to run it, and return its result\\n                if (!findPlaceToRun(ns, script, threads, freeRams.slice(1), target)) {\\n                    return false;\\n                }\\n            } else {\\n                // if run successed update the remaining ram for this host\\n                // if (script === \\\"hack.js\\\") {\\n                //     ns.tprint(`executing ${script} on ${host} with ${remaingThread} threads, targeting ${target}`)\\n                // }\\n                freeRams[0].freeRam -= scriptRam * remaingThread\\n            }\\n\\n            return true;\\n        }\\n    }\\n}\\n\\n// gets the number of running threads against hackable servers\\nfunction getHackStates(ns, servers, hackables) {\\n    var hackstates = new Map();\\n    for (let server of servers.values()) {\\n        for (let hackable of hackables.values()) {\\n            let weakenScript = ns.getRunningScript(\\\"/newStartScripts/w1.js\\\", server, hackable);\\n            let growScript = ns.getRunningScript(\\\"/newStartScripts/g1.js\\\", server, hackable);\\n            let hackScript = ns.getRunningScript(\\\"/newStartScripts/h1.js\\\", server, hackable);\\n            if (hackstates.has(hackable)) {\\n                hackstates.get(hackable).weaken += weakenScript === null ? 0 : weakenScript.threads\\n                hackstates.get(hackable).grow += growScript === null ? 0 : growScript.threads\\n                hackstates.get(hackable).hack += hackScript === null ? 0 : hackScript.threads\\n            } else {\\n                hackstates.set(hackable, {\\n                    weaken: weakenScript === null ? 0 : weakenScript.threads,\\n                    grow: growScript === null ? 0 : growScript.threads,\\n                    hack: hackScript === null ? 0 : hackScript.threads\\n                })\\n            }\\n        }\\n    }\\n    return hackstates\\n}\\n\\n// filter the list for hackable servers\\nfunction getHackable(ns, servers) {\\n    return [...servers.values()].filter(server => ns.getServerMaxMoney(server) > 100000\\n        && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()\\n        && ns.getServerMoneyAvailable(server) > 1000\\n        && ns.getServerGrowth(server))\\n        .sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b))\\n}\\n\\n// filter the list for servers where we can run script on\\nfunction getFreeRam(ns, servers) {\\n    const freeRams = [];\\n    for (let server of servers) {\\n        const freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n        if (freeRam > 1) {\\n            freeRams.push({ host: server, freeRam: freeRam });\\n        }\\n\\n    }\\n    var sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n    return sortedFreeRams;\\n}\\n\\n// scan all servers from home and hack them if we can\\nfunction scanAndHack(ns) {\\n    let servers = new Set([\\\"home\\\"]);\\n    scanAll(\\\"home\\\", servers, ns);\\n    const accesibleServers = new Set();\\n    for (let server of servers) {\\n        if (ns.hasRootAccess(server)) {\\n            accesibleServers.add(server)\\n        } else {\\n            var portOpened = 0;\\n            if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n                ns.brutessh(server);\\n                portOpened++;\\n            }\\n            if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n                ns.ftpcrack(server);\\n                portOpened++;\\n            }\\n\\n            if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n                ns.httpworm(server);\\n                portOpened++;\\n            }\\n            if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n                ns.relaysmtp(server);\\n                portOpened++;\\n            }\\n\\n            if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n                ns.sqlinject(server);\\n                portOpened++;\\n            }\\n\\n            if (ns.getServerNumPortsRequired(server) <= portOpened) {\\n                ns.nuke(server);\\n                accesibleServers.add(server);\\n            }\\n        }\\n\\n\\n    }\\n    return accesibleServers;\\n}\\n\\nfunction scanAll(host, servers, ns) {\\n    var hosts = ns.scan(host);\\n    for (let i = 0; i < hosts.length; i++) {\\n        if (!servers.has(hosts[i])) {\\n            servers.add(hosts[i]);\\n            scanAll(hosts[i], servers, ns);\\n        }\\n\\n    }\\n}\",\"filename\":\"/newStartScripts/uhm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/uhm.js\",\"url\":\"blob:file:///5c95545c-1952-417e-9c91-0640e81d3b32\",\"moduleSequenceNumber\":2318}],\"dependents\":[],\"ramUsage\":9.8,\"server\":\"home\",\"moduleSequenceNumber\":2318,\"_hash\":\"4a31b00d3f45221e4d9da3662783ae171ed8230e2bd42ed5aec02249e62aee60\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newStartScripts/h1.js\",\"url\":\"blob:file:///f9872111-c76e-4b51-b0c7-007747b89b63\",\"moduleSequenceNumber\":5067}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":1498,\"_hash\":\"52a611207315e48df0ef7826cd9f943258e2143cec0033c05bebe7a8606ef3c9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///8e719e12-6764-4c45-a52f-d918f6940cf9\",\"moduleSequenceNumber\":2774}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":2774,\"_hash\":\"b5642ab50667b899638a56518afb79f48c0f59cc1a77788a5c6df15e71f03579\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///f32fd9dd-01b8-4323-b232-29b02ee768af\",\"moduleSequenceNumber\":2773}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":2773,\"_hash\":\"6f70e732ab9e9703cbcf3ff6c64fa775af22df4d662e2441b3fecc79a279cf45\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** u/param {NS} ns **/ export async function main(ns) {document.achievements.push(\\\"UNACHIEVABLE\\\")}\",\"filename\":\"unachievable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"unachievable.js\",\"url\":\"blob:file:///ab4580ff-b042-47b0-908c-12266d374f5b\",\"moduleSequenceNumber\":1490}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":1501,\"_hash\":\"49e155f72ba8c058e8f1a64396c284a29aea9c620b17cc763ff9c452f9d52610\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let facServers = {\\n    \\\"CSEC\\\" : \\\"yellow\\\",\\n    \\\"avmnite-02h\\\" : \\\"yellow\\\",\\n    \\\"I.I.I.I\\\" : \\\"yellow\\\",\\n    \\\"run4theh111z\\\" : \\\"yellow\\\",\\n    \\\"The-Cave\\\" : \\\"orange\\\",\\n    \\\"w0r1d_d43m0n\\\" : \\\"red\\\"\\n};\\n\\nlet svObj = (name = 'home', depth = 0) => ({ name: name, depth: depth });\\nexport function getServers(ns) {\\n    let result = [];\\n    let visited = { 'home': 0 };\\n    let queue = Object.keys(visited);\\n    let name;\\n    while ((name = queue.pop())) {\\n        let depth = visited[name];\\n        result.push(svObj(name, depth));\\n        let scanRes = ns.scan(name);\\n        for (let i = scanRes.length; i >= 0; i--) {\\n            if (visited[scanRes[i]] === undefined) {\\n                queue.push(scanRes[i]);\\n                visited[scanRes[i]] = depth + 1;\\n            }\\n        }\\n    }\\n    return result;\\n}\\nexport async function main(ns) {\\n    let output = \\\"Network:\\\";\\n\\n    getServers(ns).forEach(server => {\\n        let name = server.name;\\n        let hackColor = ns.hasRootAccess(name) ? \\\"lime\\\" : \\\"red\\\";\\n        let nameColor = facServers[name] ? facServers[name] : \\\"white\\\";\\n        \\n        let hoverText = [\\\"Req Level: \\\", ns.getServerRequiredHackingLevel(name),\\n            \\\"&#10;Req Ports: \\\", ns.getServerNumPortsRequired(name),\\n            \\\"&#10;Memory: \\\", ns.getServerRam(name)[0], \\\"GB\\\",\\n            \\\"&#10;Security: \\\", ns.getServerSecurityLevel(name),\\n            \\\"/\\\", ns.getServerMinSecurityLevel(name),\\n            \\\"&#10;Money: \\\", Math.round(ns.getServerMoneyAvailable(name)).toLocaleString(), \\\" (\\\", \\n            Math.round(100 * ns.getServerMoneyAvailable(name)/ns.getServerMaxMoney(name)), \\\"%)\\\"\\n            ].join(\\\"\\\");\\n        \\n        let ctText = \\\"\\\";\\n        ns.ls(name, \\\".cct\\\").forEach(ctName => {\\n            ctText += [\\\"<a title='\\\", ctName,\\n                //Comment out the next line to reduce footprint by 5 GB\\n                \\\"&#10;\\\", ns.codingcontract.getContractType(ctName, name),\\n                \\\"'>©</a>\\\"].join(\\\"\\\"); \\n        });\\n               \\n        output += [\\\"<br>\\\", \\\"---\\\".repeat(server.depth),\\n            `<font color=${hackColor}>■ </font>`,\\n            `<a class='scan-analyze-link' title='${hoverText}''\\n\\n            onClick=\\\"(function()\\n            {\\n                const terminalInput = document.getElementById('terminal-input');\\n                terminalInput.value='home; run connect.js ${name}';\\n                const handler = Object.keys(terminalInput)[1];\\n                terminalInput[handler].onChange({target:terminalInput});\\n                terminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n            })();\\\"\\n        \\n            style='color:${nameColor}'>${name}</a> `,\\n            `<font color='fuchisa'>${ctText}</font>`,\\n            ].join(\\\"\\\");\\n    });\\n\\n    const list = document.getElementById(\\\"terminal\\\");\\n    list.insertAdjacentHTML('beforeend',output);\\n}\",\"filename\":\"scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan.js\",\"url\":\"blob:file:///a58e8f2d-6044-43ad-9e68-a055e36b2bc4\",\"moduleSequenceNumber\":1940}],\"dependents\":[],\"ramUsage\":32.75,\"server\":\"home\",\"moduleSequenceNumber\":1502,\"_hash\":\"57aec0ee477ec4450b5d00e83fdb52a7469489cbe3552e0c54056f08fe47fff4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    //*********PARAMS FOR SCRIPT ***************//\\n    var maxSharePer = 0.75                     // maximum percent of a symbol's total stock to buy\\n    var stockBuyPer = 0.6                     //  percent probablity to buy symbol\\n    var stockVolPer = .05                    //   percent stock will move to buy\\n    var moneyKeep = 500000000               //    min money to keep on hand\\n    var minSharePer = 5                    //     min shares to buy\\n    var orderMax = 5000000000             //      max money to spend on a single order\\n    var profPer = 0.05                   //       min profit percentage to sell\\n    var panicPer = 0.99                 //        percentage loss to panic sell at\\n    //*********************************//\\n    while (true) {\\n        ns.disableLog('disableLog');\\n        ns.disableLog('sleep');\\n        ns.disableLog('getServerMoneyAvailable')\\n        var stocks = ns.stock.getSymbols();\\n        for (const stock of stocks) {\\n            var position = ns.stock.getPosition(stock)\\n            if (position[0]) {\\n                ns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n                sellPositions(stock);\\n            }\\n            buyPositions(stock);\\n \\n        }\\n        await ns.sleep(6000);\\n    }\\n    function sellPositions(stock) {\\n        //check profit\\n        if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) >= 1 + profPer && ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") > 100000) {\\n            //sell stock\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n            ns.stock.sell(stock, position[0]);\\n        } else if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) < (1 - panicPer)) {\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" loss!\\\", \\\"warning\\\");\\n            ns.stock.sell(stock, position[0]);\\n        }\\n    }\\n \\n    function buyPositions(stock) {\\n        var maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n        var askPrice = ns.stock.getAskPrice(stock);\\n        var forecast = ns.stock.getForecast(stock);\\n        var volPer = ns.stock.getVolatility(stock);\\n        var playerMoney = ns.getServerMoneyAvailable('home');\\n        //if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n            //check money for one share\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n                var shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n                ns.stock.buy(stock, Math.min(shares, maxShares));\\n                \\n            }\\n        }\\n    }\\n \\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///59468c97-deb2-4cf8-85be-801e6c46f1c2\",\"moduleSequenceNumber\":57952}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":1503,\"_hash\":\"044e0cb910b46bf3153a2744f09cc0209d466dfbc4707dbcd87917015cbe453b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar thecrimes = [\\\"Shoplift\\\", \\\"Rob Store\\\", \\\"Mug Someone\\\", \\\"Larceny\\\", \\\"Deal Drugs\\\", \\\"Bond Forgery\\\", \\\"Traffick Illegal Arms\\\", \\\"Homicide\\\", \\\"Grand theft Auto\\\", \\\"Kidnap and Ransom\\\", \\\"Assassinate\\\", \\\"Heist\\\"]\\nns.tail()\\n \\n //while (ns.heart.break() < 54000) {\\n      while (true) {\\n\\n\\t var crime = \\\"Homicide\\\";\\n    const estimatedDuration = ns.commitCrime(crime);\\n    await ns.sleep(estimatedDuration);\\n\\n    var timeout = 4200;\\n    while (ns.isBusy()) {\\n        await ns.sleep(200);\\n        timeout -= 200;\\n        if (timeout <= 0) {\\n            ns.tprint(\\\"You've been busy \\\" + format.time(TIMEOUT + timeout) + \\\" since last crime supposedly finished, terminating.\\\")\\n            return;\\n        }\\n    }\\n} \\nns.tprint(\\\"Karma of -54000 Achieved\\\");\\n//bladeburner script placement here\\n\\t\\n}\",\"filename\":\"homeCrimesSingularity.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"homeCrimesSingularity.js\",\"url\":\"blob:file:///0b7be504-0370-4902-a704-f0b743fa0bd4\",\"moduleSequenceNumber\":279}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":1504,\"_hash\":\"578843c0bd6e22dcb02486cfa179500b3ff69af7b17a8a5fd5d9932190e02241\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/nwoop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/nwoop.js\",\"url\":\"blob:file:///3f70a268-fdc3-43a1-aaa5-27db09bdf29b\",\"moduleSequenceNumber\":314995}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/summit-uniop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/summit-uniop.js\",\"url\":\"blob:file:///4400639c-99c9-4f83-b113-577f46a8c1fd\",\"moduleSequenceNumber\":1785}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   var server = \\\"clarkinc\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/clarkincop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/clarkincop.js\",\"url\":\"blob:file:///b42584cc-5901-4b7f-9dad-4f7512f7d4f2\",\"moduleSequenceNumber\":470602}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/secondOP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    let target = ns.args[0];\\n    let paths = { \\\"home\\\": \\\"\\\" };\\n    let queue = Object.keys(paths);\\n    let name;\\n    let output;\\n    let pathToTarget;\\n    while ((name = queue.shift())) {\\n        let path = paths[name];\\n        let scanRes = ns.scan(name);\\n        for (let newSv of scanRes) {\\n            if (paths[newSv] === undefined) {\\n                queue.push(newSv);\\n                paths[newSv] = `${path},${newSv}`;\\n                if (newSv == target)\\n                    pathToTarget = paths[newSv].substr(1).split(\\\",\\\");\\n                    \\n            }\\n        }\\n    }\\n    output = \\\"home; \\\";\\n\\n    pathToTarget.forEach(server=> output += \\\" connect \\\" + server + \\\";\\\");\\n\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    terminalInput.value=output;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({target:terminalInput});\\n    terminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n}\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"connect.js\",\"url\":\"blob:file:///6c470025-6462-4311-b0ba-f6339c704c1d\",\"moduleSequenceNumber\":9054}],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":1509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(ns.heart.break());\\n\\n}\",\"filename\":\"karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"karma.js\",\"url\":\"blob:file:///3e072ace-b712-40c8-a6f7-cd8cec6d25fe\",\"moduleSequenceNumber\":28478}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"zb-def\\\";   //Host to hack\\n\\n  \\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/OP.js\",\"url\":\"blob:file:///bf223de8-b64c-4520-9fc6-e762ccb42ebd\",\"moduleSequenceNumber\":216518}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/joesop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/OPScripts/joesop.js\",\"url\":\"blob:file:///ee207c41-ddbf-43ce-a33e-2a3f3b3b3f23\",\"moduleSequenceNumber\":2315}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":2315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n//var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   var server = \\\"applied-energetics\\\";\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/700op.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/700op.js\",\"url\":\"blob:file:///84a7d71e-9720-4883-a155-a340cae84f60\",\"moduleSequenceNumber\":58447}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\n   \\n      var server = \\\"omnitek\\\";   //Host to hack 969\\n\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/omnitekop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/omnitekop.js\",\"url\":\"blob:file:///8d1e5cd5-003d-4cde-8030-83a05b230be5\",\"moduleSequenceNumber\":4579}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   var server = \\\"b-and-a\\\";   //Host to hack\\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/bandaop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/bandaop.js\",\"url\":\"blob:file:///aac7038b-6db0-4489-89c5-11583a6b6e0b\",\"moduleSequenceNumber\":385021}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":1515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TASK_TRAIN = \\\"Train Combat\\\";\\nconst TASK_VIGI = \\\"Vigilante Justice\\\";\\nconst TASK_NOOB = String.fromCharCode(77) + \\\"ug People\\\";\\nconst TASK_RESPECT = String.fromCharCode(84) + \\\"errorism\\\";\\nconst TASK_MONEY = \\\"Human \\\" + String.fromCharCode(84) + \\\"rafficking\\\";\\nconst TASK_WARFARE = \\\"Territory Warfare\\\";\\nconst TASK_NULL = \\\"Unassigned\\\";\\nconst TASK_MANUAL = \\\"Manual/NotReallyTaskName\\\";\\n\\nconst ASCEND_ON_MPL = 5;\\nconst EQUIP_AFFORD_COEFF = 100;\\n\\nconst STATS_TRESHOLD = 0.7;\\nconst STATS_MIN = 4000;\\nconst STATS_HARD_MIN = 200;\\nconst TRAIN_CHANCE = 0.2;\\nconst RESPECT_MIN = 2e+6;\\n\\nconst WANTED_PENALTY_TRESHOLD = 0.99;\\nconst WARFARE_TRESHOLD = 2;\\n\\nconst MEMBERS_MIN = 6;\\nconst MEMBERS_MAX = 12;\\n\\nconst SLEEP_TIME = 10000;\\nconst MEMBERS = [\\\"Sansa\\\", \\\"Jon\\\", \\\"Arya\\\", \\\"Tyrion\\\", \\\"Jorah\\\", \\\"Samwell\\\", \\\"Brienne\\\", \\\"Sandor\\\", \\\"Bran\\\", \\\"Bronn\\\", \\\"Tormund\\\", \\\"Hodor\\\"];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tconst gang = ns.gang;\\n\\t// Get weighted stats sum (at this moment, sum of combat stats in eq proportions) \\n\\tfunction getStatsSum(member) {\\n\\t\\tconst info = gang.getMemberInformation(member);\\n\\t\\treturn info.str + info.def + info.dex + info.agi;\\n\\t}\\n\\t// Find the best gang power except our gang\\n\\tfunction maxEnemyPower(myGang) {\\n\\t\\tconst others = ns.gang.getOtherGangInformation();\\n\\t\\tlet maxPower = 0;\\n\\t\\tfor (let name in others) {\\n\\t\\t\\tif (name === myGang.faction) continue;\\n\\t\\t\\tmaxPower = Math.max(maxPower, others[name].power);\\n\\t\\t}\\n\\t\\treturn maxPower;\\n\\t}\\n\\t// Set a task or not to set (if manually overridden)\\n\\tconst autoTasks = {}\\n\\tfunction setAutoTask(member, task) {\\n\\t\\tconst info = gang.getMemberInformation(member);\\n\\t\\tconst lastTask = info.task;\\n\\t\\t// Manual task: stored task mismatches real task and not unassigned\\n\\t\\tif (lastTask !== TASK_NULL && autoTasks.hasOwnProperty(member) && autoTasks[member] !== lastTask) {\\n\\t\\t\\tautoTasks[member] = TASK_MANUAL;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// Automatic task: set it if differs from real one\\n\\t\\tautoTasks[member] = task;\\n\\t\\tif (lastTask !== task) {\\n\\t\\t\\tgang.setMemberTask(member, task);\\n\\t\\t}\\n\\t}\\n\\t// The script accepts argument for default task override (optional)\\n\\tlet defaultTask = null;\\n\\tif (ns.args[0] && gang.getTaskNames().includes(ns.args[0])) {\\n\\t\\tdefaultTask = ns.args[0];\\n\\t}\\n\\t// Main loop\\n\\tfor (;;) {\\n\\t\\t// Recruit any member possible \\n\\t\\twhile (gang.canRecruitMember()) {\\n\\t\\t\\tgang.recruitMember('member' + Math.random().toString().substr(2,3));\\n\\t\\t}\\n\\t\\tlet bestStats = STATS_MIN / STATS_TRESHOLD; // minimum\\n\\t\\tconst members = gang.getMemberNames();\\n\\t\\tconst info = gang.getGangInformation();\\n\\t\\t// Ascend if good enough\\n\\t\\tfor (let member of members) {\\n\\t\\t\\tconst r = gang.getAscensionResult(member);\\n\\t\\t\\tif (!r) continue;\\n\\t\\t\\tconst mpl = r.agi * r.def * r.dex * r.str;\\n\\t\\t\\tif (mpl > ASCEND_ON_MPL) {\\n\\t\\t\\t\\tgang.ascendMember(member);\\n\\t\\t\\t\\tns.tprint(`Member ${member} ascended!`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Purchase equipment \\n\\t\\tconst allEquip = gang.getEquipmentNames();\\n\\t\\tlet money = ns.getServerMoneyAvailable('home');\\n\\t\\tfor (let equip of allEquip) {\\n\\t\\t\\tconst cost = gang.getEquipmentCost(equip);\\n\\t\\t\\tconst amount = money/cost;\\n\\t\\t\\tif (amount < EQUIP_AFFORD_COEFF) continue;\\n\\t\\t\\tfor (let member of members) {\\n\\t\\t\\t\\tconst info = gang.getMemberInformation(member);\\n\\t\\t\\t\\tif (info.upgrades.includes(equip) || info.augmentations.includes(equip)) continue;\\n\\t\\t\\t\\tif (gang.purchaseEquipment(member, equip)) {\\n\\t\\t\\t\\t\\tmoney -= cost;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Find best stats\\n\\t\\tfor (let member of members) {\\n\\t\\t\\tlet sum = getStatsSum(member);\\n\\t\\t\\tif (sum > bestStats) bestStats = sum;\\n\\t\\t}\\n\\t\\t// Check if we are powerful enough\\n\\t\\tlet powerfulEnough = info.power >= maxEnemyPower(info) * WARFARE_TRESHOLD;\\n\\t\\tgang.setTerritoryWarfare(powerfulEnough);\\n\\t\\t// Choose the default task for members\\n\\t\\tlet task = defaultTask;\\n\\t\\tif (!defaultTask) {\\n\\t\\t\\t// If gang isn't full - gain respect\\n\\t\\t\\tif (members.length < MEMBERS_MAX) {\\n\\t\\t\\t\\ttask = (members.length < MEMBERS_MIN) ? TASK_NOOB : TASK_RESPECT;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if respect too low - gain it first, power second, money last\\n\\t\\t\\t\\tif (info.respect < RESPECT_MIN) {\\n\\t\\t\\t\\t\\ttask = TASK_RESPECT;\\n\\t\\t\\t\\t} else if (!powerfulEnough) {\\n\\t\\t\\t\\t\\ttask = TASK_WARFARE;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttask = TASK_MONEY;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Assign tasks\\n\\t\\tfor (let member of members) {\\n\\t\\t\\tlet sum = getStatsSum(member);\\n\\t\\t\\t// Train members, not acceptable in 'noob mode'\\n\\t\\t\\tif (sum < STATS_HARD_MIN || (members.length >= MEMBERS_MIN && sum < bestStats * STATS_TRESHOLD)) {\\n\\t\\t\\t\\tsetAutoTask(member, TASK_TRAIN);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t// Vigi if wanted penalty too large\\n\\t\\t\\tif (info.wantedLevel > 2 && info.wantedPenalty < WANTED_PENALTY_TRESHOLD) {\\n\\t\\t\\t\\tsetAutoTask(member, TASK_VIGI);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t// Do the default task (autoselected or called with args[0])\\n\\t\\t\\tsetAutoTask(member, Math.random() < TRAIN_CHANCE ? TASK_TRAIN : task);\\n\\t\\t}\\n\\t\\tawait ns.sleep(SLEEP_TIME);\\n\\t}\\n}\",\"filename\":\"cbGang.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"cbGang.js\",\"url\":\"blob:file:///5029bf7d-0e89-42b6-9f63-9cf5462269ae\",\"moduleSequenceNumber\":2266}],\"dependents\":[],\"ramUsage\":29.7,\"server\":\"home\",\"moduleSequenceNumber\":2266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000;\\nconst samplingLength = 30;\\n\\nfunction predictState(samples) {\\n  const limits = [null, null, null, null, null, null, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20];\\n  let inc = 0;\\n  for (let i = 0; i < samples.length; ++i) {\\n    const total = i + 1;\\n    const idx = samples.length - total;\\n    if (samples[idx] > 1.) {\\n      ++inc;\\n    }\\n    const limit = limits[i];\\n    if (limit === null) {\\n      continue;\\n    }\\n    if (inc >= limit) {\\n      return 1;\\n    }\\n    if ((total-inc) >= limit) {\\n      return -1;\\n    }\\n  }\\n  return 0;\\n}\\n\\nfunction format(money) {\\n    const prefixes = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\"];\\n    for (let i = 0; i < prefixes.length; i++) {\\n        if (Math.abs(money) < 1000) {\\n            return `${Math.floor(money * 10) / 10}${prefixes[i]}`;\\n        } else {\\n            money /= 1000;\\n        }\\n    }\\n    return `${Math.floor(money * 10) / 10}${prefixes[prefixes.length - 1]}`;\\n}\\n\\nfunction posNegDiff(samples) {\\n  const pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n  return Math.abs(samples.length - 2*pos);\\n}\\n\\nfunction posNegRatio(samples) {\\n  const pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n  return Math.round(100*(2*pos / samples.length - 1));\\n}\\n\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    let symLastPrice = {};\\n    let symChanges = {};\\n    for (const sym of ns.stock.getSymbols()) {\\n      symLastPrice[sym] = ns.stock.getPrice(sym);\\n      symChanges[sym] = []\\n    }\\n\\n    while (true) {\\n        await ns.sleep(2000);\\n\\n        if (symLastPrice['FSIG'] === ns.stock.getPrice('FSIG')) {\\n          continue;\\n        }\\n\\n        for (const sym of ns.stock.getSymbols()) {\\n          const current = ns.stock.getPrice(sym);\\n          symChanges[sym].push(current/symLastPrice[sym]);\\n          symLastPrice[sym] = current;\\n          if (symChanges[sym].length > samplingLength) {\\n            symChanges[sym] = symChanges[sym].slice(symChanges[sym].length - samplingLength);\\n          }\\n        }\\n\\n        const prioritizedSymbols = [...ns.stock.getSymbols()];\\n        prioritizedSymbols.sort((a, b) => posNegDiff(symChanges[b]) - posNegDiff(symChanges[a]));\\n        \\n        for (const sym of prioritizedSymbols) {\\n          const positions = ns.stock.getPosition(sym);\\n          const longShares = positions[0];\\n          const longPrice = positions[1];\\n          const shortShares = positions[2];\\n          const shortPrice = positions[3];\\n          const state = predictState(symChanges[sym]);\\n          const ratio = posNegRatio(symChanges[sym]);\\n          const bidPrice = ns.stock.getBidPrice(sym);\\n          const askPrice = ns.stock.getAskPrice(sym);\\n          if (longShares <= 0 && shortShares <= 0 && ns.stock.getPrice(sym) < 30000) {\\n            continue;\\n          }\\n\\n          if (longShares > 0) {\\n            const cost = longShares * longPrice;\\n            const profit = longShares * (bidPrice - longPrice) - 2 * commission;\\n            if (state < 0) {\\n              const sellPrice = ns.stock.sell(sym, longShares);\\n              if (sellPrice > 0) {\\n                  ns.print(`SOLD (long) ${sym}. Profit: ${format(profit)}`);\\n              }\\n            } else {\\n                ns.print(`${sym} (${ratio}): ${format(profit+cost)} / ${format(profit)} (${Math.round(profit/cost*10000)/100}%)`);\\n            }\\n          } else if (shortShares > 0) {\\n            const cost = shortShares * shortPrice;\\n            const profit = shortShares * (shortPrice - askPrice) - 2 * commission;\\n            if (state > 0) {\\n              const sellPrice = ns.stock.sellShort(sym, shortShares);\\n              if (sellPrice > 0) {\\n                  ns.tprint(`SOLD (short) ${sym}. Profit: ${format(profit)}`);\\n              }\\n            } else {\\n                ns.print(`${sym} (${ratio}): ${format(profit+cost)} / ${format(profit)} (${Math.round(profit/cost*10000)/100}%)`);\\n            }\\n          } else {\\n            const money = ns.getServerMoneyAvailable(\\\"home\\\");\\n            if (state > 0) {\\n              const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / askPrice));\\n              if (ns.stock.buy(sym, sharesToBuy) > 0) {\\n                  ns.print(`BOUGHT (long) ${sym}.`);\\n              }\\n            } else if (state < 0) {\\n              const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / bidPrice));\\n              if (ns.stock.short(sym, sharesToBuy) > 0) {\\n                  ns.print(`BOUGHT (short) ${sym}.`);\\n              }\\n            }\\n          }\\n        }\\n    }\\n}\",\"filename\":\"earlystock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlystock.js\",\"url\":\"blob:file:///d5cb9598-3ae1-46d2-87ff-e51f8456f919\",\"moduleSequenceNumber\":132}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":1517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Requires access to the TIX API and the 4S Mkt Data API\\nconst THRESHOLD_CASH_GOAL = 0.05; // Fraction of cash to aim to keep in hand\\nconst THRESHOLD_CASH_LOW = 0.001; // Fraction of cash in hand sale back to goal threshold\\n \\n// Probability stock will increase is a value between 0 and 1.\\nconst THRESHOLD_SELL = 0.5; // Probability we should start sell at if under. \\nconst THRESHOLD_BUY = 0.5; // Probability we should start buying at if over\\n \\nconst COMMISSION = 100000; //Buy or sell commission\\nconst REFRESH = 5200; // time to wait between stock price refreshes\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tail();\\n    let rollingProfit = 0;\\n    if (ns.args[0] == \\\"sellall\\\") {\\n        ns.tprint(\\\"selling all stocks\\\");\\n        const allStocks = refreshStocks(ns);\\n        allStocks.filter((stk) => stk.shares > 0).forEach((stk) =>{\\n            rollingProfit += sell(ns, stk, stk.shares, true);\\n        });\\n        ns.tprint(`made ~${format(rollingProfit)}`);\\n        return;\\n    }\\n    //Initialise\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        let i;\\n\\n        // get current stock info with highest return chance first.\\n        const allStocks = refreshStocks(ns);\\n        // get my stocks but sorted by weakest return chance\\n        const myStocks = allStocks.filter((stock) => stock.shares > 0).sort(function (a, b) { return a.prob - b.prob });\\n        const holdingPrice = allStocks.reduce((prev, stock) => prev += (stock.price * stock.shares), 0);\\n        const boughtPrice = allStocks.reduce((prev, stock) => prev += (stock.avgBuyPrice * stock.shares), 0);\\n        ns.print(`holding ${format(holdingPrice)} for current gain of ${format(holdingPrice - boughtPrice)}`);\\n        let corpus = ns.getServerMoneyAvailable(\\\"home\\\") + holdingPrice;\\n        ns.print(`corpus ${format(corpus)}`);\\n        ns.print(`actual profit: ${format(rollingProfit)}`);\\n \\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.prob < THRESHOLD_SELL) {\\n                rollingProfit += sell(ns, stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n \\n        // Sell shares if not enough cash in hand (start lowest return);\\n        myStocks.forEach((stock) => {\\n            const homeMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n            if (homeMoney < (THRESHOLD_CASH_LOW * corpus)) {\\n                ns.print(`need money, selling stocks`);\\n                let cashNeeded = (corpus * THRESHOLD_CASH_GOAL - homeMoney + COMMISSION);\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n                rollingProfit += sell(ns, myStocks[i], numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n \\n        //Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable(\\\"home\\\") - (corpus * THRESHOLD_CASH_GOAL);\\n        allStocks.filter((stock)=> (stock.prob > THRESHOLD_BUY && stock.remainingShares > 0)).forEach((stock)=>{\\n            let numShares = Math.min(Math.floor((cashToSpend - COMMISSION) / stock.price), stock.remainingShares);\\n            if (numShares > 0) {\\n                const spent = buy(ns, stock, numShares);\\n                cashToSpend -= spent;\\n            }\\n        });\\n        await ns.sleep(REFRESH);\\n    }\\n}\\n \\n/** @param {NS} ns **/\\nfunction refreshStocks(ns) {\\n    return ns.stock.getSymbols().map((sym)=> {\\n\\n        const position = ns.stock.getPosition(sym);\\n        const price = ns.stock.getPrice(sym);\\n        const shares = position[0];\\n        const avgBuyPrice = position[1];\\n        const prob = ns.stock.getForecast(sym);\\n        const remainingShares = ns.stock.getMaxShares(sym) - shares;\\n        return {\\n            sym,\\n            price,\\n            shares,\\n            avgBuyPrice,\\n            prob,\\n            remainingShares\\n        };\\n    }).sort(function (a, b) { return b.prob - a.prob });\\n}\\n \\n/** @param {NS} ns **/\\nfunction buy(ns, stock, numShares) {\\n    const price = ns.stock.buy(stock.sym, numShares);\\n    ns.print(`Bought ${stock.sym} for ${format(numShares * stock.price)}`);\\n    return price * numShares + COMMISSION;\\n}\\n \\n/** @param {NS} ns **/\\nfunction sell(ns, stock, numShares, isSellAll) {\\n    let profit = numShares * (stock.price - stock.avgBuyPrice) - 2 * COMMISSION;\\n    if (!isSellAll) {\\n        ns.print(`Sold ${stock.sym} for profit of ${format(profit)}`);\\n    } else {\\n        ns.tprint(`Sold ${stock.sym} for profit of ${format(profit)}`);\\n    }\\n    ns.stock.sell(stock.sym, numShares);\\n    return profit;\\n}\\n \\nfunction format(num) {\\n    let symbols = [\\\"\\\", \\\"K\\\", \\\"M\\\", \\\"B\\\", \\\"T\\\", \\\"Qa\\\", \\\"Qi\\\", \\\"Sx\\\", \\\"Sp\\\", \\\"Oc\\\"];\\n    let i;\\n    for (i = 0; (Math.abs(num) >= 1000) && (i < symbols.length); i++) {\\n        num /= 1000;\\n    } \\n    return ((Math.sign(num) < 0) ? \\\"-$\\\" : \\\"$\\\") + Math.abs(num.toFixed(3)) + symbols[i];\\n}\",\"filename\":\"4stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"4stocks.js\",\"url\":\"blob:file:///45f4785b-3c55-49be-b977-51f72c4b0bc4\",\"moduleSequenceNumber\":36231}],\"dependents\":[],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":1518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tvar charInfo = ns.getPlayer()\\n\\tvar agility = 0;\\n\\twhile(agility < 100){\\n\\tawait ns.gymWorkout(\\\"powerhouse gym\\\",\\\"agility\\\",true)\\n\\t\\tcharInfo =  ns.getPlayer();\\n\\t \\tagility = charInfo.agility;\\n\\t\\tns.print(agility)\\n\\t\\tns.sleep(1000);\\n\\t}\\n\\tns.print(charInfo)\\n}\",\"filename\":\"bitburner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bitburner.js\",\"url\":\"blob:file:///e20f0975-a292-4c99-aee7-40040bf110f2\",\"moduleSequenceNumber\":16142}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":1519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog(\\\"sleep\\\")\\n\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"strength\\\", false)\\n\\tns.print(\\\"Training Strength\\\")\\n\\twhile (ns.getPlayer().strength < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"defense\\\", false)\\n\\tns.print(\\\"Training Defense\\\")\\n\\n\\twhile (ns.getPlayer().defense < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"dexterity\\\", false)\\n\\tns.print(\\\"Training Dexterity\\\")\\n\\n\\twhile (ns.getPlayer().dexterity < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"agility\\\", false)\\n\\tns.print(\\\"Training Agility\\\")\\n\\n\\twhile (ns.getPlayer().agility < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.tprint(\\\"Trained up ready for bad karma!\\\")\\n\\tns.run(\\\"homeCrimesSingularity.js\\\", 1)\\n\\n\\n\\n}\",\"filename\":\"blade.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"blade.js\",\"url\":\"blob:file:///be343b8f-d76a-4b1b-b465-add1ce986ff5\",\"moduleSequenceNumber\":67704}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":1520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n    const argsSchema = [\\n        ['trips-per-cycle', 100000],\\n        ['money-threshold', 1000000000000]\\n    ];\\n\\n    /** @param {NS} ns \\n     * Script contributed by https://github.com/ShawnPatton\\n     * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.tprint(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.tprint(`money-threshold: ` + formatMoney(moneyThreshold));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.tprint(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.tprint(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + formatDuration(duration) + ` & ` + formatNumberShort(tripsPerLevel) + ` Travels`);\\n                ns.tprint(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\\n\\n\\nfunction autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\nfunction formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\nfunction formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\nfunction formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\",\"filename\":\"int-farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"int-farm.js\",\"url\":\"blob:file:///68d74d32-cf9f-4e5b-a9f0-78c52960b164\",\"moduleSequenceNumber\":44386}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":1521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const MoneyFormat = '$0.0a';\\nconst TimeFormat = '00:00:00';\\n\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\n    /*\\n    ns.hacknet-auto.script for Bitburner v0.47.2\\n    Winners don't use copyright\\n    \\n    Latest version of this script should be at\\n        https://github.com/iuriguilherme/netscripts.d\\n    Bitburner should be at https://github.com/danielyxie/bitburner\\n    \\n    This script requires 5.70 GB of RAM to run for 1 thread(s)\\n    \\n    This script will buy a ns.hacknet Node, fully upgrade it and then buy the next\\n    one in an infinite loop. If the cost of the next upgrade is higher than \\n    buying a new ns.hacknet Node, then a new one will be bought before the last one\\n    is upgraded. There is an option to set the budget limit.\\n*/\\n\\n    // We will not buy anything if there's less money than this ammount\\n    var reserveMoney = 2000;\\n    // Number of times to upgrade (shouldn't have to change this)\\n    var n = 1;\\n\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n\\n    ns.tail();\\n\\n    ns.print('Waiting to purchase next upgrade...');\\n\\n    // Buy first ns.hacknetNode if there are none\\n    if (\\n        ns.hacknet.numNodes() === 0 &&\\n        ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\n    ) {\\n        ns.hacknet.purchaseNode();\\n        displayDashBoard(ns);\\n    }\\n\\n    // If there are no ns.hacknet Nodes, we can't do anything, so the script ends.\\n    while (ns.hacknet.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending the loop.\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\n            for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n                while (\\n                    ns.hacknet.getLevelUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeLevel(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getRamUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeRam(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getCoreUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeCore(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n                 while (\\n                    ns.hacknet.getCacheUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeCache(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n            } // END for (i = 0; i < ns.hacknet.numNodes(); i++)\\n            /*\\n                Buy next ns.hacknet Node if the last one is already fully upgraded.\\n                If for some reason the last ns.hacknet Node is fully upgraded and the\\n                others don't, the loop above will still attempt to upgrade them all.\\n            */\\n            if (\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getCacheUpgradeCost((ns.hacknet.numNodes()-1),n) === Infinity\\n            ) {\\n                // Only buy nodes up to 20. Past that its not really worth it.\\n                if (ns.hacknet.numNodes() < 20) {\\n                    ns.hacknet.purchaseNode();\\n\\n                    displayDashBoard(ns);\\n                }\\n            } else if (\\n                /*\\n                Or buy the next ns.hacknet Node if the next upgrade is more expensive\\n                than buying a new ns.hacknet Node.\\n                */\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getCacheUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost()\\n\\n            ) {\\n                ns.hacknet.purchaseNode();\\n\\n                displayDashBoard(ns);\\n            }\\n            await ns.sleep(100);\\n        }\\n        await ns.sleep(100);\\n    }\\n};\\n\\n/** @param {import(\\\".\\\").NS } ns */\\nfunction displayDashBoard(ns) {\\n\\n    ns.clearLog();\\n    let nodes = Array(ns.hacknet.numNodes()).fill(0);\\n    let maxNodes = ns.hacknet.numNodes() < 20 ? 20 : Infinity\\n    ns.print(`Nodes: ${nodes.length} of ${maxNodes}`);\\n    ns.print(`Total Production: ${nodes.length === 0 ? \\\"$0 /s\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).production).reduce((a, b) => a + b), MoneyFormat)} /s`)\\n    ns.print(`Total Produced: ${nodes.length === 0 ? \\\"$0\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).totalProduction).reduce((a, b) => a + b), MoneyFormat)}`)\\n    ns.print(table(\\n        [\\\"Node\\\", \\\"Produced\\\", \\\"Uptime\\\", \\\"Production\\\", \\\"Lv\\\", \\\"RAM\\\", \\\"Cores\\\",\\\"Cache\\\"],\\n        nodes.map((v, i) => ns.hacknet.getNodeStats(i).name),\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).totalProduction, MoneyFormat)),\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).timeOnline, TimeFormat)),\\n        nodes.map((v, i) => `${ns.nFormat(ns.hacknet.getNodeStats(i).production, MoneyFormat)} /s`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).level}`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).ram}`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).cores}`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).cache}`),      \\n    ));\\n}\\n\\nconst MaxReducer = (a, b) => a > b ? a : b;\\n\\n/**\\n * Create a Table display of the provided data\\n * @param {string[]} headers Column Headers\\n * @param  {...string[]} columns Column data\\n */\\nfunction table(headers, ...columns) {\\n    // Calculate Column Widths\\n    let widths = [];\\n    // for (let i = 0; i < columns.length; i++) {\\n    //     widths[i] = columns[i].concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\n    // }\\n    columns.forEach((c, i) => {\\n        widths[i] = c.concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\n    });\\n\\n    let output = \\\"\\\\n\\\";\\n\\n    // Write Headers\\n    headers.forEach((h, i) => {\\n        output += ` ${h.padEnd(widths[i], \\\" \\\")} |`;\\n    });\\n\\n    output += \\\"\\\\n\\\";\\n\\n    // Write Separator\\n    headers.forEach((h, i) => {\\n        output += `${\\\"\\\".padEnd(widths[i] + 2, \\\"=\\\")}|`;\\n    });\\n\\n    output += \\\"\\\\n\\\";\\n\\n    let rows = columns[0].length;\\n    for (let row = 0; row < rows; row++) {\\n        columns.forEach((c, i) => {\\n            if (c[row] == \\\"-\\\") {\\n                output += ` ${\\\"\\\".padEnd(widths[i], \\\"-\\\")} |`;\\n            } else {\\n                output += ` ${c[row].padEnd(widths[i], \\\" \\\")} |`;\\n            }\\n        });\\n\\n        output += \\\"\\\\n\\\";\\n    }\\n\\n    return output;\\n}\",\"filename\":\"hacknetNode.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hacknetNode.js\",\"url\":\"blob:file:///4a5d758d-7a18-410d-b0af-98a475648f38\",\"moduleSequenceNumber\":2267}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":2267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const getPortsNum = ns => {\\r\\n    const portBusters = [\\r\\n      'BruteSSH.exe',\\r\\n      'FTPCrack.exe',\\r\\n      'relaySMTP.exe',\\r\\n      'HTTPWorm.exe',\\r\\n      'SQLInject.exe',\\r\\n    ];\\r\\n    let ports = 0;\\r\\n    for (const buster of portBusters) {\\r\\n      if (ns.fileExists(buster)) {\\r\\n        ports++;\\r\\n      }\\r\\n    }\\r\\n    return ports;\\r\\n  };\\r\\n  \\r\\n  const getMoney = ns => {\\r\\n    return ns.getServerMoneyAvailable('home');\\r\\n  };\\r\\n  \\r\\n  function buyPrograms(ns) {\\r\\n    const portBusters = [\\r\\n      {\\r\\n        name: 'BruteSSH.exe',\\r\\n        cost: 500000,\\r\\n      },\\r\\n      {\\r\\n        name: 'FTPCrack.exe',\\r\\n        cost: 1500000,\\r\\n      },\\r\\n      {\\r\\n        name: 'relaySMTP.exe',\\r\\n        cost: 5000000,\\r\\n      },\\r\\n      {\\r\\n        name: 'HTTPWorm.exe',\\r\\n        cost: 30000000,\\r\\n      },\\r\\n      {\\r\\n        name: 'SQLInject.exe',\\r\\n        cost: 250000000,\\r\\n      },\\r\\n    ];\\r\\n    for (const buster of portBusters) {\\r\\n      const money = getMoney(ns);\\r\\n      if (!ns.fileExists(buster.name) && money > buster.cost) {\\r\\n        ns.purchaseProgram(buster.name);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  export async function main(ns) {\\r\\n    while (getMoney(ns) < 200000) {\\r\\n      // Waiting for money\\r\\n      await ns.sleep(100);\\r\\n    }\\r\\n    ns.purchaseTor();\\r\\n  \\r\\n    while (getPortsNum(ns) !== 5) {\\r\\n      buyPrograms(ns);\\r\\n      await ns.sleep(500);\\r\\n    }\\r\\n  }\",\"filename\":\"/src/buyPrograms.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":1523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tns.tail();\\r\\n\\tns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n\\tconst CorpApi = eval(\\\"ns.corporation\\\");\\r\\n\\tconst corpName = \\\"Limitless\\\";\\r\\n\\tconst argDivision = \\\"Agriculture\\\";\\r\\n\\tconst tobDivision = \\\"Tobacco\\\";\\r\\n\\tconst mainCity = \\\"Sector-12\\\";\\r\\n\\tconst hire3Employees = 3;\\r\\n\\tconst startUpJobs = [\\\"Operations\\\", \\\"Engineer\\\", \\\"Business\\\"]\\r\\n\\tconst citiesToExpandTo = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"]\\r\\n\\tvar agricultureProducts = [\\\"Food\\\", \\\"Plants\\\"]\\r\\n\\tvar firstWaveUpgradeNames = [\\\"FocusWires\\\", \\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\", \\\"Smart Factories\\\"]\\r\\n\\tvar firstWaveOffice = [\\\"Hardware\\\", \\\"AI Cores\\\", \\\"Real Estate\\\"]\\r\\n\\tvar firstWaveOfficeValues = [12.5, 7.5, 2700]\\r\\n\\tconst cities = [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"]\\r\\n\\tconst firstExpansionEmployeeJobs = [\\\"Operations\\\", \\\"Engineer\\\", \\\"Business\\\", \\\"Management\\\", \\\"Research & Development\\\", \\\"Training\\\"]\\r\\n\\tconst firstUpgrades = [\\\"Smart Factories\\\", \\\"Smart Storage\\\"]\\r\\n\\tconst officeUpgrades = [\\\"Robots\\\", \\\"Hardware\\\", \\\"AI Cores\\\", \\\"Real Estate\\\"]\\r\\n\\tvar currentProductDeveloping;\\r\\n\\tvar startTobVersions = 0;\\r\\n\\tconst hire6Employees = 6;\\r\\n\\tconst hire6EmployeesAmounts = [2, 2, 1, 2, 2, 0]\\r\\n\\tvar secondWaveOfficeValues = [9.6, 265.7, 244.5, 11940]\\r\\n\\tvar secondWaveOfficeValueGoals = [96, 2800, 2520, 146400]\\r\\n\\tvar thirdWaveOfficeValues = [63, 650, 375, 8400]\\r\\n\\tvar thirdWaveOfficeValueGoals = [726, 9300, 6270, 230400]\\r\\n\\tlet currentSector12PositionSize = 9;\\r\\n\\tconst levelUpgrades = [\\\"FocusWires\\\", \\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\"]\\r\\n\\r\\n\\r\\n\\t//start corp with Agriculture and self-funded\\r\\n\\tconst corp = CorpApi.createCorporation(corpName, false)\\r\\n\\tns.tprint(`Setting up: ${corpName} Corp`)\\r\\n\\tconst CorpInfo = CorpApi.getCorporation();\\r\\n\\r\\n\\tCorpApi.expandIndustry(argDivision, argDivision)\\r\\n\\tns.tprint(`Setting up: ${argDivision} Division`)\\r\\n\\tns.tprint(`Setting up city: ${mainCity}`)\\r\\n\\r\\n\\t//buy smart supply\\r\\n\\tns.print(`Setting up: Smart Supply and Setting value to true`)\\r\\n\\tCorpApi.unlockUpgrade(\\\"Smart Supply\\\");\\r\\n\\t//set smart supply in sector-12 to true and hire and set employees\\r\\n\\tCorpApi.setSmartSupply(argDivision, mainCity, true)\\r\\n\\r\\n\\tfor (let i = 0; i < hire3Employees; i++) {\\r\\n\\t\\tCorpApi.hireEmployee(argDivision, mainCity)\\r\\n\\t\\t//assign jobs\\r\\n\\t\\tawait CorpApi.setAutoJobAssignment(argDivision, mainCity, startUpJobs[i], hire3Employees / 3);\\r\\n\\t\\tns.print(`Setting up: Employee${hire3Employees / 3} to job ${startUpJobs[i]}`)\\r\\n\\t}\\r\\n\\t//set warehouse to auto sell materials \\r\\n\\tns.print(`Setting up: Warehouse to auto sell materials  `)\\r\\n\\r\\n\\tfor (let p = 0; p < 2; p++) {\\r\\n\\t\\tCorpApi.sellMaterial(argDivision, mainCity, agricultureProducts[p], \\\"MAX\\\", \\\"MP\\\")\\r\\n\\t}\\r\\n\\t//upgrade warehouse twice\\r\\n\\tns.print(`Setting up: Purchase Warehouse upgrade twice`)\\r\\n\\tfor (let w = 0; w < 2; w++) {\\r\\n\\t\\tCorpApi.upgradeWarehouse(argDivision, \\\"Sector-12\\\")\\r\\n\\t}\\r\\n\\t//buying mats for upgrade\\r\\n\\tfor (let x = 0; x < 3; x++) {\\r\\n\\t\\tawait CorpApi.buyMaterial(argDivision, mainCity, firstWaveOffice[x], firstWaveOfficeValues[x]);\\r\\n\\t\\tvar myData;\\r\\n\\t\\twhile (true) {\\r\\n\\t\\t\\tmyData = CorpApi.getMaterial(argDivision, mainCity, firstWaveOffice[x])\\r\\n\\t\\t\\tif (myData.qty > 0) {\\r\\n\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, mainCity, firstWaveOffice[x], 0);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tawait ns.sleep(1000);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tns.print(`Buying ${firstWaveOfficeValues[x]} of ${firstWaveOffice[x]} `)\\r\\n\\t}\\r\\n\\t//expand offices in all cities\\r\\n\\tfor (let c = 0; c < 5; c++) {\\r\\n\\t\\tCorpApi.expandCity(argDivision, citiesToExpandTo[c]);\\r\\n\\t\\tns.print(`Setting up new city: ${citiesToExpandTo[c]}`)\\r\\n\\r\\n\\t\\t//hire 3 employees for Operations, Engineer, and Business.\\t\\r\\n\\t\\tfor (let i = 0; i < hire3Employees; i++) {\\r\\n\\t\\t\\tns.print(`Setting up: Employee and job ${startUpJobs[i]} `)\\r\\n\\t\\t\\t//hire the 3 employees \\r\\n\\t\\t\\tCorpApi.hireEmployee(argDivision, citiesToExpandTo[c])\\r\\n\\t\\t\\t//set there jobs\\r\\n\\t\\t\\tawait CorpApi.setAutoJobAssignment(argDivision, citiesToExpandTo[c], startUpJobs[i], hire3Employees / 3);\\r\\n\\t\\t}\\r\\n\\t\\t//buy a warehouse\\r\\n\\t\\tns.print(`Setting up: warehouse `)\\r\\n\\t\\tawait CorpApi.purchaseWarehouse(argDivision, citiesToExpandTo[c])\\r\\n\\r\\n\\t\\t//expand twice\\r\\n\\t\\tns.print(`Setting up: warehouse expanded twice`)\\r\\n\\t\\tfor (let w = 0; w < 2; w++) {\\r\\n\\t\\t\\tCorpApi.upgradeWarehouse(argDivision, citiesToExpandTo[c])\\r\\n\\t\\t}\\r\\n\\t\\t//set product to sell at max mp\\r\\n\\t\\tns.print(`Setting up: product to sell at max mp `)\\r\\n\\t\\tfor (let p = 0; p < 2; p++) {\\r\\n\\t\\t\\tCorpApi.sellMaterial(argDivision, citiesToExpandTo[c], agricultureProducts[p], \\\"MAX\\\", \\\"MP\\\")\\r\\n\\t\\t}\\r\\n\\t\\t//buying mats for upgrade\\r\\n\\t\\tns.print(`Setting up: mats for upgrade `)\\r\\n\\r\\n\\t\\tfor (let x = 0; x < 3; x++) {\\r\\n\\t\\t\\tns.print(`Buying ${firstWaveOfficeValues[x]} of ${firstWaveOffice[x]} `)\\r\\n\\t\\t\\tawait CorpApi.buyMaterial(argDivision, citiesToExpandTo[c], firstWaveOffice[x], firstWaveOfficeValues[x]);\\r\\n\\t\\t\\tvar myData;\\r\\n\\t\\t\\twhile (true) {\\r\\n\\t\\t\\t\\tmyData = CorpApi.getMaterial(argDivision, citiesToExpandTo[c], firstWaveOffice[x])\\r\\n\\t\\t\\t\\tif (myData.qty > 0) {\\r\\n\\t\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, citiesToExpandTo[c], firstWaveOffice[x], 0);\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.print(`Bought ${firstWaveOffice[x]} `)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tns.print(\\\"Purchase a single AdVert\\\")\\r\\n\\t//purchase a single AdVert.\\r\\n\\tawait CorpApi.hireAdVert(argDivision);\\r\\n\\r\\n\\tfor (let u = 0; u < 5; u++) {\\r\\n\\t\\tCorpApi.levelUpgrade(firstWaveUpgradeNames[u]);\\r\\n\\t\\tCorpApi.levelUpgrade(firstWaveUpgradeNames[u]);\\r\\n\\t}\\r\\n\\r\\n\\tvar whileSwitch = true;\\r\\n\\twhile (whileSwitch) {\\r\\n\\t\\tns.print(\\\"\\\")\\r\\n\\t\\tvar offer = CorpApi.getInvestmentOffer();\\r\\n\\t\\tns.print(`Current offer is ${offer.funds}`)\\r\\n\\t\\twhile (offer.funds > 210000000000) {\\r\\n\\t\\t\\tCorpApi.acceptInvestmentOffer();\\r\\n\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\tns.tprint(`Accepted first Investment Offer of ${offer.funds}`)\\r\\n\\t\\t\\t//Main UpGrades\\r\\n\\t\\t\\tns.print(`Purchasing  upgrades for Smart Storage and Smart Factories`)\\r\\n\\t\\t\\tfor (let i = 0; i < 2; i++) {\\r\\n\\t\\t\\t\\tfor (let u = 0; u < 10; u++) {\\r\\n\\t\\t\\t\\t\\tCorpApi.levelUpgrade(firstUpgrades[i]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//Office Upgrades\\r\\n\\t\\t\\tfor (let c = 0; c < 6; c++) {\\r\\n\\t\\t\\t\\tns.print(`Currently Working in: ${cities[c]}`)\\r\\n\\t\\t\\t\\tns.print(`Upgrading office by 6 Employees`)\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(argDivision, cities[c], 6);\\r\\n\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t\\tns.print(`Setting up: New Employee and job ${firstExpansionEmployeeJobs[i]} in ${cities[c]}`)\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(argDivision, cities[c])\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(argDivision, cities[c], firstExpansionEmployeeJobs[i], hire6EmployeesAmounts[i]);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t//upgrade warehouse for each city 7 times\\r\\n\\t\\t\\t\\tns.print(`Setting up: Purchasing 7 Warehouse upgrades`)\\r\\n\\t\\t\\t\\tfor (let w = 0; w < 7; w++) {\\r\\n\\t\\t\\t\\t\\tCorpApi.upgradeWarehouse(argDivision, cities[c])\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor (let x = 0; x < 4; x++) {\\r\\n\\t\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, cities[c], officeUpgrades[x], secondWaveOfficeValues[x]);\\r\\n\\t\\t\\t\\t\\tvar myData;\\r\\n\\t\\t\\t\\t\\twhile (true) {\\r\\n\\t\\t\\t\\t\\t\\tmyData = CorpApi.getMaterial(argDivision, cities[c], officeUpgrades[x])\\r\\n\\t\\t\\t\\t\\t\\tif (myData.qty >= secondWaveOfficeValueGoals[x]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, cities[c], officeUpgrades[x], 0);\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\twhileSwitch = false;\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tawait ns.sleep(24000);\\r\\n\\t}\\r\\n\\twhileSwitch = true;\\r\\n\\tns.tprint(\\\"Starting Second round investing.\\\")\\r\\n\\r\\n\\twhile (whileSwitch) {\\r\\n\\t\\toffer = CorpApi.getInvestmentOffer();\\r\\n\\t\\tns.print(`Current offer is ${offer.funds}`)\\r\\n\\t\\twhile (offer.funds > 6000000000000) {\\r\\n\\t\\t\\tCorpApi.acceptInvestmentOffer();\\r\\n\\t\\t\\tCorpApi.expandIndustry(tobDivision, tobDivision);\\r\\n\\t\\t\\t//level wilson analytics 14 times\\r\\n\\t\\t\\tns.print(`Level wilson analytics 14 times`);\\r\\n\\t\\t\\tfor (let i = 0; i < 14; i++) {\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(\\\"Wilson Analytics\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.print(`Leveling some Upgrades`)\\r\\n\\t\\t\\tfor (let i = 0; i < 18; i++) {\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[0]);\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[1]);\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[2]);\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[3]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//Expand to Tobacco Division\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tns.print(`Hiring adVert 83 times.`)\\r\\n\\t\\t\\t\\t\\t\\tfor (let i = 0; i < 83; i++) {\\r\\n\\t\\t\\t\\t\\t\\t\\tCorpApi.hireAdVert(tobDivision);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t//set up first city given(sector-12)\\r\\n\\t\\t\\tns.print(`Setting up: ${tobDivision} Division`);\\r\\n\\t\\t\\tns.print(`Setting up city: ${mainCity}`);\\r\\n\\t\\t\\tfor (let i = 0; i < 3; i++) {\\r\\n\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//upgrade the office size to 9\\r\\n\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 6);\\r\\n\\r\\n\\t\\t\\t//hire 6 more employees\\r\\n\\t\\t\\tfor (let i = 0; i < hire6Employees; i++) {\\r\\n\\t\\t\\t\\t//hire the 6 employees\\r\\n\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor (let i = 0; i < hire6Employees; i++) {\\r\\n\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\tmainCity,\\r\\n\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\thire6EmployeesAmounts[i]\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//expand twice\\r\\n\\t\\t\\tns.print(`Setting up: warehouse in ${mainCity}and expanded twice`);\\r\\n\\t\\t\\tfor (let w = 0; w < 14; w++) {\\r\\n\\t\\t\\t\\tCorpApi.upgradeWarehouse(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tns.print(`Hiring 21 Employees to ${mainCity}`);\\r\\n\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 21);\\r\\n\\r\\n\\t\\t\\tfor (let i = 0; i < 21; i++) {\\r\\n\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.print(`Setting Jobs for new Employees for ${mainCity}`);\\r\\n\\r\\n\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t//set their jobs\\r\\n\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\tmainCity,\\r\\n\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\t6\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t//Expand Office into other cities\\r\\n\\t\\t\\tfor (let c = 0; c < 5; c++) {\\r\\n\\t\\t\\t\\tCorpApi.expandCity(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\tns.print(`Setting up new city: ${citiesToExpandTo[c]}`);\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t//upgrade the office size to 9\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, citiesToExpandTo[c], 6);\\r\\n\\t\\t\\t\\t//hire 3 employees for Operations, Engineer, and Business.\\r\\n\\t\\t\\t\\tns.print(`Hiring 9 Employees in ${citiesToExpandTo[c]} `);\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 9; i++) {\\r\\n\\t\\t\\t\\t\\t//hire the 3 employees\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tfor (let i = 0; i < hire6Employees; i++) {\\r\\n\\t\\t\\t\\t\\t//set there jobs\\r\\n\\t\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\t\\tcitiesToExpandTo[c],\\r\\n\\t\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\t\\thire6EmployeesAmounts[i]\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t//buy a warehouse\\r\\n\\t\\t\\t\\tns.print(`Setting up: warehouse in ${citiesToExpandTo[c]}`);\\r\\n\\t\\t\\t\\tawait CorpApi.purchaseWarehouse(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\t//expand twice\\r\\n\\t\\t\\t\\tns.print(`Setting up: warehouse expansion`);\\r\\n\\t\\t\\t\\tfor (let w = 0; w < 12; w++) {\\r\\n\\t\\t\\t\\t\\tCorpApi.upgradeWarehouse(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t\\t\\tns.run(\\\"toDaMoon.js\\\", 1)\\r\\n\\t\\t\\twhileSwitch = false;\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tawait ns.sleep(24000)\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/startCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":1524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tns.tail();\\r\\n\\tns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n\\tconst CorpApi = eval(\\\"ns.corporation\\\");\\r\\n\\tconst tobDivision = \\\"Tobacco\\\";\\r\\n\\tconst mainCity = \\\"Sector-12\\\";\\r\\n\\tconst firstExpansionEmployeeJobs = [\\\"Operations\\\", \\\"Engineer\\\", \\\"Business\\\", \\\"Management\\\", \\\"Research & Development\\\", \\\"Training\\\"]\\r\\n\\r\\n\\tvar corpInfo = CorpApi.getCorporation();\\r\\n\\r\\n\\r\\n\\tvar currentProductDeveloping;\\r\\n\\tvar startTobVersions = 0;\\r\\n\\r\\n\\r\\n\\tvar thirdWaveOfficeValues = [63, 650, 375, 8400]\\r\\n\\tvar thirdWaveOfficeValueGoals = [726, 9300, 6270, 230400]\\r\\n\\tlet currentSector12PositionSize = 9;\\r\\n\\tlet prodMulti = 6;\\r\\n\\tlet corpFunds = 0;\\r\\n\\tlet wilsonCost = 0;\\r\\n\\tlet adVertCost = 0;\\r\\n\\tlet sector12OfficeUpgrade = 0;\\r\\n\\r\\n\\r\\n\\twhile (true) {\\r\\n\\t\\tif (startTobVersions > 3) {\\r\\n\\t\\t\\tns.print(`Discontinuing Product Tobacco v${startTobVersions - 4}`)\\r\\n\\t\\t\\tCorpApi.discontinueProduct(tobDivision, `Tobacco v${startTobVersions - 2}`)\\r\\n\\t\\t}\\r\\n\\t\\tCorpApi.makeProduct(tobDivision, mainCity, `Tobacco v${startTobVersions}`, 10000000000, 10000000000);\\r\\n\\t\\tcurrentProductDeveloping = `Tobacco v${startTobVersions}`\\r\\n\\t\\tns.print(`Currently Creating: ${currentProductDeveloping}`)\\r\\n\\r\\n\\t\\twhile (CorpApi.getProduct(tobDivision, currentProductDeveloping).developmentProgress <= 100) {\\r\\n\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\tcorpInfo = CorpApi.getCorporation();\\r\\n\\t\\t\\tcorpFunds = corpInfo.funds;\\r\\n\\r\\n\\t\\t\\tprodMulti += prodMulti * .5;\\r\\n\\t\\t\\tcorpFunds -= 20000000000;\\r\\n\\t\\t\\twilsonCost = CorpApi.getUpgradeLevelCost(\\\"Wilson Analytics\\\")\\r\\n\\t\\t\\tadVertCost = CorpApi.getHireAdVertCost(tobDivision);\\r\\n\\t\\t\\tsector12OfficeUpgrade = CorpApi.getOfficeSizeUpgradeCost(tobDivision, mainCity, 15);\\r\\n\\t\\t\\tadVertCost = CorpApi.getHireAdVertCost(tobDivision);\\r\\n\\t\\t\\tsector12OfficeUpgrade = CorpApi.getOfficeSizeUpgradeCost(tobDivision, mainCity, 15);\\r\\n\\t\\t\\tif (corpFunds > wilsonCost) {\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(\\\"Wilson Analytics\\\");\\r\\n\\t\\t\\t\\tns.print(`Leveled Wilson Analytics`)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (corpFunds > adVertCost) {\\r\\n\\t\\t\\t\\tCorpApi.hireAdVert(tobDivision);\\r\\n\\t\\t\\t\\tCorpApi.hireAdVert(tobDivision);\\r\\n\\t\\t\\t\\tns.print(`Bought adVert`)\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (corpFunds > sector12OfficeUpgrade) {\\r\\n\\t\\t\\t\\tcurrentSector12PositionSize += 3;\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 15);\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 15);\\r\\n\\t\\t\\t\\tns.print(`Upgrading ${mainCity} with 15 new employees`)\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 15; i++) {\\r\\n\\t\\t\\t\\t\\t//hire the 3 employees\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t\\t//set their jobs\\r\\n\\t\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\t\\tmainCity,\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\t\\tcurrentSector12PositionSize\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tstartTobVersions++;\\r\\n\\t\\tCorpApi.sellProduct(tobDivision, mainCity, currentProductDeveloping, \\\"Max\\\", `MP * ${prodMulti}`, true);\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/toDaMoon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":1525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.tail();\\r\\n    ns.clearLog();\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    //automatically purchase \\r\\n    //check: Level, Ram, Cores, and Cache Level\\r\\n    //the cheapest option buy\\r\\n    //check hashes and sell when hashes reach 95% of max available\\r\\n    const hacknetNodeFormulas = ns.formulas.hacknetNodes;\\r\\n    const hackNet = ns.hacknet;\\r\\n\\r\\n\\r\\n    while (true) {\\r\\n        var moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        var purchaseServerCost = hackNet.getPurchaseNodeCost();\\r\\n\\r\\n        if (moneyAvailable > purchaseServerCost) {\\r\\n            hackNet.purchaseNode();\\r\\n        }\\r\\n        var numHackNetServers = hackNet.numNodes();\\r\\n\\r\\n        for (let i = 0; i < numHackNetServers; i++) {\\r\\n\\r\\n            var cacheUpgradeCost = hackNet.getCacheUpgradeCost(i, 1);\\r\\n            var coreUpgradeCost = hackNet.getCoreUpgradeCost(i, 1);\\r\\n            var ramUpgradeCost = hackNet.getRamUpgradeCost(i, 1);\\r\\n            var levelUpgrade = hackNet.getLevelUpgradeCost(i, 1);\\r\\n\\r\\n            if (moneyAvailable > cacheUpgradeCost) {\\r\\n                hackNet.upgradeCache(i,1);\\r\\n            }\\r\\n            else if(moneyAvailable > coreUpgradeCost){\\r\\n                hackNet.upgradeCore(i, 1);\\r\\n            }\\r\\n            else if( moneyAvailable > ramUpgradeCost){\\r\\n                hackNet.ramUpgradeCost(i, 1);\\r\\n            }\\r\\n            else if(moneyAvailable > levelUpgrade){\\r\\n                hack.ramUpgradeCost(i,1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/src/epicHacknetServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/src/epicHacknetServers.js\",\"url\":\"blob:file:///b54b1a2b-2a21-4230-a382-d1e1c693d190\",\"moduleSequenceNumber\":90497}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":1526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tns.tail();\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tconst hackNet = ns.hacknet;\\n\\tconst buyMoneyHashAmount = 4;\\n\\tvar numHackNetServers = hackNet.numNodes();\\n\\tvar totalProduction = 0;\\n\\tvar sleepTime = 0;\\n\\twhile (true) {\\n\\t\\tsleepTime=0;\\n\\t\\tvar numHashes = hackNet.numHashes();\\n\\t\\tfor (let i = 0; i < numHackNetServers; i++) {\\n\\t\\t\\tvar getNodeStats = hackNet.getNodeStats(i);\\n\\t\\t\\ttotalProduction+=getNodeStats.production;\\n\\t\\t\\tsleepTime = Math.round((4/totalProduction)*1000);\\n\\t\\t\\tif(numHashes > buyMoneyHashAmount){\\n\\t\\t\\t\\thackNet.spendHashes(\\\"Sell for Money\\\",getNodeStats.name);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttotalProduction = 0;\\n\\t\\tawait ns.sleep(sleepTime);\\n\\t}\\n}\",\"filename\":\"spendHashOnCash.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"spendHashOnCash.js\",\"url\":\"blob:file:///28073c24-59ff-4999-a678-5d5f4bd89df7\",\"moduleSequenceNumber\":2268}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":2268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog(\\\"sleep\\\")\\n\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"strength\\\", false)\\n\\tns.print(\\\"Training Strength\\\")\\n\\twhile (ns.getPlayer().strength < 15000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"defense\\\", false)\\n\\tns.print(\\\"Training Defense\\\")\\n\\n\\twhile (ns.getPlayer().defense < 15000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"dexterity\\\", false)\\n\\tns.print(\\\"Training Dexterity\\\")\\n\\n\\twhile (ns.getPlayer().dexterity < 5000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"agility\\\", false)\\n\\tns.print(\\\"Training Agility\\\")\\n\\n\\twhile (ns.getPlayer().agility < 5000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\t\\n}\",\"filename\":\"bladeMidGame.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"bladeMidGame.js\",\"url\":\"blob:file:///6c134609-e3bb-4272-b673-10afa9a84978\",\"moduleSequenceNumber\":1529}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":1529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\",\"hacknet-node-1\",\"hacknet-node-2\",\"darkweb\",\"hacknet-node-3\",\"hacknet-node-4\",\"hacknet-node-5\",\"hacknet-node-6\",\"hacknet-node-7\",\"hacknet-node-8\",\"hacknet-node-9\",\"hacknet-node-10\",\"hacknet-node-11\",\"hacknet-node-12\",\"hacknet-node-13\",\"hacknet-node-14\",\"hacknet-node-15\",\"hacknet-node-16\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"reserve.txt\",\"text\":\"100000000\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"46.0.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":2470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":2472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":2474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":3142298239.3,\"moneyMax\":7855745598.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1240,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"12.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":2680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":2682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":2684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":4349349843.400001,\"moneyMax\":10873374608.500002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1144,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"46.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":2464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":2466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":2468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":210,\"hackDifficulty\":210,\"minDifficulty\":70,\"moneyAvailable\":1932536494.7,\"moneyMax\":4831341236.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":933,\"serverGrowth\":67}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"80.5.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":2662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":2664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///b114e55a-2019-4614-97d8-9526b37bab0a\",\"moduleSequenceNumber\":2797}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":2797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":242.5,\"hackDifficulty\":242.5,\"minDifficulty\":81,\"moneyAvailable\":1547567448.7,\"moneyMax\":3868918621.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1130,\"serverGrowth\":63}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"23.2.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":2488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":2490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":2492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":3078360653.6000004,\"moneyMax\":7695901634.000002,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1158,\"serverGrowth\":90}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"97.7.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":2674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":2676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":2678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":2047445006.2,\"moneyMax\":5118612515.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1180,\"serverGrowth\":49}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"46.7.6.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":2650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":2652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///f72dca35-2974-4b10-9b2e-7847481898ce\",\"moduleSequenceNumber\":2783}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":2783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":235,\"hackDifficulty\":235,\"minDifficulty\":78,\"moneyAvailable\":1844500491.8000002,\"moneyMax\":4611251229.500001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":966,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"64.7.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":2656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":2658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":2660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":185,\"hackDifficulty\":185,\"minDifficulty\":62,\"moneyAvailable\":1940664427.2,\"moneyMax\":4851661068,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":929,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"63.4.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":2458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":2460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":2462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":245,\"hackDifficulty\":245,\"minDifficulty\":82,\"moneyAvailable\":2571074033.4,\"moneyMax\":6427685083.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":995,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"44.0.2.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":2446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///059bf197-e128-4173-b7bb-eec338c15aec\",\"moduleSequenceNumber\":2781}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":2781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///38f1b73b-9373-4e1f-8818-9406ee35686a\",\"moduleSequenceNumber\":2782}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":2782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":242.5,\"hackDifficulty\":242.5,\"minDifficulty\":81,\"moneyAvailable\":144327208.5,\"moneyMax\":360818021.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1186,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"2.0.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":2668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":2670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":2672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":247.5,\"hackDifficulty\":247.5,\"minDifficulty\":83,\"moneyAvailable\":100000,\"moneyMax\":250000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1471,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"58.5.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":2698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":2700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":2702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":109029533.5,\"moneyMax\":272573833.75,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1032,\"serverGrowth\":70}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"47.7.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":2614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":2616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":2618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":217.5,\"hackDifficulty\":217.5,\"minDifficulty\":73,\"moneyAvailable\":87317248.80000001,\"moneyMax\":218293122.00000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":47}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"86.6.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":2632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":2634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":2636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":68930665.4,\"moneyMax\":172326663.50000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":58}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"54.8.6.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":2452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":2454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///6af6e3b9-2d2c-41f5-a777-16eee2e3e27e\",\"moduleSequenceNumber\":2787}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":2787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":227.5,\"hackDifficulty\":227.5,\"minDifficulty\":76,\"moneyAvailable\":63739298.2,\"moneyMax\":159348245.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-627692.cct\",\"type\":\"Total Ways to Sum\",\"data\":91,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"23.2.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":2644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///5c80eec7-c70b-4623-9d7a-212799ecbdc0\",\"moduleSequenceNumber\":2821}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":2821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":2648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":210,\"hackDifficulty\":210,\"minDifficulty\":70,\"moneyAvailable\":76403296,\"moneyMax\":191008240,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":78}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"85.3.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":2422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":2424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":2426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237.5,\"hackDifficulty\":237.5,\"minDifficulty\":79,\"moneyAvailable\":97354828.2,\"moneyMax\":243387070.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":86}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"58.9.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///6b01c111-b3b3-429c-9363-efbc7b3c84ee\",\"moduleSequenceNumber\":2796}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":2796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":215,\"hackDifficulty\":215,\"minDifficulty\":72,\"moneyAvailable\":111144831.30000001,\"moneyMax\":277862078.25000006,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":835,\"serverGrowth\":83}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"59.7.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":2434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":2436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///07d1b82b-33bd-42ef-878e-fb662dd6c3bd\",\"moduleSequenceNumber\":2786}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":2786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":197.5,\"hackDifficulty\":197.5,\"minDifficulty\":66,\"moneyAvailable\":76071549.8,\"moneyMax\":190178874.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":76}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"55.7.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":2638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///e96555c6-a981-4bde-b46d-f1d5501c0edb\",\"moduleSequenceNumber\":2820}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":2820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":2642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":61428352.1,\"moneyMax\":153570880.25,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":825,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"79.7.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":2500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":2502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":2504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":89642861.2,\"moneyMax\":224107153,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":933,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"26.6.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":2590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":2592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":2594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":145,\"hackDifficulty\":145,\"minDifficulty\":48,\"moneyAvailable\":83803032,\"moneyMax\":209507580,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":80}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"91.5.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":2404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":2406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":2408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":210,\"hackDifficulty\":210,\"minDifficulty\":70,\"moneyAvailable\":107712625.30000001,\"moneyMax\":269281563.25000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"59.4.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":2608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///7ef6c726-c09a-4178-b1a6-1e5457cc0204\",\"moduleSequenceNumber\":2806}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":2806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":2612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":237.5,\"hackDifficulty\":237.5,\"minDifficulty\":79,\"moneyAvailable\":95793358,\"moneyMax\":239483395,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":935,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"30.2.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":2428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":2430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":2432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":147.5,\"hackDifficulty\":147.5,\"minDifficulty\":49,\"moneyAvailable\":92390019.4,\"moneyMax\":230975048.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":790,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-653891.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[81,182,94,90,116,22,136,151,43,200],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"91.5.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":2692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":2694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":2696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":180,\"hackDifficulty\":180,\"minDifficulty\":60,\"moneyAvailable\":84993349.9,\"moneyMax\":212483374.75000003,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":778,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"72.2.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":2494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///b5db1ee9-3df3-4e22-8c3a-2ab6a96d6670\",\"moduleSequenceNumber\":2814}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":2814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":2498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":187.5,\"hackDifficulty\":187.5,\"minDifficulty\":63,\"moneyAvailable\":79776699.9,\"moneyMax\":199441749.75000003,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":776,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-728195.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[5,22,31,30,37],[46,46,37,14,38],[18,25,18,1,18],[36,42,15,31,30],[19,13,9,6,18],[32,38,5,38,35],[32,49,44,37,31],[9,29,6,7,19]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"96.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":2710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":2712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":2714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":200,\"hackDifficulty\":200,\"minDifficulty\":67,\"moneyAvailable\":158895456.8,\"moneyMax\":397238642.00000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":51}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"59.9.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///084d658a-10a6-4e0f-a0fe-90851c63f7ec\",\"moduleSequenceNumber\":2824}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":2414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":207.5,\"hackDifficulty\":207.5,\"minDifficulty\":69,\"moneyAvailable\":153049706.8,\"moneyMax\":382624267.00000006,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":87}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"21.4.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":2704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":2706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":2708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":172.5,\"hackDifficulty\":172.5,\"minDifficulty\":58,\"moneyAvailable\":115274532.80000001,\"moneyMax\":288186332.00000006,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"40.3.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":2626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":2628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":2630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":133287328.60000001,\"moneyMax\":333218321.5,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":821,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"50.7.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":2416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///6a6a73bd-bab4-49dd-a82c-bb35f249f487\",\"moduleSequenceNumber\":2802}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":2802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":2420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":103937478.7,\"moneyMax\":259843696.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":70}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"19.4.4.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///7de0e218-d23c-41a6-a5d8-ab36f7d4ede0\",\"moduleSequenceNumber\":2785}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":2785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":192.5,\"hackDifficulty\":192.5,\"minDifficulty\":64,\"moneyAvailable\":79782123.5,\"moneyMax\":199455308.75,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":696,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"47.1.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///b8e647e2-3b30-43c6-9458-dbe219c8e3b3\",\"moduleSequenceNumber\":2817}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":2564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":102.5,\"hackDifficulty\":102.5,\"minDifficulty\":34,\"moneyAvailable\":52280297.6,\"moneyMax\":130700744,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":477,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"76.4.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///dae4d5ce-4bba-434a-97f8-5f1388167456\",\"moduleSequenceNumber\":2799}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///7d8a9ee2-37bb-4774-aee7-74e77d749889\",\"moduleSequenceNumber\":2798}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":2798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":155,\"hackDifficulty\":155,\"minDifficulty\":52,\"moneyAvailable\":61393303.900000006,\"moneyMax\":153483259.75000003,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":543,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"94.8.8.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///a2f98846-40b7-468d-8a6b-cdeba26e535c\",\"moduleSequenceNumber\":2795}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":2795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182.5,\"hackDifficulty\":182.5,\"minDifficulty\":61,\"moneyAvailable\":25254442.6,\"moneyMax\":63136106.5,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":418,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"60.7.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///f3cb7db4-b1ff-48b0-8a73-0f738168d782\",\"moduleSequenceNumber\":2794}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":2794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":115,\"hackDifficulty\":115,\"minDifficulty\":38,\"moneyAvailable\":20608740.8,\"moneyMax\":51521852,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":391,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"79.7.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":2554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":2556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///817eeb21-0d27-4d10-8bd6-50f3b3ae24f3\",\"moduleSequenceNumber\":2793}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":2793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":190,\"hackDifficulty\":190,\"minDifficulty\":63,\"moneyAvailable\":101564208.30000001,\"moneyMax\":253910520.75000006,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":747,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"94.9.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///6618a5be-18fe-482c-9868-c4fe5cc51d2e\",\"moduleSequenceNumber\":2818}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":2582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":137.5,\"hackDifficulty\":137.5,\"minDifficulty\":46,\"moneyAvailable\":34020769.2,\"moneyMax\":85051923.00000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":432,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"58.5.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":2350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":2352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":2354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":162.5,\"hackDifficulty\":162.5,\"minDifficulty\":54,\"moneyAvailable\":59870153.7,\"moneyMax\":149675384.25,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":637,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"45.0.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":2392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":2394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///1b6dbf8d-6fe9-4f74-bab7-6c2150e143fe\",\"moduleSequenceNumber\":2784}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":2784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"computek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":165,\"hackDifficulty\":165,\"minDifficulty\":55,\"moneyAvailable\":34565952.7,\"moneyMax\":86414881.75000001,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":409,\"serverGrowth\":40}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"16.6.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":2530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":2532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///2d4beda1-6e9a-4230-9b29-c6285b9244ae\",\"moduleSequenceNumber\":2791}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":2791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87.5,\"hackDifficulty\":87.5,\"minDifficulty\":29,\"moneyAvailable\":18595135.5,\"moneyMax\":46487838.75,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":278,\"serverGrowth\":55}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"33.5.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"computek\",\"moduleSequenceNumber\":2386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":2388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"computek\",\"moduleSequenceNumber\":2390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":137.5,\"hackDifficulty\":137.5,\"minDifficulty\":46,\"moneyAvailable\":24808764.8,\"moneyMax\":62021912,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":317,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"11.1.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":2542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":2544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///63a1876e-d5df-462c-a7d1-91b6fc338c32\",\"moduleSequenceNumber\":2792}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":2792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":182.5,\"hackDifficulty\":182.5,\"minDifficulty\":61,\"moneyAvailable\":27500000,\"moneyMax\":68750000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":400,\"serverGrowth\":59}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"52.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":2548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":2550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":2552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":127.5,\"hackDifficulty\":127.5,\"minDifficulty\":43,\"moneyAvailable\":8346597.5,\"moneyMax\":20866493.75,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":280,\"serverGrowth\":60}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"26.1.8.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":2320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///3c824e13-ca7c-4e8b-b4a1-e313a03b13a4\",\"moduleSequenceNumber\":2825}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":2825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":2324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":2.5,\"hackDifficulty\":2.5,\"minDifficulty\":1,\"moneyAvailable\":7000,\"moneyMax\":17500,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"20.8.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///c025a885-c647-4c61-8073-ab83f445f568\",\"moduleSequenceNumber\":2808}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.240499999999999,\"minDifficulty\":8,\"moneyAvailable\":500000,\"moneyMax\":500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"37.0.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///e11df225-9d17-4020-a929-0db792f14b48\",\"moduleSequenceNumber\":2810}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.212,\"minDifficulty\":8,\"moneyAvailable\":231666,\"moneyMax\":575000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"91.7.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":2368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///358c43c4-815e-478b-be65-6449860d34b8\",\"moduleSequenceNumber\":2811}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":2811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":2372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":13.704,\"minDifficulty\":13,\"moneyAvailable\":313672,\"moneyMax\":625000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"9.2.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":2362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///842c3c6f-9d57-407e-b7a6-15163b7ce5b7\",\"moduleSequenceNumber\":2801}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":2801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":2366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":750000,\"moneyMax\":1875000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"53.8.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":2374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///bd7b8057-6e32-41fc-9204-5e479e0e10a2\",\"moduleSequenceNumber\":2812}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":2812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":2378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":687500,\"moneyMax\":687500,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"2.8.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":2524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///3d803f3e-9774-4dc2-b0a9-ee5e159da1db\",\"moduleSequenceNumber\":2804}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":2804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":2528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62.5,\"hackDifficulty\":62.5,\"minDifficulty\":21,\"moneyAvailable\":500000,\"moneyMax\":1250000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"49.1.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///3056fc4d-fe91-4fb9-be64-d045a49d3c8e\",\"moduleSequenceNumber\":2789}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":2789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":11250000,\"moneyMax\":11250000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"16.4.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":2506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///6d024684-fd77-4d7b-a153-ff29f3f7a0c7\",\"moduleSequenceNumber\":2815}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":2815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":2510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":14.972000000000001,\"minDifficulty\":13,\"moneyAvailable\":749909.1614332971,\"moneyMax\":750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"32.0.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":2512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///ca5e707f-f5f1-4236-8221-bd5c600c5db6\",\"moduleSequenceNumber\":2816}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":2816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":2516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":38.484,\"minDifficulty\":13,\"moneyAvailable\":997001.1808675703,\"moneyMax\":1000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"13.7.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":2536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///1966aba3-5f1e-4fe9-b8e1-26f33f497ac7\",\"moduleSequenceNumber\":2805}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":2540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":6000000,\"moneyMax\":6000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"67.5.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///1f7e3d34-9264-4438-80bc-4e674298eaa0\",\"moduleSequenceNumber\":2803}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":2522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":2500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"71.4.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":2338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///6a2395ed-9987-49b0-b4fd-ecfd7acfbcbe\",\"moduleSequenceNumber\":2800}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":2800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":2342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77.5,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":15566446.5,\"moneyMax\":15566446.5,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":205,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"0.1.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":2566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":2568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":2570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97.5,\"hackDifficulty\":75.7625,\"minDifficulty\":33,\"moneyAvailable\":4568541.100000001,\"moneyMax\":11421352.750000002,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":264,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"34.3.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":2728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///7635d192-8374-4229-898b-55e06c254582\",\"moduleSequenceNumber\":2807}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":2807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":2732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":5000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"47.5.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///305e58c1-42ba-4419-909d-d5bc4656e5b4\",\"moduleSequenceNumber\":2819}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":2600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"minDifficulty\":38,\"moneyAvailable\":25000000,\"moneyMax\":62500000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":492,\"serverGrowth\":32}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"44.9.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":2476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":2478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///42ab9bed-2471-4d2b-8b74-c4bea16acd56\",\"moduleSequenceNumber\":2790}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":2790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":140,\"hackDifficulty\":140,\"minDifficulty\":47,\"moneyAvailable\":90000000,\"moneyMax\":225000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1089,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"55.9.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":2602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":2604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":2606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":120,\"hackDifficulty\":120,\"minDifficulty\":40,\"moneyAvailable\":45000000,\"moneyMax\":112500000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":741,\"serverGrowth\":41}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"78.6.1.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":2440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///02b5b334-1c1d-45f8-9876-eed029d04084\",\"moduleSequenceNumber\":2780}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":2780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":2444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":510,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"90.6.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":2716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///b8887e10-fedd-4d22-9602-e6ab025b9ae4\",\"moduleSequenceNumber\":2822}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":2822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":2720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":344,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"39.9.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///a9881d7f-8ab8-467c-b8c1-9f3a98c9db30\",\"moduleSequenceNumber\":2809}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":2348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"92.7.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":2482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///f8a5b897-47cb-4f22-b296-4c80524304a4\",\"moduleSequenceNumber\":2813}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":2813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":2486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":524,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"13.8.9.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":2332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///fa50487f-e0e6-4bef-80ea-305ab235d9be\",\"moduleSequenceNumber\":2823}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":2823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":2336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"62.3.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":2686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":2688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":2690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"72.0.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"43.6.7.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/h1.js\",\"url\":\"blob:file:///45b32db6-2e48-468e-ad0b-181b81ee3af9\",\"moduleSequenceNumber\":2833}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":2833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///1ffe2b84-5bf1-449b-a514-3b6e4a4960b6\",\"moduleSequenceNumber\":2763}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":2763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///e41cb025-b52d-43f9-bc0d-c626ebb284b1\",\"moduleSequenceNumber\":2764}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-0\",\"moduleSequenceNumber\":2764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9552.599999999005,\"totalHashesGenerated\":106871.27766890673}},\"hacknet-node-1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"3.1.3.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":2740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///5091708f-1ad9-409e-bd35-f983cc0c2551\",\"moduleSequenceNumber\":2779}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":2779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///94633a39-d698-43aa-92bb-75184cb8bcfb\",\"moduleSequenceNumber\":2778}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-1\",\"moduleSequenceNumber\":2778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9529.799999998922,\"totalHashesGenerated\":99876.61276066645}},\"hacknet-node-2\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-2\",\"httpPortOpen\":false,\"ip\":\"27.5.7.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":2746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:file:///0837e9c5-e350-44bb-a470-5a2c3ce2f11e\",\"moduleSequenceNumber\":2826}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":2826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:file:///02c95500-4518-45cb-a3e1-848103795703\",\"moduleSequenceNumber\":2788}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-2\",\"moduleSequenceNumber\":2788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9512.79999999886,\"totalHashesGenerated\":99132.35002415914}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"39.4.0.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":2752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":2754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":2756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"hacknet-node-3\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-3\",\"httpPortOpen\":false,\"ip\":\"73.9.7.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":2828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":2830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hacknet-node-3\",\"moduleSequenceNumber\":2832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9497.599999998805,\"totalHashesGenerated\":99628.6674921237}},\"hacknet-node-4\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-4\",\"httpPortOpen\":false,\"ip\":\"65.9.8.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9482.59999999875,\"totalHashesGenerated\":99503.38046251777}},\"hacknet-node-5\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-5\",\"httpPortOpen\":false,\"ip\":\"61.7.5.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9467.199999998695,\"totalHashesGenerated\":99381.13804862647}},\"hacknet-node-6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-6\",\"httpPortOpen\":false,\"ip\":\"8.0.8.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9451.599999998638,\"totalHashesGenerated\":99238.81548103389}},\"hacknet-node-7\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-7\",\"httpPortOpen\":false,\"ip\":\"26.1.6.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9435.999999998581,\"totalHashesGenerated\":99111.06803053373}},\"hacknet-node-8\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-8\",\"httpPortOpen\":false,\"ip\":\"53.6.9.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9420.199999998524,\"totalHashesGenerated\":98937.28208263093}},\"hacknet-node-9\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-9\",\"httpPortOpen\":false,\"ip\":\"12.8.8.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9404.399999998466,\"totalHashesGenerated\":98797.0598589648}},\"hacknet-node-10\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-10\",\"httpPortOpen\":false,\"ip\":\"83.0.5.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9388.99999999841,\"totalHashesGenerated\":98644.42087733666}},\"hacknet-node-11\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-11\",\"httpPortOpen\":false,\"ip\":\"36.2.8.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9338.999999998228,\"totalHashesGenerated\":98326.96974266048}},\"hacknet-node-12\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-12\",\"httpPortOpen\":false,\"ip\":\"24.4.2.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":9050.79999999718,\"totalHashesGenerated\":96730.31394165952}},\"hacknet-node-13\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-13\",\"httpPortOpen\":false,\"ip\":\"34.3.2.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":8749.199999996083,\"totalHashesGenerated\":94536.95106629784}},\"hacknet-node-14\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-14\",\"httpPortOpen\":false,\"ip\":\"69.1.4.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":8033.599999995055,\"totalHashesGenerated\":88490.03652531187}},\"hacknet-node-15\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-15\",\"httpPortOpen\":false,\"ip\":\"21.6.3.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":6025.999999996881,\"totalHashesGenerated\":68858.42362423608}},\"hacknet-node-16\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":37,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-16\",\"httpPortOpen\":false,\"ip\":\"25.8.9.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":15,\"cores\":37,\"hashCapacity\":1048576,\"hashRate\":12.229884861859526,\"level\":171,\"onlineTimeSeconds\":1096.6000000000695,\"totalHashesGenerated\":12700.808536122264}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.044,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":512.011,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":34795167289.755325}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":60.6069,\"isBanned\":false,\"isMember\":true,\"name\":\"Bladeburners\",\"playerReputation\":63023.25812596456}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy ServerProfiler.exe; buy DeepscanV1.exe; buy DeepscanV2.exe; buy AutoLink.exe; buy Formulas.exe\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":17645.993852348653,\"lastPrice\":17577.123542666566,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.44,\"b\":false,\"otlkMag\":20.057785881757624,\"otlkMagForecast\":29.71795269137693,\"cap\":367488869,\"spreadPerc\":0.5,\"shareTxForMovement\":84956,\"shareTxUntilMovement\":84956,\"totalShares\":139100000,\"maxShares\":27800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":48569.3908911376,\"lastPrice\":48362.67061978537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":true,\"otlkMag\":17.45258016019701,\"otlkMagForecast\":69.46910779565984,\"cap\":46471089,\"spreadPerc\":0.2,\"shareTxForMovement\":76028,\"shareTxUntilMovement\":76028,\"totalShares\":97600000,\"maxShares\":19500000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":20700.663050908068,\"lastPrice\":20840.760233880108,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":13.781475979469008,\"otlkMagForecast\":64.91734420197001,\"cap\":540489287,\"spreadPerc\":0.4,\"shareTxForMovement\":67793,\"shareTxUntilMovement\":67793,\"totalShares\":69500000,\"maxShares\":13900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":25016.46355463882,\"lastPrice\":24870.294172256356,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":11.679865733971116,\"otlkMagForecast\":62.37664639345808,\"cap\":413554023,\"spreadPerc\":0.1,\"shareTxForMovement\":88560,\"shareTxUntilMovement\":88560,\"totalShares\":64000000,\"maxShares\":12800000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":20678.735488891554,\"lastPrice\":20552.452660191128,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":13.027806046791644,\"otlkMagForecast\":35.052394569376276,\"cap\":655562207,\"spreadPerc\":0.5,\"shareTxForMovement\":30932,\"shareTxUntilMovement\":30932,\"totalShares\":47100000,\"maxShares\":9400000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":45862.30567912361,\"lastPrice\":46299.295395058005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.07,\"b\":false,\"otlkMag\":16.99754802776397,\"otlkMagForecast\":33.157142505569134,\"cap\":952613272,\"spreadPerc\":0.2,\"shareTxForMovement\":73537,\"shareTxUntilMovement\":73537,\"totalShares\":31900000,\"maxShares\":6400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":23150.898605136816,\"lastPrice\":23322.00943571594,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":10.272248539589096,\"otlkMagForecast\":59.42091360990201,\"cap\":191451300,\"spreadPerc\":0.3,\"shareTxForMovement\":46404,\"shareTxUntilMovement\":46404,\"totalShares\":98500000,\"maxShares\":19700000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":8311.352949120374,\"lastPrice\":8216.238186734221,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":14.886034134643722,\"otlkMagForecast\":63.11184736395874,\"cap\":423051637,\"spreadPerc\":0.7,\"shareTxForMovement\":71433,\"shareTxUntilMovement\":71433,\"totalShares\":57200000,\"maxShares\":11400000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":16159.246354964509,\"lastPrice\":16030.768462149208,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":11.22007463742556,\"otlkMagForecast\":57.57044430597326,\"cap\":57848296,\"spreadPerc\":0.3,\"shareTxForMovement\":54677,\"shareTxUntilMovement\":54677,\"totalShares\":59500000,\"maxShares\":11900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":7517.7129792142305,\"lastPrice\":7475.111058720766,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":8.820978507320017,\"otlkMagForecast\":59.58935813174396,\"cap\":208181603,\"spreadPerc\":1,\"shareTxForMovement\":79982,\"shareTxUntilMovement\":79982,\"totalShares\":104300000,\"maxShares\":20900000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":14386.702184749802,\"lastPrice\":14306.441340795645,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":7.17694675209871,\"otlkMagForecast\":58.538232834645875,\"cap\":52094208,\"spreadPerc\":0.6,\"shareTxForMovement\":96244,\"shareTxUntilMovement\":96244,\"totalShares\":63400000,\"maxShares\":12700000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":17210.225189010453,\"lastPrice\":17319.037104559742,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.748633032974081,\"otlkMagForecast\":57.331704414713215,\"cap\":59582360,\"spreadPerc\":0.7,\"shareTxForMovement\":90876,\"shareTxUntilMovement\":90876,\"totalShares\":89500000,\"maxShares\":17900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":10617.782474585321,\"lastPrice\":10674.51297680368,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":7.546208176284981,\"otlkMagForecast\":42.705717138718015,\"cap\":370860567,\"spreadPerc\":0.6,\"shareTxForMovement\":69698,\"shareTxUntilMovement\":69698,\"totalShares\":52800000,\"maxShares\":10600000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":22336.326017462037,\"lastPrice\":22237.314913054175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":10.240050229533557,\"otlkMagForecast\":39.45812027172212,\"cap\":27219726,\"spreadPerc\":0.9,\"shareTxForMovement\":51455,\"shareTxUntilMovement\":51455,\"totalShares\":35700000,\"maxShares\":7100000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11531.445611911413,\"lastPrice\":11592.030920007468,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":6.53919263363196,\"otlkMagForecast\":44.51286870262927,\"cap\":322643784,\"spreadPerc\":0.8,\"shareTxForMovement\":81468,\"shareTxUntilMovement\":81468,\"totalShares\":47000000,\"maxShares\":9400000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":14678.335900433787,\"lastPrice\":14593.863431341471,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":6.398281449748124,\"otlkMagForecast\":55.03123472262437,\"cap\":68343994,\"spreadPerc\":0.6,\"shareTxForMovement\":105047,\"shareTxUntilMovement\":105047,\"totalShares\":46000000,\"maxShares\":9200000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":8539.071602789234,\"lastPrice\":8599.143216787541,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":7.498976775989163,\"otlkMagForecast\":41.9148108904481,\"cap\":72666680,\"spreadPerc\":0.7,\"shareTxForMovement\":114018,\"shareTxUntilMovement\":114018,\"totalShares\":47200000,\"maxShares\":9400000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":20914.09194706785,\"lastPrice\":20812.15974784397,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":9.745424440280077,\"otlkMagForecast\":39.63306147703486,\"cap\":61986406,\"spreadPerc\":0.6,\"shareTxForMovement\":92683,\"shareTxUntilMovement\":92683,\"totalShares\":34200000,\"maxShares\":6800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":24540.838258599215,\"lastPrice\":24369.401671732347,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":5.843704531182003,\"otlkMagForecast\":55.755225538241866,\"cap\":467306087,\"spreadPerc\":1.1,\"shareTxForMovement\":71879,\"shareTxUntilMovement\":71879,\"totalShares\":27000000,\"maxShares\":5400000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":2485.911188591346,\"lastPrice\":2430.9270782997737,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.54,\"b\":false,\"otlkMag\":6.445714127904058,\"otlkMagForecast\":40.05983636016938,\"cap\":70276097,\"spreadPerc\":0.7,\"shareTxForMovement\":14422,\"shareTxUntilMovement\":14422,\"totalShares\":92400000,\"maxShares\":18500000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":3911.2177735020787,\"lastPrice\":3868.501242163617,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":6.450368951050204,\"otlkMagForecast\":54.95967606688062,\"cap\":20628836,\"spreadPerc\":0.8,\"shareTxForMovement\":92499,\"shareTxUntilMovement\":92499,\"totalShares\":61600000,\"maxShares\":12300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6468.036742992267,\"lastPrice\":6499.715397099387,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":5.085057981588877,\"otlkMagForecast\":49.98610706570654,\"cap\":30071522,\"spreadPerc\":1,\"shareTxForMovement\":123990,\"shareTxUntilMovement\":123990,\"totalShares\":31200000,\"maxShares\":6200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":5167.395081682665,\"lastPrice\":5261.72665603835,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":false,\"otlkMag\":6.5436200729573635,\"otlkMagForecast\":41.316949337960615,\"cap\":88515707,\"spreadPerc\":0.7,\"shareTxForMovement\":84471,\"shareTxUntilMovement\":84471,\"totalShares\":58100000,\"maxShares\":11600000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":4753.016731905241,\"lastPrice\":4819.4675833002,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":true,\"otlkMag\":5.349912690372485,\"otlkMagForecast\":51.032862501226475,\"cap\":67335259,\"spreadPerc\":1.2,\"shareTxForMovement\":20259,\"shareTxUntilMovement\":20259,\"totalShares\":41600000,\"maxShares\":8300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":993.0958115351073,\"lastPrice\":1000.7896303901811,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":false,\"otlkMag\":5.1161968293429405,\"otlkMagForecast\":46.28959375466171,\"cap\":20168952,\"spreadPerc\":0.4,\"shareTxForMovement\":109979,\"shareTxUntilMovement\":109979,\"totalShares\":145400000,\"maxShares\":29100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":1795.2916433625041,\"lastPrice\":1842.932858224534,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.98,\"b\":true,\"otlkMag\":6.539856299495062,\"otlkMagForecast\":50.03618961085581,\"cap\":9638444,\"spreadPerc\":1.2,\"shareTxForMovement\":43605,\"shareTxUntilMovement\":43605,\"totalShares\":16700000,\"maxShares\":3300000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":6815.825252639146,\"lastPrice\":6756.262703454708,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.99,\"b\":false,\"otlkMag\":1.5686538379908275,\"otlkMagForecast\":49.58981728369367,\"cap\":51342184,\"spreadPerc\":1.1,\"shareTxForMovement\":30041,\"shareTxUntilMovement\":30041,\"totalShares\":8900000,\"maxShares\":1800000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1482.4097494133412,\"lastPrice\":1492.0463237700242,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":1.1436755065019266,\"otlkMagForecast\":47.85723342054008,\"cap\":40978659,\"spreadPerc\":1,\"shareTxForMovement\":114538,\"shareTxUntilMovement\":114538,\"totalShares\":25700000,\"maxShares\":5100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1740.664289639059,\"lastPrice\":1761.1249904566296,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.32,\"b\":false,\"otlkMag\":5.145566848349521,\"otlkMagForecast\":47.645965762959065,\"cap\":13946631,\"spreadPerc\":1.3,\"shareTxForMovement\":37014,\"shareTxUntilMovement\":37014,\"totalShares\":12200000,\"maxShares\":2400000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":75.812808105133,\"lastPrice\":74.07145691178167,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.64,\"b\":false,\"otlkMag\":6.410367476048882,\"otlkMagForecast\":40.432642009734494,\"cap\":5343709,\"spreadPerc\":1,\"shareTxForMovement\":34304,\"shareTxUntilMovement\":34304,\"totalShares\":141900000,\"maxShares\":28400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":396.8557051465127,\"lastPrice\":390.90323900828736,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.71,\"b\":false,\"otlkMag\":15.484745790669031,\"otlkMagForecast\":33.581567023916385,\"cap\":15650472,\"spreadPerc\":1.1,\"shareTxForMovement\":30238,\"shareTxUntilMovement\":30238,\"totalShares\":137600000,\"maxShares\":27500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":26399.76418129362,\"lastPrice\":26583.133302788305,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":5.923466495214186,\"otlkMagForecast\":58.05946286629929,\"cap\":95710514,\"spreadPerc\":0.8,\"shareTxForMovement\":137426,\"shareTxUntilMovement\":137426,\"totalShares\":13300000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":10508.638554359219,\"lastPrice\":10558.235379693024,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":9.665287001097179,\"otlkMagForecast\":38.62094686473577,\"cap\":98407600,\"spreadPerc\":0.2,\"shareTxForMovement\":175337,\"shareTxUntilMovement\":175337,\"totalShares\":27800000,\"maxShares\":5600000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":5,\"lastUpdate\":1648598301343,\"ticksUntilCycle\":44}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":15,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":80,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":24,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#00E3F8\",\"primary\":\"#CCF5FF\",\"primarydark\":\"#00CCFF\",\"successlight\":\"#0f0\",\"success\":\"#00C677\",\"successdark\":\"#FF0808\",\"errorlight\":\"#FEB3B3\",\"error\":\"#CF3B2D\",\"errordark\":\"#AA0202\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#4496B1\",\"secondarydark\":\"#008C69\",\"warninglight\":\"#FAF5B4\",\"warning\":\"#FF6831\",\"warningdark\":\"#470012\",\"infolight\":\"#03F2FF\",\"info\":\"#00FF73\",\"infodark\":\"#369360\",\"welllight\":\"#A7FFFC\",\"well\":\"#003655\",\"white\":\"#fff\",\"black\":\"#000000\",\"hp\":\"#D3442E\",\"money\":\"#FFDE05\",\"hack\":\"#00E5FF\",\"combat\":\"#FF782F\",\"cha\":\"#AB72FF\",\"int\":\"#0083D4\",\"rep\":\"#43FFFC\",\"disabled\":\"#757575\",\"backgroundprimary\":\"#000D1E\",\"backgroundsecondary\":\"#00132C\",\"button\":\"#0F3A5E\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-4,\"y\":7,\"opened\":true}}","VersionSave":"12","AllGangsSave":"{\"Slum Snakes\":{\"power\":64402.00336881074,\"territory\":1},\"Tetrads\":{\"power\":6530.647451756065,\"territory\":0},\"The Syndicate\":{\"power\":6713.492303792205,\"territory\":0},\"The Dark Army\":{\"power\":6708.274485168307,\"territory\":0},\"Speakers for the Dead\":{\"power\":5428.565288893661,\"territory\":0},\"NiteSec\":{\"power\":6643.690112639265,\"territory\":0},\"The Black Hand\":{\"power\":5690.303228582999,\"territory\":0}}","LastExportBonus":"1648598302424","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}