{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":1,\"hp\":10,\"max_hp\":10,\"strength\":25,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":162,\"hacking_chance_mult\":1.4606592,\"hacking_speed_mult\":1.4606592,\"hacking_money_mult\":1.4606592,\"hacking_grow_mult\":1.7673976320000002,\"hacking_exp\":0,\"strength_exp\":1543.1306278599889,\"defense_exp\":3.009389999999987,\"dexterity_exp\":3.009389999999987,\"agility_exp\":3.009389999999987,\"charisma_exp\":0,\"intelligence_exp\":82215.69622501361,\"hacking_mult\":1.4606592,\"strength_mult\":1.4606592,\"defense_mult\":1.4606592,\"dexterity_mult\":1.4606592,\"agility_mult\":1.4606592,\"charisma_mult\":2.0741360639999997,\"hacking_exp_mult\":1.4606592,\"strength_exp_mult\":1.4606592,\"defense_exp_mult\":1.4606592,\"dexterity_exp_mult\":1.4606592,\"agility_exp_mult\":1.4606592,\"charisma_exp_mult\":1.28128,\"company_rep_mult\":1.28128,\"faction_rep_mult\":1.28128,\"money\":-912920,\"city\":\"Sector-12\",\"location\":\"Powerhouse Gym\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[\"hacknet-node-0\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":1024,\"hashes\":30.30575708160048,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":3,\"n\":1},{\"lvl\":3,\"n\":2},{\"lvl\":3,\"n\":5},{\"lvl\":3,\"n\":4},{\"lvl\":3,\"n\":3},{\"lvl\":3,\"n\":8},{\"lvl\":3,\"n\":6},{\"lvl\":3,\"n\":7},{\"lvl\":3,\"n\":9}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.8194175999999997,\"crime_success_mult\":1.8194175999999997,\"isWorking\":true,\"focus\":false,\"workType\":\"Studying or Taking a class at university\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":2.9213184,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":480,\"workHackExpGained\":0,\"workStrExpGained\":1126.4603750399947,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":-185088,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"graftAugmentationName\":\"\",\"timeWorkedGraftAugmentation\":0,\"className\":\"training your strength at a gym\",\"crimeType\":\"\",\"timeWorked\":96400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":28800000,\"work_money_mult\":1.4606592,\"hacknet_node_money_mult\":1.4606592,\"hacknet_node_purchase_cost_mult\":0.6185807999999999,\"hacknet_node_ram_cost_mult\":0.6185807999999999,\"hacknet_node_core_cost_mult\":0.6185807999999999,\"hacknet_node_level_cost_mult\":0.6185807999999999,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1.1400000000000001,\"bladeburner_stamina_gain_mult\":1.1400000000000001,\"bladeburner_analysis_mult\":1.1400000000000001,\"bladeburner_success_chance_mult\":1.1400000000000001,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking\":1,\"strength\":3,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":1,\"hp\":10,\"max_hp\":10,\"hacking_exp\":0,\"strength_exp\":168.94245249999972,\"defense_exp\":3.009389999999987,\"dexterity_exp\":3.009389999999987,\"agility_exp\":3.009389999999987,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"Homicide\",\"currentTask\":3,\"currentTaskLocation\":\"22500\",\"currentTaskMaxTime\":3000,\"currentTaskTime\":1000,\"earningsForSleeves\":{\"hack\":0,\"str\":42.23561312499993,\"def\":0.7523474999999967,\"dex\":0.7523474999999967,\"agi\":0.7523474999999967,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":168.94245249999972,\"def\":3.009389999999987,\"dex\":3.009389999999987,\"agi\":3.009389999999987,\"cha\":0,\"money\":-636000},\"earningsForTask\":{\"hack\":0,\"str\":3.009389999999987,\"def\":3.009389999999987,\"dex\":3.009389999999987,\"agi\":3.009389999999987,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":2,\"def\":2,\"dex\":2,\"agi\":2,\"cha\":0,\"money\":22500},\"gymStatType\":\"\",\"logs\":[],\"memory\":1,\"shock\":25.095999999999854,\"storedCycles\":1,\"sync\":25}}],\"sleevesFromCovenant\":0,\"bitNodeN\":10,\"entropy\":0,\"lastUpdate\":1648610005725,\"lastSave\":1648609954948,\"totalPlaytime\":9006116800,\"playtimeSinceLastAug\":148200,\"playtimeSinceLastBitnode\":148200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-277920,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-636000,\"stock\":0,\"total\":-913920,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-277920,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":-636000,\"stock\":0,\"total\":-913920,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"TimeCompression\"],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641679545816},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641679545829},{\"ID\":\"SF1.1\",\"unlockedOn\":1641679545831},{\"ID\":\"SF2.1\",\"unlockedOn\":1641679545834},{\"ID\":\"NS2\",\"unlockedOn\":1641679545836},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1641679545838},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641679545841},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641679545844},{\"ID\":\"TOR\",\"unlockedOn\":1641679545847},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1641679545850},{\"ID\":\"TIMECOMPRESSION\",\"unlockedOn\":1641679545853},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641698402221},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641698402224},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641705602216},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641712742217},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641714302213},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641714362215},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641714362216},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641749250436},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641752856235},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641765826652},{\"ID\":\"NITESEC\",\"unlockedOn\":1641766606638},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641822300679},{\"ID\":\"DONATION\",\"unlockedOn\":1641860520680},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1641862620680},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641870387319},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1641961091609},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1641990891549},{\"ID\":\"SF5.1\",\"unlockedOn\":1642041531544},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1642647100479},{\"ID\":\"SF4.1\",\"unlockedOn\":1642981341605},{\"ID\":\"FROZE\",\"unlockedOn\":1643063744540},{\"ID\":\"CORPORATION\",\"unlockedOn\":1643570359263},{\"ID\":\"GANG\",\"unlockedOn\":1643670755353},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1643763927542},{\"ID\":\"FULL_GANG\",\"unlockedOn\":1643901669999},{\"ID\":\"GANG_MEMBER_POWER\",\"unlockedOn\":1643940624755},{\"ID\":\"GANG_TERRITORY\",\"unlockedOn\":1643978638009},{\"ID\":\"SF3.1\",\"unlockedOn\":1643998666423},{\"ID\":\"4S\",\"unlockedOn\":1644542400710},{\"ID\":\"SF8.1\",\"unlockedOn\":1644984423389},{\"ID\":\"WORKOUT\",\"unlockedOn\":1645667472731},{\"ID\":\"BLADEBURNER_DIVISION\",\"unlockedOn\":1645670412751},{\"ID\":\"COMBAT_3000\",\"unlockedOn\":1645917615054},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1645918215045},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1645918215047},{\"ID\":\"BLADEBURNER_OVERCLOCK\",\"unlockedOn\":1645921935048},{\"ID\":\"SF6.1\",\"unlockedOn\":1645925235051},{\"ID\":\"INSTALL_100\",\"unlockedOn\":1646793042526},{\"ID\":\"SF7.1\",\"unlockedOn\":1646796058317},{\"ID\":\"BLADEBURNER_UNSPENT_100000\",\"unlockedOn\":1647194267627},{\"ID\":\"FIRST_HACKNET_SERVER\",\"unlockedOn\":1647532293094},{\"ID\":\"MAX_CACHE\",\"unlockedOn\":1647547887089},{\"ID\":\"HACKNET_SERVER_1B\",\"unlockedOn\":1647558987094},{\"ID\":\"SF9.1\",\"unlockedOn\":1647818241084}],\"terminalCommandHistory\":[\"run cbGang.js\",\"run bladeMidGame.js\",\"run hacknetNode.js\",\"run cbGang.js\",\"run homeCrimesSingularity.js\",\"run blade\",\"run blade.js\",\"nano blade\",\"nano blade.js\",\"run blade\",\"run blade.js\",\"run hacknetNode.js\",\"run spendHashOnCash.js\",\"run karma.js\",\"run homeCrimesSingularity.js\",\"run karma.js\",\"run cbGang.js\",\"run hacknetNode.js\",\"run hash\",\"ls\",\"run spendHashOnCash.js\",\"buyall\",\"ls'\",\"run bladeMidGame.js\",\"run scan.js\",\"run newStartScripts/uhm.js\",\"run scan.js\",\"run OPScripts/joesop.js\",\"run bladeMidGame.js\",\"nano bladeMidGame.js\",\"run cbGang.js\",\"run hacknetNode.js\",\"run spendHashOnCash.js\",\"run OPScripts/joesop.js\",\"buyall\",\"run newStartScripts/uhm.js\",\"kill newStartScripts/uhm.js\",\"run OPScripts/joesop.js\",\"ls OPScripts/\",\"run OPScripts/megaop.js\",\"run cbGang.js\",\"run hacknetNode.js run bladeMidGame.js\",\"run bladeMidGame.js\",\"run hacknetNode.js\",\"run OPScripts/megaop.js\",\"buyall\",\"run newStartScripts/uhm.js\",\"run cbGang.js\",\"cls\",\"run blade.js\"],\"identifier\":\"a1c3578cd3ad\",\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"54.6.6.5\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"Formulas.exe\"],\"ramUsed\":5.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"blade.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":96.41000000000084,\"pid\":1,\"ramUsage\":5.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"blade.js\",\"url\":\"blob:file:///be343b8f-d76a-4b1b-b465-add1ce986ff5\",\"moduleSequenceNumber\":67704}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let baseName = \\\"HomeServer\\\";\\n    let multi = 13; // assumes you need up to 8gb for your hack and distro script. you may be able to lower this accordingly.\\n    let hackScript = \\\"/OPScripts/OP.js\\\";\\n\\n\\n    let servers = ns.getPurchasedServers();\\n\\n    if (servers.length > 0) {\\n        let maxRam = servers.reduce((a, e) => Math.max(a, ns.getServerMaxRam(e)), 3);\\n        while (Math.pow(2, multi) < maxRam) multi++;\\n    }\\n\\n    let queue = new Queue();\\n    for (let i = 0; i < servers.length; i++) {\\n        queue.enqueue(servers[i]);\\n    }\\n\\n    let nameCounter = 1;\\n    let maxRam = Math.pow(2, 20);\\n    while (true) {\\n        if (Math.pow(2, multi) >= maxRam) {\\n            ns.tprint(\\\"maxed on servers, killing process\\\");\\n            return;\\n        }\\n\\n        let count = queue.length;\\n        let cash = ns.getPlayer().money;\\n        let ram = Math.min(Math.pow(2, 20), Math.pow(2, multi));\\n        let cost = ns.getPurchasedServerCost(ram);\\n\\n        if (count >= ns.getPurchasedServerLimit() && cash >= cost) {\\n            let current = queue.peek();\\n            if (Math.min(maxRam, Math.pow(2, multi)) <= ns.getServerMaxRam(current)) {\\n                ns.tprint(\\\"bumping ram multi from \\\" + multi + \\\" to \\\" + (multi + 1));\\n                multi++;\\n                continue;\\n            }\\n            else {\\n                current = queue.dequeue();\\n                ns.killall(current);\\n                ns.deleteServer(current);\\n            }\\n        }\\n        else if (count < ns.getPurchasedServerLimit() && cash >= cost) {\\n            let name = baseName + nameCounter;\\n            nameCounter++;\\n            let newBox = ns.purchaseServer(name, ram);\\n            queue.enqueue(newBox);  \\n            \\n            await ns.scp(hackScript, newBox);\\n            //await ns.scp(\\\"OP.ns\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPgrow.js\\\", \\\"home\\\", newBox)\\n            await ns.scp(\\\"/OPScripts/OPweaken.js\\\", \\\"home\\\", newBox)\\n            await ns.scp(\\\"/OPScripts/OPhack.js\\\", \\\"home\\\", newBox)\\n            ns.exec(hackScript, newBox);\\n        }\\n\\n        await ns.asleep(1000);\\n    }\\n}\\n\\nclass Queue extends Array {\\n    enqueue(val) {\\n        this.push(val);\\n    }\\n\\n    dequeue() {\\n        return this.shift();\\n    }\\n\\n    peek() {\\n        return this[0];\\n    }\\n\\n    isEmpty() {\\n        return this.length === 0;\\n    }\\n}\",\"filename\":\"/ScaleingServerPurchase/scaleingServerPurchase.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/ScaleingServerPurchase/scaleingServerPurchase.js\",\"url\":\"blob:file:///7e411164-961f-4e89-a739-71b01538e9e0\",\"moduleSequenceNumber\":195132}],\"dependents\":[],\"ramUsage\":11.6,\"server\":\"home\",\"moduleSequenceNumber\":26446,\"_hash\":\"e1c90593f8e29227ebbabfd65ea021af39bd90c034599d019a0aa2532ef8d73c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//run calcRam.js this hackscript.ns \\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t\\n    var goalSys = ns.args[0];\\n\\n\\tif(goalSys == \\\"this\\\"){\\n\\t\\tgoalSys = ns.getHostname();\\n\\t}\\n\\n\\tvar server = ns.getServer(goalSys);\\n\\n\\t//calcs cost of script to use\\n\\tvar scriptCost = ns.getScriptRam(ns.args[1]);\\n\\n\\t//calc cost of calcRam.js\\n\\tvar usedScriptRam = ns.getScriptRam(ns.getScriptName(this));\\n\\t//cal server max ram\\n\\tvar fullRam = server.maxRam;\\n\\t//cal server ram in use (subtracts cost of calcRam.js)\\n\\tvar usedRam = server.ramUsed - usedScriptRam;\\n\\t//cals ram available for use\\n\\tvar freeRam = fullRam - usedRam;\\n\\t//calcs the max useable threads for the script to use\\n\\tvar maxThreads = freeRam / scriptCost;\\n\\n\\tif(scriptCost == 0 || server == isNaN){\\n\\t\\tns.tprint(\\\"Check parameters; args[0]: server. args[1]: script.\\\");\\n\\t}\\n\\telse{\\n\\t\\tns.tprint(\\\"\\\\n\\\\n\\\" + ns.args[1] + \\\" cost:\\\" + scriptCost + \\\" GB\\\"\\n\\t\\t+ \\\"\\\\nFree server ram: \\\" + freeRam + \\\" GB\\\"\\n\\t\\t+ \\\"\\\\nMax useable threads: \\\" + parseInt(maxThreads) + \\\"\\\\n \\\");\\n\\t}\\n\\n\\n}\",\"filename\":\"/HelperScripts/calcRam.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"calcRam.js\",\"url\":\"blob:file:///1fce2e70-0de2-409d-a12b-9e9fb8060896\"}],\"dependents\":[],\"ramUsage\":3.75,\"server\":\"home\",\"moduleSequenceNumber\":26447,\"_hash\":\"8a775f30b2b4647e8b4cd95fdef8c4cd99d856d069edc0d579ea42041b62a549\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   //if no arguments provided tell the user how to use script.\\n   if (ns.args.length === 0) {\\n      ns.alert(\\\"Please include one to five arguments as server names to hack. The script will propogate across all servers and grow, weaken and hack the specified targets. As you get new hacking tools, kill all scripts and rerun from home.\\\");\\n      return;\\n   }\\n   ns.toast('Running worm on ' + ns.getHostname());\\n   //get all connectable servers and ram cost of script\\n\\n   //get all servers you can connect to\\n   var servers = ns.scan(ns.getHostname());\\n   //get ram for this script\\n   var scriptram = ns.getScriptRam('/OPScripts/worm.js', 'home');\\n   //get ram for hack script\\n   var hackscriptram = ns.getScriptRam('/OPScripts/joesop.js', 'home')\\n   //get available server ram for this server\\n   var avsram = ns.getServerMaxRam(ns.getHostname()) - ns.getServerUsedRam(ns.getHostname()) + scriptram;\\n   //calculate usethreads for hack script for this server\\n   var hsthreads = Math.floor(avsram / hackscriptram);\\n   for (const server of servers) {\\n      //count and use hack tools owned if you don't have root\\n      var hacktoolnum = 0;\\n      //attack server\\n      if (!ns.hasRootAccess(server)) {\\n         ns.toast('Opening ports on ' + server);\\n         if (ns.fileExists('BruteSSH.exe', 'home')) {\\n            ns.brutessh(server);\\n            hacktoolnum++;\\n         }\\n         if (ns.fileExists('FTPCrack.exe', 'home')) {\\n            ns.ftpcrack(server);\\n            hacktoolnum++;\\n\\n         }\\n         if (ns.fileExists('relaySMTP.exe', 'home')) {\\n            ns.relaysmtp(server);\\n            hacktoolnum++;\\n\\n         }\\n         if (ns.fileExists('HTTPWorm.exe', 'home')) {\\n            ns.httpworm(server);\\n            hacktoolnum++;\\n\\n         }\\n         if (ns.fileExists('SQLInject.exe', 'home')) {\\n            ns.sqlinject(server);\\n            hacktoolnum++;\\n\\n         }\\n      }\\n      //if you don't have access and used enough tools nuke target server\\n      if (ns.getServerNumPortsRequired(server) <= hacktoolnum && !ns.hasRootAccess(server)) {\\n         ns.toast(\\\"nuking \\\" + server);\\n         ns.nuke(server);\\n      } else\\n         //if you still don't have access, skip\\n         if (!ns.hasRootAccess(server)) {\\n            ns.toast(\\\"unable to gain root to \\\" + server, \\\"error\\\");\\n            continue;\\n         }\\n      //if the server has enough ram to run the worm script\\n      if (ns.getServerMaxRam(server) > ns.getServerUsedRam(server) + scriptram) {\\n         //copy WORM script to server and run\\n         if (!ns.fileExists('/OPScripts/worm.js', server)) {\\n            ns.print('/OPScripts/worm.js being copied to ' + server);\\n\\n            await ns.scp('/OPScripts/worm.js', 'home', server);\\n         }\\n         //if you don't see either script running on target server, run worm on it.\\n         if (!ns.scriptRunning('/OPScripts/worm.js', server) && !ns.scriptRunning('/OPScripts/joesop.js', server)) {\\n            ns.print('running worm on ' + server);\\n            await ns.sleep(11000);\\n\\n            await ns.scp('/OPScripts/worm.js', 'home', server);\\n            if (ns.args.length === 1) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0]);\\n            }\\n            if (ns.args.length === 2) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1]);\\n            }\\n            if (ns.args.length === 3) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1], ns.args[2]);\\n            }\\n            if (ns.args.length === 4) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3]);\\n            }\\n            if (ns.args.length === 5) {\\n               ns.exec('/OPScripts/worm.js', server, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]);\\n            }\\n         }\\n      } else {\\n         //if server can't run script, look at servers it can connect to, gain root, and run script there\\n         var moreservs = ns.scan(server);\\n         for (const server2 of moreservs) {\\n            var hacktoolnum2 = 0;\\n\\n            //attack server\\n            if (!ns.hasRootAccess(server2)) {\\n               ns.toast('Opening ports on ' + server2)\\n               if (ns.fileExists('BruteSSH.exe', 'home')) {\\n                  ns.brutessh(server2);\\n                  hacktoolnum2++;\\n               }\\n               if (ns.fileExists('FTPCrack.exe', 'home')) {\\n                  ns.ftpcrack(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n               if (ns.fileExists('relaySMTP.exe', 'home')) {\\n                  ns.relaysmtp(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n               if (ns.fileExists('HTTPWorm.exe', 'home')) {\\n                  ns.httpworm(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n               if (ns.fileExists('SQLInject.exe', 'home')) {\\n                  ns.sqlinject(server2);\\n                  hacktoolnum2++;\\n\\n               }\\n            }\\n            if (ns.getServerNumPortsRequired(server2) <= hacktoolnum2 && !ns.hasRootAccess(server2)) {\\n               ns.toast(\\\"nuking \\\" + server2);\\n               ns.nuke(server2);\\n            } else\\n               //if you still don't have access, skip\\n               if (!ns.hasRootAccess(server2)) {\\n                  ns.toast(\\\"unable to gain root to \\\" + server2, \\\"error\\\");\\n                  continue;\\n               }\\n            if (ns.getServerMaxRam(server2) > ns.getServerUsedRam(server2) + scriptram) {\\n               //copy WORM script to server and run\\n               if (!ns.fileExists('/OPScripts/worm.js', server2)) {\\n                  ns.print('/OPScripts/worm.js being copied to ' + server2);\\n                  await ns.scp('/OPScripts/worm.js', 'home', server2);               }\\n               if (!ns.scriptRunning('/OPScripts/worm.js', server2) && !ns.scriptRunning('/OPScripts/joesop.js', server2)) {\\n                  ns.print('running worm on ' + server2);\\n                  await ns.sleep(11000);\\n                  await ns.scp('/OPScripts/worm.js', 'home', server2);\\n                  if (ns.args.length === 1) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0]);\\n                  }\\n                  if (ns.args.length === 2) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1]);\\n                  }\\n                  if (ns.args.length === 3) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1], ns.args[2]);\\n                  }\\n                  if (ns.args.length === 4) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3]);\\n                  }\\n                  if (ns.args.length === 5) {\\n                     ns.exec('/OPScripts/worm.js', server2, 1, ns.args[0], ns.args[1], ns.args[2], ns.args[3], ns.args[4]);\\n                  }\\n               }\\n\\n            }\\n         }\\n      }\\n   }\\n   //if usethreads exists for this script, build args array of parameters based on this scripts args\\n   if (hsthreads) {\\n      var hsargs = [];\\n      for (const argument of ns.args) {\\n         hsargs.push(argument);\\n         hsargs.push(ns.getServerMinSecurityLevel(argument));\\n         hsargs.push(ns.getServerMaxMoney(argument));\\n         hsargs.push(ns.getServerRequiredHackingLevel(argument));\\n      }\\n      //copy hack script to this server and spawn script with threads and arguments as a single string\\n      if (ns.getHostname() != 'home') {\\n         await ns.scp('/OPScripts/OPhack.js', 'home', ns.getHostname());\\n         await ns.scp('/OPScripts/OPweaken.js', 'home', ns.getHostname());\\n         await ns.scp('/OPScripts/OPgrown.js', 'home', ns.getHostname());\\n         await ns.scp('/OPScripts/joesop.js', 'home', ns.getHostname());\\n      }\\n      ns.spawn('/OPScripts/joesop.js');\\n   }\\n}\",\"filename\":\"/OPScripts/worm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/worm.js\",\"url\":\"blob:file:///e3fb9c1d-6e0b-4b8d-a046-9450687773a2\",\"moduleSequenceNumber\":830}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":26448,\"_hash\":\"bb7db5f785efa78f75d2e2bd5b70db6314f92723a22bdb23e114242c024c857e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"spawn\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    //*********PARAMS FOR SCRIPT ***************//\\n    var maxSharePer = 1.0                     // maximum percent of a symbol's total stock to buy\\n    var stockBuyPer = 0.6                     //  percent probablity to buy symbol\\n    var stockVolPer = .03                    //   percent stock will move to buy\\n    var moneyKeep = 9000000000000000           //    min money to keep on hand\\n    var minSharePer = 5                    //     min shares to buy\\n    var orderMax = 1000000000000000          //      max money to spend on a single order\\n    var profPer = 0.05                   //       min profit percentage to sell\\n    var panicPer = 0.50                 //        percentage loss to panic sell at\\n    //*********************************//\\n    while (true) {\\n        ns.disableLog('disableLog');\\n        ns.disableLog('sleep');\\n        ns.disableLog('getServerMoneyAvailable')\\n        var stocks = ns.stock.getSymbols();\\n        for (const stock of stocks) {\\n            var position = ns.stock.getPosition(stock)\\n            if (position[0]) {\\n                ns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n                sellPositions(stock);\\n            }\\n            buyPositions(stock);\\n \\n        }\\n        await ns.sleep(6000);\\n    }\\n    function sellPositions(stock) {\\n        //check profit\\n        if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) >= 1 + profPer && ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") > 100000) {\\n            //sell stock\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n            ns.stock.sell(stock, position[0]);\\n        } else if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) < (1 - panicPer)) {\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" loss!\\\", \\\"warning\\\");\\n            ns.stock.sell(stock, position[0]);\\n        }\\n    }\\n \\n    function buyPositions(stock) {\\n        var maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n        var askPrice = ns.stock.getAskPrice(stock);\\n        var forecast = ns.stock.getForecast(stock);\\n        var volPer = ns.stock.getVolatility(stock);\\n        var playerMoney = ns.getServerMoneyAvailable('home');\\n        //if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n            //check money for one share\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n                var shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n                ns.stock.buy(stock, Math.min(shares, maxShares));\\n                \\n            }\\n        }\\n    }\\n \\n}\",\"filename\":\"/HelperScripts/stocks.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/HelperScripts/stocks.ns\",\"url\":\"blob:file:///e437b6bd-e4d1-470d-8cf7-4276dd72b6ad\"}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":26449,\"_hash\":\"060833ff0bed6afa36406c362b3e3e56fc076c37337e4b2b26ee52559934d298\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while (true) {\\n        var servers = scanAndHack(ns);\\n       //var opServer = \\\"megacorp\\\";\\n        var opServer = \\\"joesguns\\\";\\n\\n        for (let server of servers) {\\n            await ns.scp(\\\"/OPScripts/hack.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/weaken.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/grow.js\\\", \\\"home\\\", server)\\n\\n            await ns.scp(\\\"/OPScripts/OP.ns\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPgrow.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPweaken.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/OPScripts/OPhack.js\\\", \\\"home\\\", server)\\n            ns.exec(\\\"/OPScripts/OP.ns\\\", server)\\n            //await ns.installBackdoor(server)\\n        }\\n        ns.print(`servers:${[...servers.values()]}`)\\n        var freeRams = getFreeRam(ns, servers);\\n         //ns.tprint(`freeRams:${freeRams.map(value => JSON.stringify(value))}`)\\n        var hackables = getHackable(ns, servers);\\n         //ns.tprint(`hackable:${[...hackables.values()]}`)\\n        var hackstates = getHackStates(ns, servers, hackables)\\n        //ns.print(`hackstates:${[...hackstates.entries()].map((v, _i) => `${v[0]}:{${JSON.stringify(v[1])}}\\\\n`)}`)\\n        manageAndHack(ns, freeRams, hackables, hackstates)\\n        await ns.sleep(4000)\\n    }\\n}\\n \\nfunction manageAndHack(ns, freeRams, hackables, hackstates) {\\n    for (let target of hackables) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        const maxMoney = ns.getServerMaxMoney(target);\\n        const minSec = ns.getServerMinSecurityLevel(target);\\n        const sec = ns.getServerSecurityLevel(target);\\n\\n        var secDiff = sec - minSec\\n        \\n        if (secDiff > 0) {\\n            var threads = Math.floor(secDiff * 20) - hackstates.get(target).weaken;\\n                        //ns.tprint(\\\"Weaken: \\\"+ target+ \\\": \\\" + threads);    \\n                        //ns.tprint( hackstates.get(target).weaken);\\n            if (threads > 0) {\\n                if (!findPlaceToRun(ns, \\\"/OPScripts/weaken.js\\\", threads, freeRams, target)) {\\n                    return\\n                }\\n            }\\n \\n        }\\n \\n        var moneyPercent = money / maxMoney * 100\\n        if (moneyPercent < 90) {\\n            var threads = Math.floor(ns.growthAnalyze(target, 100 / moneyPercent))\\n                - hackstates.get(target).grow;\\n                        //ns.tprint(\\\"Grow: \\\" + target+ \\\": \\\" + threads);    \\n            if (threads > 0) {\\n                if (!findPlaceToRun(ns, \\\"/OPScripts/grow.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n \\n        if (moneyPercent > 75 && secDiff < 50) {\\n            var threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney)))\\n                - hackstates.get(target).hack\\n                        //ns.tprint(\\\"Hack: \\\" + target+ \\\": \\\" + threads);    \\n            if (threads > 0) {\\n                // hack to money percent = 70\\n                if (!findPlaceToRun(ns, \\\"/OPScripts/hack.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n         //ns.tprint(`target:${target} secDiff:${secDiff.toFixed(2)} moneyPercent:${moneyPercent.toFixed(2)}`)\\n    }\\n    // for hacking exp\\n     //hackables=[\\\"joesguns\\\"];\\n     //findPlaceToRun(ns, \\\"grow.js\\\", 20000000000, freeRams, hackables[0])\\n}\\nfunction findPlaceToRun(ns, script, threads, freeRams, target) {\\n    let scriptRam = ns.getScriptRam(script)\\n    var remaingThread = threads;\\n    while (true) {\\n        if (freeRams.length === 0) {\\n            return false;\\n        }\\n        var host = freeRams[0].host;\\n        var ram = freeRams[0].freeRam;\\n \\n        if (ram < scriptRam) {\\n            freeRams.shift()\\n        } else if (ram < scriptRam * remaingThread) {\\n            const threadForThisHost = Math.floor(ram / scriptRam)\\n            // ns.tprint(`executing ${script} on ${host} with ${threadForThisHost} threads, targeting ${target}`)\\n \\n            if (ns.exec(script, host, threadForThisHost, target) === 0) {\\n                ns.kill(script, host, target)\\n                ns.exec(script, host, threadForThisHost, target)\\n            }\\n            remaingThread -= threadForThisHost\\n            freeRams.shift()\\n        } else {\\n            // ns.tprint(`executing ${script} on ${host} with ${remaingThread} threads, targeting ${target}`)\\n            if (ns.exec(script, host, remaingThread, target) === 0) {\\n                ns.kill(script, host, target)\\n                ns.exec(script, host, remaingThread, target)\\n            }\\n            freeRams[0].freeRam -= scriptRam * remaingThread\\n \\n            return true;\\n        }\\n    }\\n \\n}\\nfunction getHackStates(ns, servers, hackables) {\\n    var hackstates = new Map();\\n    for (let server of servers.values()) {\\n        for (let hackable of hackables.values()) {\\n            let weakenScript = ns.getRunningScript(\\\"/OPScripts/weaken.js\\\", server, hackable);\\n            let growScript = ns.getRunningScript(\\\"/OPScripts/grow.js\\\", server, hackable);\\n            let hackScript = ns.getRunningScript(\\\"/OPScripts/hack.js\\\", server, hackable);\\n            if (hackstates.has(hackable)) {\\n                hackstates.get(hackable).weaken += weakenScript === null ? 0 : weakenScript.threads\\n                hackstates.get(hackable).grow += growScript === null ? 0 : growScript.threads\\n                hackstates.get(hackable).hack += hackScript === null ? 0 : hackScript.threads\\n            } else {\\n                hackstates.set(hackable, {\\n                    weaken: weakenScript === null ? 0 : weakenScript.threads,\\n                    grow: growScript === null ? 0 : growScript.threads,\\n                    hack: hackScript === null ? 0 : hackScript.threads\\n                })\\n            }\\n        }\\n    }\\n    return hackstates\\n}\\nfunction getHackable(ns, servers) {\\n    return [...servers.values()].filter(server => ns.getServerMaxMoney(server) > 100000\\n        && ns.getServerMoneyAvailable(server) > 1000\\n        && ns.getServerGrowth(server))\\n        .sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b))\\n}\\n \\nfunction getFreeRam(ns, servers) {\\n    const freeRams = [];\\n    for (let server of servers) {\\n        const freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n        if (freeRam > 1) {\\n            freeRams.push({ host: server, freeRam: freeRam });\\n        }\\n \\n    }\\n    var sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n    return sortedFreeRams;\\n}\\n \\nfunction scanAndHack(ns) {\\n    let servers = new Set([\\\"home\\\"]);\\n    scanAll(\\\"home\\\", servers, ns);\\n    const accesibleServers = new Set();\\n    for (let server of servers) {\\n        var portOpened = 0;\\n        if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n            ns.brutessh(server);\\n            portOpened++;\\n        }\\n        if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n            ns.ftpcrack(server);\\n            portOpened++;\\n        }\\n \\n        if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n            ns.httpworm(server);\\n            portOpened++;\\n        }\\n        if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n            ns.relaysmtp(server);\\n            portOpened++;\\n        }\\n \\n        if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n            ns.sqlinject(server);\\n            portOpened++;\\n        }\\n \\n        if (ns.getServerNumPortsRequired(server) <= portOpened\\n            && ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\n            ns.nuke(server);\\n            accesibleServers.add(server);\\n        }\\n    }\\n    return accesibleServers.add(\\\"home\\\");\\n}\\n \\nfunction scanAll(host, servers, ns) {\\n    var hosts = ns.scan(host);\\n    ns.print(hosts);\\n    for (let i = 0; i < hosts.length; i++) {\\n        if (!servers.has(hosts[i])) {\\n            servers.add(hosts[i]);\\n            scanAll(hosts[i], servers, ns);\\n        }\\n \\n    }\\n}\",\"filename\":\"/OPScripts/ultimateHackingMGR.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/ultimateHackingMGR.js\",\"url\":\"blob:file:///db5c24a1-0fbc-4419-93a3-9ce1f7616bd3\",\"moduleSequenceNumber\":830}],\"dependents\":[],\"ramUsage\":8.25,\"server\":\"home\",\"moduleSequenceNumber\":26450,\"_hash\":\"71702e035d0f4c6219f78d4962a9895ca61b9fd034f41ac8d9b08729faaa62d9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.weaken(ns.args[0]);\\n}\",\"filename\":\"/OPScripts/weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/weaken.js\",\"url\":\"blob:file:///cc63878a-6330-4243-b1e9-d5e6c1ea6677\",\"moduleSequenceNumber\":898}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":26451,\"_hash\":\"1c4b8896d7d6509e96e446277247667004f8af0c1f968ceb1e55974f06c74930\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function scan(ns, parent, server, list) {\\n    const children = ns.scan(server);\\n    for (let child of children) {\\n        if (parent == child) {\\n            continue;\\n        }\\n        list.push(child);\\n        \\n        scan(ns, server, child, list);\\n    }\\n}\\n\\nexport function list_servers(ns) {\\n    const list = [];\\n    scan(ns, '', 'home', list);\\n    return list;\\n}\\n\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script helps you find an unsolved coding contract.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n\\n    let servers = list_servers(ns);\\n    const boughtServers = ns.getPurchasedServers(ns);\\n    servers = servers.filter(s => !boughtServers.includes(s));\\n    const hostname = servers.find(s => ns.ls(s).find(f => f.endsWith(\\\".cct\\\")))\\n    if(!hostname) {\\n        ns.tprint(\\\"No coding contract found.\\\");\\n        return;\\n    }\\n\\n    ns.tprint(`Found coding contract on '${hostname}'.`)\\n}\",\"filename\":\"/HelperScripts/find_coding_contracts.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"find_coding_contracts.js\",\"url\":\"blob:file:///8e1fcdd4-0aec-4f0e-a62f-c6d543a904bb\"}],\"dependents\":[],\"ramUsage\":4.25,\"server\":\"home\",\"moduleSequenceNumber\":26452,\"_hash\":\"60f71098e4f2ae9f5a01cd3b08d175affba09b8937787c8a148ca8c8d24cbe1c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const args = ns.flags([[\\\"help\\\", false]]);\\n    if (args.help) {\\n        ns.tprint(\\\"This script will enhance your HUD (Heads up Display) with custom statistics.\\\");\\n        ns.tprint(`Usage: run ${ns.getScriptName()}`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()}`);\\n        return;\\n    }\\n    \\n    const doc = document; // This is expensive! (25GB RAM) Perhaps there's a way around it? ;)\\n    const hook0 = doc.getElementById('overview-extra-hook-0');\\n    const hook1 = doc.getElementById('overview-extra-hook-1');\\n    while (true) {\\n        try {\\n            const headers = []\\n            const values = [];\\n            // Add script income per second\\n            headers.push(\\\"ScrInc\\\");\\n            values.push(ns.getScriptIncome()[0].toPrecision(5) + '/sec');\\n            // Add script exp gain rate per second\\n            headers.push(\\\"ScrExp\\\");\\n            values.push(ns.getScriptExpGain().toPrecision(5) + '/sec');\\n            // TODO: Add more neat stuff\\n\\n            // Now drop it into the placeholder elements\\n            hook0.innerText = headers.join(\\\" \\\\n\\\");\\n            hook1.innerText = values.join(\\\"\\\\n\\\");\\n        } catch (err) { // This might come in handy later\\n            ns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"/HelperScripts/custom_stats.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"custom_stats.js\",\"url\":\"blob:file:///a5fc02ec-988c-4fa6-b996-00c140795910\"}],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":26453,\"_hash\":\"9b84fb4c333acbaf3b93f1e8d1b4c0e157cce1b06e22e1c7fdffecf3c0018676\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25},{\"type\":\"fn\",\"name\":\"getScriptIncome\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptExpGain\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   var server = \\\"megacorp\\\";   //Host to hack\\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/megaop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/megaop.js\",\"url\":\"blob:https://danielyxie.github.io/cff6d690-02cf-46d9-a6f1-1b68287a0adc\",\"moduleSequenceNumber\":6942}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26454,\"_hash\":\"468009e7e46d12a69ccbd538ddf2fcec942e87ed6577cf914759908c8d84afb2\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nvar server = ns.args[0];\\nvar sleeptime = ns.args[1];\\nawait ns.sleep(sleeptime);\\nawait ns.hack(server);\\n}\",\"filename\":\"/OPScripts/OPhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/OPhack.js\",\"url\":\"blob:https://danielyxie.github.io/f8ceb0aa-1431-4dda-ae06-7a5dcd547260\",\"moduleSequenceNumber\":543}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":26455,\"_hash\":\"c609c5a5b980bdeb5d0712171758c46083d9d89319ece98f9ff4767dc4e75b56\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nvar server = ns.args[0];\\nvar sleeptime = ns.args[1];\\nawait ns.sleep(sleeptime);\\nawait ns.weaken(server);\\n}\",\"filename\":\"/OPScripts/OPweaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/OPweaken.js\",\"url\":\"blob:https://danielyxie.github.io/f11b418a-7fca-42bc-a349-8e21db63499a\",\"moduleSequenceNumber\":6943}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":26456,\"_hash\":\"3710b6675d812f61a251f3c6fbae1fab7f50afd1f358069b6547c4d942aa7f4d\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nvar server = ns.args[0];\\nvar sleeptime = ns.args[1];\\nawait ns.sleep(sleeptime);\\nawait ns.grow(server);\\n}\",\"filename\":\"/OPScripts/OPgrow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/OPgrow.js\",\"url\":\"blob:https://danielyxie.github.io/ca47474c-23bf-4842-b374-25b1c99ab30b\",\"moduleSequenceNumber\":6944}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":26457,\"_hash\":\"3c7d64173a9a4eb40a8c9f56584c164fc52874faa6cce5cf20696f7ceb2e435f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.hack(ns.args[0]);\\n}\",\"filename\":\"/OPScripts/hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/hack.js\",\"url\":\"blob:file:///3a459712-e6b4-44f0-8ce9-031f7a4f7742\",\"moduleSequenceNumber\":877}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":26458,\"_hash\":\"b14431d02324f4543ef5cc3c94cff2e6e86e1302460bb5f6f7c0d224264dfb83\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0]);\\n}\",\"filename\":\"/OPScripts/grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/grow.js\",\"url\":\"blob:file:///50337218-aae4-4063-a1f1-c5f186f87c9c\",\"moduleSequenceNumber\":899}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":26459,\"_hash\":\"5ff97751b119123cb164c20ad838bf99d6707201cea52db6e0ffed1172274e54\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// If the percentage of money on server is LESS than this, grow it to max\\nconst growPercent =  90\\n// hack the sever only if the percentage of money on server is MORE than this \\nconst hackPercent =  75\\n// hack the sever only if the security of the server is this many above the minimal\\nconst secThreshold =  50\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.print(ns.heart.break());\\n    while (true) {\\n        // scan and hack all accesible servers\\n        var servers = scanAndHack(ns);\\n        // ns.tprint(`servers:${[...servers.values()]}`)\\n\\n        // transfer file to servers\\n        for (let server of servers) {\\n            await ns.scp(\\\"/newStartScripts/h1.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/newStartScripts/w1.js\\\", \\\"home\\\", server)\\n            await ns.scp(\\\"/newStartScripts/g1.js\\\", \\\"home\\\", server)\\n            // some script to help you save time backdooring servers\\n            // , requires singularity module\\n            //             if(server === \\\"CSEC\\\" || server === \\\"I.I.I.I\\\" \\n            //             || server === \\\"avmnite-02h\\\" || server === \\\"run4theh111z\\\"){\\n            // await ns.installBackdoor(server)\\n            //             }\\n\\n        }\\n\\n        // find servers that we can run scripts on\\n        var freeRams = getFreeRam(ns, servers);\\n        // ns.tprint(`freeRams:${freeRams.map(value => JSON.stringify(value))}`)\\n\\n        // find servers that we can hack\\n        var hackables = getHackable(ns, servers);\\n        // ns.tprint(`hackable:${[...hackables.values()]}`)\\n\\n        // get currently running scripts on servers\\n        var hackstates = getHackStates(ns, servers, hackables)\\n        // ns.tprint(`hackstates:${[...hackstates.entries()].map((v, _i) => `${v[0]}:{${JSON.stringify(v[1])}}\\\\n`)}`)\\n\\n        // Main logic sits here, determine whether or not and how many threadsd\\n        // we should call weaken, grow and hack asynchronously \\n        manageAndHack(ns, freeRams, hackables, hackstates)\\n\\n        await ns.sleep(2000)\\n    }\\n}\\n\\nfunction manageAndHack(ns, freeRams, hackables, hackstates) {\\n    for (let target of hackables) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        const maxMoney = ns.getServerMaxMoney(target);\\n        const minSec = ns.getServerMinSecurityLevel(target);\\n        const sec = ns.getServerSecurityLevel(target);\\n\\n        var secDiff = sec - minSec\\n        // weaken if the security of the host is not at its minimum\\n        if (secDiff > 0) {\\n            var threads = Math.floor(secDiff * 20) - hackstates.get(target).weaken;\\n            if (threads > 0) {\\n                // if we didnt find any place to run, \\n                // it means we have ran out of places to run anything, so stop this \\n                // and wait for next cycle\\n                if (!findPlaceToRun(ns, \\\"/newStartScripts/w1.js\\\", threads, freeRams, target)) {\\n                    return\\n                }\\n            }\\n\\n        }\\n\\n        var moneyPercent = money / maxMoney * 100\\n        // grow if money is less then the percentage \\n        if (moneyPercent < growPercent) {\\n            var threads = Math.floor(ns.growthAnalyze(target, 100 / moneyPercent))\\n                - hackstates.get(target).grow;\\n            if (threads > 0) {\\n                // if we didnt find any place to run, \\n                // it means we have ran out of places to run anything, so stop this \\n                // and wait for next cycle\\n                if (!findPlaceToRun(ns, \\\"/newStartScripts/g1.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n\\n        if (moneyPercent > hackPercent && secDiff < secThreshold) {\\n            var threads = Math.floor(ns.hackAnalyzeThreads(target, money - (0.4 * maxMoney)))\\n                - hackstates.get(target).hack\\n            if (threads > 0) {\\n                // hack to money percent = 70\\n                if (!findPlaceToRun(ns, \\\"/newStartScripts/h1.js\\\", threads, freeRams, target)) {\\n                    return;\\n                }\\n            }\\n        }\\n        // ns.tprint(`target:${target} secDiff:${secDiff.toFixed(2)} moneyPercent:${moneyPercent.toFixed(2)}`)\\n    }\\n\\n}\\n\\n// find some place to run the script with given amount of threads\\n// returns ture means script was executed, false means it didnt\\nfunction findPlaceToRun(ns, script, threads, freeRams, target) {\\n    let scriptRam = ns.getScriptRam(script)\\n    var remaingThread = threads;\\n    while (true) {\\n        // if no more host with ram, return false\\n        if (freeRams.length === 0) {\\n            return false;\\n        }\\n\\n        // try with first availiable host\\n        var host = freeRams[0].host;\\n        var ram = freeRams[0].freeRam;\\n\\n        // if not enough ram on host to even run 1 thread, remove the host from list\\n        if (ram < scriptRam) {\\n            freeRams.shift()\\n\\n            // else if the ram on the host is not enough to run all threads, just run as much as it can\\n        } else if (ram < scriptRam * remaingThread) {\\n            const threadForThisHost = Math.floor(ram / scriptRam)\\n\\n            // try to run the script, at this point this will only fail if\\n            // the host is already running the script against the same target,\\n            // from an earlier cycle\\n            if (ns.exec(script, host, threadForThisHost, target) === 0) {\\n                // if failed, than find the next host to run it, and return its result\\n                return findPlaceToRun(ns, script, threads, freeRams.slice(1), target)\\n            } else {\\n                // if run successed update thread to run and remove this host from the list\\n                // if (script === \\\"hack.js\\\") {\\n                // ns.tprint(`executing ${script} on ${host} with ${threadForThisHost} threads, targeting ${target}`)\\n                // }\\n                remaingThread -= threadForThisHost\\n                freeRams.shift()\\n            }\\n\\n        } else {\\n            // try to run the script, at this point this will only fail if\\n            // the host is already running the script against the same target,\\n            // from an earlier cycle\\n            if (ns.exec(script, host, remaingThread, target) === 0) {\\n                // if failed, than find the next host to run it, and return its result\\n                if (!findPlaceToRun(ns, script, threads, freeRams.slice(1), target)) {\\n                    return false;\\n                }\\n            } else {\\n                // if run successed update the remaining ram for this host\\n                // if (script === \\\"hack.js\\\") {\\n                //     ns.tprint(`executing ${script} on ${host} with ${remaingThread} threads, targeting ${target}`)\\n                // }\\n                freeRams[0].freeRam -= scriptRam * remaingThread\\n            }\\n\\n            return true;\\n        }\\n    }\\n}\\n\\n// gets the number of running threads against hackable servers\\nfunction getHackStates(ns, servers, hackables) {\\n    var hackstates = new Map();\\n    for (let server of servers.values()) {\\n        for (let hackable of hackables.values()) {\\n            let weakenScript = ns.getRunningScript(\\\"/newStartScripts/w1.js\\\", server, hackable);\\n            let growScript = ns.getRunningScript(\\\"/newStartScripts/g1.js\\\", server, hackable);\\n            let hackScript = ns.getRunningScript(\\\"/newStartScripts/h1.js\\\", server, hackable);\\n            if (hackstates.has(hackable)) {\\n                hackstates.get(hackable).weaken += weakenScript === null ? 0 : weakenScript.threads\\n                hackstates.get(hackable).grow += growScript === null ? 0 : growScript.threads\\n                hackstates.get(hackable).hack += hackScript === null ? 0 : hackScript.threads\\n            } else {\\n                hackstates.set(hackable, {\\n                    weaken: weakenScript === null ? 0 : weakenScript.threads,\\n                    grow: growScript === null ? 0 : growScript.threads,\\n                    hack: hackScript === null ? 0 : hackScript.threads\\n                })\\n            }\\n        }\\n    }\\n    return hackstates\\n}\\n\\n// filter the list for hackable servers\\nfunction getHackable(ns, servers) {\\n    return [...servers.values()].filter(server => ns.getServerMaxMoney(server) > 100000\\n        && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel()\\n        && ns.getServerMoneyAvailable(server) > 1000\\n        && ns.getServerGrowth(server))\\n        .sort((a, b) => ns.getServerRequiredHackingLevel(a) - ns.getServerRequiredHackingLevel(b))\\n}\\n\\n// filter the list for servers where we can run script on\\nfunction getFreeRam(ns, servers) {\\n    const freeRams = [];\\n    for (let server of servers) {\\n        const freeRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);\\n        if (freeRam > 1) {\\n            freeRams.push({ host: server, freeRam: freeRam });\\n        }\\n\\n    }\\n    var sortedFreeRams = freeRams.sort((a, b) => b.freeRam - a.freeRam);\\n    return sortedFreeRams;\\n}\\n\\n// scan all servers from home and hack them if we can\\nfunction scanAndHack(ns) {\\n    let servers = new Set([\\\"home\\\"]);\\n    scanAll(\\\"home\\\", servers, ns);\\n    const accesibleServers = new Set();\\n    for (let server of servers) {\\n        if (ns.hasRootAccess(server)) {\\n            accesibleServers.add(server)\\n        } else {\\n            var portOpened = 0;\\n            if (ns.fileExists(\\\"BruteSSH.exe\\\")) {\\n                ns.brutessh(server);\\n                portOpened++;\\n            }\\n            if (ns.fileExists(\\\"FTPCrack.exe\\\")) {\\n                ns.ftpcrack(server);\\n                portOpened++;\\n            }\\n\\n            if (ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\n                ns.httpworm(server);\\n                portOpened++;\\n            }\\n            if (ns.fileExists(\\\"relaySMTP.exe\\\")) {\\n                ns.relaysmtp(server);\\n                portOpened++;\\n            }\\n\\n            if (ns.fileExists(\\\"SQLInject.exe\\\")) {\\n                ns.sqlinject(server);\\n                portOpened++;\\n            }\\n\\n            if (ns.getServerNumPortsRequired(server) <= portOpened) {\\n                ns.nuke(server);\\n                accesibleServers.add(server);\\n            }\\n        }\\n\\n\\n    }\\n    return accesibleServers;\\n}\\n\\nfunction scanAll(host, servers, ns) {\\n    var hosts = ns.scan(host);\\n    for (let i = 0; i < hosts.length; i++) {\\n        if (!servers.has(hosts[i])) {\\n            servers.add(hosts[i]);\\n            scanAll(hosts[i], servers, ns);\\n        }\\n\\n    }\\n}\",\"filename\":\"/newStartScripts/uhm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newStartScripts/uhm.js\",\"url\":\"blob:https://danielyxie.github.io/fc99eaf3-9bd6-4db1-88db-91c938d21686\",\"moduleSequenceNumber\":6945}],\"dependents\":[],\"ramUsage\":7.8,\"server\":\"home\",\"moduleSequenceNumber\":26460,\"_hash\":\"4a31b00d3f45221e4d9da3662783ae171ed8230e2bd42ed5aec02249e62aee60\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"growthAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerGrowth\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tawait ns.hack(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/h1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newStartScripts/h1.js\",\"url\":\"blob:file:///f9872111-c76e-4b51-b0c7-007747b89b63\",\"moduleSequenceNumber\":5067}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":26461,\"_hash\":\"52a611207315e48df0ef7826cd9f943258e2143cec0033c05bebe7a8606ef3c9\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    await ns.weaken(ns.args[0])\\n}\",\"filename\":\"/newStartScripts/w1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newStartScripts/w1.js\",\"url\":\"blob:https://danielyxie.github.io/ba54c8e6-63b0-4619-9bb1-fd4b20928c3d\",\"moduleSequenceNumber\":7519}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":26462,\"_hash\":\"b5642ab50667b899638a56518afb79f48c0f59cc1a77788a5c6df15e71f03579\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\nawait ns.grow(ns.args[0])    \\n\\n}\",\"filename\":\"/newStartScripts/g1.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/newStartScripts/g1.js\",\"url\":\"blob:https://danielyxie.github.io/adba22ab-a3e2-4939-adbd-bf56854aeba9\",\"moduleSequenceNumber\":7518}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":26463,\"_hash\":\"6f70e732ab9e9703cbcf3ff6c64fa775af22df4d662e2441b3fecc79a279cf45\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** u/param {NS} ns **/ export async function main(ns) {document.achievements.push(\\\"UNACHIEVABLE\\\")}\",\"filename\":\"unachievable.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"unachievable.js\",\"url\":\"blob:file:///ab4580ff-b042-47b0-908c-12266d374f5b\",\"moduleSequenceNumber\":1490}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":26464,\"_hash\":\"49e155f72ba8c058e8f1a64396c284a29aea9c620b17cc763ff9c452f9d52610\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let facServers = {\\n    \\\"CSEC\\\" : \\\"yellow\\\",\\n    \\\"avmnite-02h\\\" : \\\"yellow\\\",\\n    \\\"I.I.I.I\\\" : \\\"yellow\\\",\\n    \\\"run4theh111z\\\" : \\\"yellow\\\",\\n    \\\"The-Cave\\\" : \\\"orange\\\",\\n    \\\"w0r1d_d43m0n\\\" : \\\"red\\\"\\n};\\n\\nlet svObj = (name = 'home', depth = 0) => ({ name: name, depth: depth });\\nexport function getServers(ns) {\\n    let result = [];\\n    let visited = { 'home': 0 };\\n    let queue = Object.keys(visited);\\n    let name;\\n    while ((name = queue.pop())) {\\n        let depth = visited[name];\\n        result.push(svObj(name, depth));\\n        let scanRes = ns.scan(name);\\n        for (let i = scanRes.length; i >= 0; i--) {\\n            if (visited[scanRes[i]] === undefined) {\\n                queue.push(scanRes[i]);\\n                visited[scanRes[i]] = depth + 1;\\n            }\\n        }\\n    }\\n    return result;\\n}\\nexport async function main(ns) {\\n    let output = \\\"Network:\\\";\\n\\n    getServers(ns).forEach(server => {\\n        let name = server.name;\\n        let hackColor = ns.hasRootAccess(name) ? \\\"lime\\\" : \\\"red\\\";\\n        let nameColor = facServers[name] ? facServers[name] : \\\"white\\\";\\n        \\n        let hoverText = [\\\"Req Level: \\\", ns.getServerRequiredHackingLevel(name),\\n            \\\"&#10;Req Ports: \\\", ns.getServerNumPortsRequired(name),\\n            \\\"&#10;Memory: \\\", ns.getServerRam(name)[0], \\\"GB\\\",\\n            \\\"&#10;Security: \\\", ns.getServerSecurityLevel(name),\\n            \\\"/\\\", ns.getServerMinSecurityLevel(name),\\n            \\\"&#10;Money: \\\", Math.round(ns.getServerMoneyAvailable(name)).toLocaleString(), \\\" (\\\", \\n            Math.round(100 * ns.getServerMoneyAvailable(name)/ns.getServerMaxMoney(name)), \\\"%)\\\"\\n            ].join(\\\"\\\");\\n        \\n        let ctText = \\\"\\\";\\n        ns.ls(name, \\\".cct\\\").forEach(ctName => {\\n            ctText += [\\\"<a title='\\\", ctName,\\n                //Comment out the next line to reduce footprint by 5 GB\\n                \\\"&#10;\\\", ns.codingcontract.getContractType(ctName, name),\\n                \\\"'>©</a>\\\"].join(\\\"\\\"); \\n        });\\n               \\n        output += [\\\"<br>\\\", \\\"---\\\".repeat(server.depth),\\n            `<font color=${hackColor}>■ </font>`,\\n            `<a class='scan-analyze-link' title='${hoverText}''\\n\\n            onClick=\\\"(function()\\n            {\\n                const terminalInput = document.getElementById('terminal-input');\\n                terminalInput.value='home; run connect.js ${name}';\\n                const handler = Object.keys(terminalInput)[1];\\n                terminalInput[handler].onChange({target:terminalInput});\\n                terminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n            })();\\\"\\n        \\n            style='color:${nameColor}'>${name}</a> `,\\n            `<font color='fuchisa'>${ctText}</font>`,\\n            ].join(\\\"\\\");\\n    });\\n\\n    const list = document.getElementById(\\\"terminal\\\");\\n    list.insertAdjacentHTML('beforeend',output);\\n}\",\"filename\":\"scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"scan.js\",\"url\":\"blob:file:///a58e8f2d-6044-43ad-9e68-a055e36b2bc4\",\"moduleSequenceNumber\":1940}],\"dependents\":[],\"ramUsage\":32.75,\"server\":\"home\",\"moduleSequenceNumber\":26465,\"_hash\":\"57aec0ee477ec4450b5d00e83fdb52a7469489cbe3552e0c54056f08fe47fff4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    //*********PARAMS FOR SCRIPT ***************//\\n    var maxSharePer = 0.75                     // maximum percent of a symbol's total stock to buy\\n    var stockBuyPer = 0.6                     //  percent probablity to buy symbol\\n    var stockVolPer = .05                    //   percent stock will move to buy\\n    var moneyKeep = 500000000               //    min money to keep on hand\\n    var minSharePer = 5                    //     min shares to buy\\n    var orderMax = 5000000000             //      max money to spend on a single order\\n    var profPer = 0.05                   //       min profit percentage to sell\\n    var panicPer = 0.99                 //        percentage loss to panic sell at\\n    //*********************************//\\n    while (true) {\\n        ns.disableLog('disableLog');\\n        ns.disableLog('sleep');\\n        ns.disableLog('getServerMoneyAvailable')\\n        var stocks = ns.stock.getSymbols();\\n        for (const stock of stocks) {\\n            var position = ns.stock.getPosition(stock)\\n            if (position[0]) {\\n                ns.print('Position: ' + stock + \\\", \\\" + position[0] + \\\" Profit: \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0', \\\"Long\\\") + ' % ' + ns.nFormat(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]), \\\"0%\\\"));\\n                sellPositions(stock);\\n            }\\n            buyPositions(stock);\\n \\n        }\\n        await ns.sleep(6000);\\n    }\\n    function sellPositions(stock) {\\n        //check profit\\n        if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) >= 1 + profPer && ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") > 100000) {\\n            //sell stock\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" profit!\\\");\\n            ns.stock.sell(stock, position[0]);\\n        } else if (ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") / (position[0] * position[1]) < (1 - panicPer)) {\\n            ns.tprint(\\\"SOLD STOCK \\\" + stock + \\\" for \\\" + ns.nFormat(Math.round(ns.stock.getSaleGain(stock, position[0], \\\"Long\\\") - (position[0] * position[1])), '0,0') + \\\" loss!\\\", \\\"warning\\\");\\n            ns.stock.sell(stock, position[0]);\\n        }\\n    }\\n \\n    function buyPositions(stock) {\\n        var maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position[0];\\n        var askPrice = ns.stock.getAskPrice(stock);\\n        var forecast = ns.stock.getForecast(stock);\\n        var volPer = ns.stock.getVolatility(stock);\\n        var playerMoney = ns.getServerMoneyAvailable('home');\\n        //if the stock will move positive by stockbuyper or more and it will grow stockvolper or more\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n            //check money for one share\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n                var shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, orderMax / askPrice);\\n                ns.stock.buy(stock, Math.min(shares, maxShares));\\n                \\n            }\\n        }\\n    }\\n \\n}\",\"filename\":\"stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocks.js\",\"url\":\"blob:file:///59468c97-deb2-4cf8-85be-801e6c46f1c2\",\"moduleSequenceNumber\":57952}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":26466,\"_hash\":\"044e0cb910b46bf3153a2744f09cc0209d466dfbc4707dbcd87917015cbe453b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tvar thecrimes = [\\\"Shoplift\\\", \\\"Rob Store\\\", \\\"Mug Someone\\\", \\\"Larceny\\\", \\\"Deal Drugs\\\", \\\"Bond Forgery\\\", \\\"Traffick Illegal Arms\\\", \\\"Homicide\\\", \\\"Grand theft Auto\\\", \\\"Kidnap and Ransom\\\", \\\"Assassinate\\\", \\\"Heist\\\"]\\nns.tail()\\n \\n //while (ns.heart.break() < 54000) {\\n      while (true) {\\n\\n\\t var crime = \\\"Homicide\\\";\\n    const estimatedDuration = ns.commitCrime(crime);\\n    await ns.sleep(estimatedDuration);\\n\\n    var timeout = 4200;\\n    while (ns.isBusy()) {\\n        await ns.sleep(200);\\n        timeout -= 200;\\n        if (timeout <= 0) {\\n            ns.tprint(\\\"You've been busy \\\" + format.time(TIMEOUT + timeout) + \\\" since last crime supposedly finished, terminating.\\\")\\n            return;\\n        }\\n    }\\n} \\nns.tprint(\\\"Karma of -54000 Achieved\\\");\\n//bladeburner script placement here\\n\\t\\n}\",\"filename\":\"homeCrimesSingularity.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"homeCrimesSingularity.js\",\"url\":\"blob:file:///0b7be504-0370-4902-a704-f0b743fa0bd4\",\"moduleSequenceNumber\":279}],\"dependents\":[],\"ramUsage\":7.1,\"server\":\"home\",\"moduleSequenceNumber\":26467,\"_hash\":\"578843c0bd6e22dcb02486cfa179500b3ff69af7b17a8a5fd5d9932190e02241\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"commitCrime\",\"cost\":5},{\"type\":\"fn\",\"name\":\"isBusy\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/nwoop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/nwoop.js\",\"url\":\"blob:file:///3f70a268-fdc3-43a1-aaa5-27db09bdf29b\",\"moduleSequenceNumber\":314995}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/summit-uniop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/summit-uniop.js\",\"url\":\"blob:file:///4400639c-99c9-4f83-b113-577f46a8c1fd\",\"moduleSequenceNumber\":1785}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   var server = \\\"clarkinc\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/clarkincop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/clarkincop.js\",\"url\":\"blob:file:///b42584cc-5901-4b7f-9dad-4f7512f7d4f2\",\"moduleSequenceNumber\":470602}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/secondOP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    let target = ns.args[0];\\n    let paths = { \\\"home\\\": \\\"\\\" };\\n    let queue = Object.keys(paths);\\n    let name;\\n    let output;\\n    let pathToTarget;\\n    while ((name = queue.shift())) {\\n        let path = paths[name];\\n        let scanRes = ns.scan(name);\\n        for (let newSv of scanRes) {\\n            if (paths[newSv] === undefined) {\\n                queue.push(newSv);\\n                paths[newSv] = `${path},${newSv}`;\\n                if (newSv == target)\\n                    pathToTarget = paths[newSv].substr(1).split(\\\",\\\");\\n                    \\n            }\\n        }\\n    }\\n    output = \\\"home; \\\";\\n\\n    pathToTarget.forEach(server=> output += \\\" connect \\\" + server + \\\";\\\");\\n\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    terminalInput.value=output;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({target:terminalInput});\\n    terminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n}\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"connect.js\",\"url\":\"blob:file:///6c470025-6462-4311-b0ba-f6339c704c1d\",\"moduleSequenceNumber\":9054}],\"dependents\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":26472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"dom\",\"name\":\"document\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprint(ns.heart.break());\\n\\n}\",\"filename\":\"karma.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"karma.js\",\"url\":\"blob:file:///3e072ace-b712-40c8-a6f7-cd8cec6d25fe\",\"moduleSequenceNumber\":28478}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":26473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"zb-def\\\";   //Host to hack\\n\\n  \\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/OP.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/OP.js\",\"url\":\"blob:file:///bf223de8-b64c-4520-9fc6-e762ccb42ebd\",\"moduleSequenceNumber\":216518}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n   //var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/joesop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/joesop.js\",\"url\":\"blob:https://danielyxie.github.io/03273b9c-ee2c-432a-a19a-86a6c55e983f\",\"moduleSequenceNumber\":540}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n   //var server = \\\"joesguns\\\";   //Host to hack+\\n   //var server = \\\"johnson-ortho\\\";   //Host to hack\\n\\n\\n//var server = \\\"summit-uni\\\";   //Host to hack\\n\\n   //var server = \\\"omnitek\\\";   //Host to hack\\n\\n\\n   //var server = \\\"megacorp\\\";   //Host to hack\\n   //var server = \\\"nwo\\\";   //Host to hack 969\\n   var server = \\\"applied-energetics\\\";\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/700op.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/700op.js\",\"url\":\"blob:file:///84a7d71e-9720-4883-a155-a340cae84f60\",\"moduleSequenceNumber\":58447}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\n   \\n      var server = \\\"omnitek\\\";   //Host to hack 969\\n\\n   \\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/omnitekop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/omnitekop.js\",\"url\":\"blob:file:///8d1e5cd5-003d-4cde-8030-83a05b230be5\",\"moduleSequenceNumber\":4579}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n   var server = \\\"b-and-a\\\";   //Host to hack\\n\\n   var server2 = ns.getHostname(); //Server to run scripts on\\n   var i = 0;\\n   var c = 0;\\n   var player = ns.getPlayer();\\n   var fserver = ns.getServer(server);\\n\\n   var contstantRam = ns.getScriptRam(\\\"/OPScripts/OP.js\\\"); //grabbing script RAM values\\n   var hackscriptRam = ns.getScriptRam(\\\"/OPScripts/OPhack.js\\\");\\n   var growscriptRam = ns.getScriptRam(\\\"/OPScripts/OPgrow.js\\\");\\n   var weakenscriptRam = ns.getScriptRam(\\\"/OPScripts/OPweaken.js\\\");\\n   var maxRam = (ns.getServerMaxRam(server2) - contstantRam); //getting total RAM I can use that doesnt include the OP script\\n   var weakenThreads = (2000 - ((ns.getServerMinSecurityLevel(server)) / 0.05));\\n   var maxGrowThreads = ((maxRam / growscriptRam) - (weakenscriptRam * 2000));\\n   var cs = ns.getServerSecurityLevel(server);\\n   var ms = ns.getServerMinSecurityLevel(server);\\n   var mm = ns.getServerMaxMoney(server);\\n   var ma = ns.getServerMoneyAvailable(server);\\n\\n\\n\\n   //Priming the server.  Max money and Min security must be acheived for this to work\\n   if ((ma < mm) == true) {\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      ns.exec('/OPScripts/OPgrow.js', server2, maxGrowThreads, server, 0);\\n      var WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      mm = ns.getServerMaxMoney(server);\\n      ma = ns.getServerMoneyAvailable(server);\\n      player = ns.getPlayer();\\n      fserver = ns.getServer(server);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n\\n   //If Max Money is true, making sure security level is at its minimum\\n   if ((cs > ms) == true) {\\n\\n      ns.exec('/OPScripts/OPweaken.js', server2, 2000, server, 0);\\n      WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n      await ns.sleep(WeakenTime + 1000);\\n      cs = ns.getServerSecurityLevel(server);\\n      ms = ns.getServerMinSecurityLevel(server);\\n\\n   }\\n\\n   //Refreshing server stats now that the security level is at the minmum, and maybe our player stats have changed as priming can take a while\\n   player = ns.getPlayer();\\n   fserver = ns.getServer(server);\\n\\n   var HPercent = (ns.formulas.hacking.hackPercent(fserver, player) * 100);\\n   var GPercent = (ns.formulas.hacking.growPercent(fserver, 1, player, 1));\\n   WeakenTime = (ns.formulas.hacking.weakenTime(fserver, player));\\n   var GrowTime = (ns.formulas.hacking.growTime(fserver, player));\\n   var HackTime = (ns.formulas.hacking.hackTime(fserver, player));\\n\\n   var growThreads = Math.round(((5 / (GPercent - 1)))); //Getting the amount of threads I need to grow 200%.  I only need 100% but I'm being conservative here\\n   var hackThreads = Math.round((50 / HPercent));  //Getting the amount of threads I need to hack 50% of the funds\\n   weakenThreads = Math.round((weakenThreads - (growThreads * 0.004))); //Getting required threads to fully weaken the server\\n\\n   var totalRamForRun = (hackscriptRam * hackThreads) + (growscriptRam * growThreads) + (weakenscriptRam * weakenThreads) //Calculating how much RAM is used for a single run\\n   var sleepTime = (WeakenTime / (maxRam / totalRamForRun)) //finding how many runs this server can handle and setting the time between run execution\\n\\n   //if (sleepTime<500) // Testing forcing a min sleep time of 500 ms\\n   //{sleepTime = 500;\\n   //}\\n\\n   var shiftCount = maxRam / totalRamForRun;\\n   var offset = sleepTime / 2\\n   var gOffset = offset / 4\\n   var hOffset = offset / 2\\n\\n\\n   while (true) {\\n      var wsleep = 0; //At one point I made the weaken call sleep so I've kept it around\\n      var gsleep = ((WeakenTime - GrowTime - gOffset)); //Getting the time to have the Growth execution sleep, then shaving some off to beat the weaken execution\\n      var hsleep = ((WeakenTime - HackTime - hOffset)); //Getting time for hack, shaving off more to make sure it beats both weaken and growth\\n      var UsedRam = ns.getServerUsedRam(server2);\\n\\n\\n      if ((totalRamForRun >= (maxRam - UsedRam)) == false) //making sure I have enough RAM to do a full run\\n      {\\n         ns.exec('/OPScripts/OPweaken.js', server2, weakenThreads, server, wsleep, i);\\n         ns.exec('/OPScripts/OPgrow.js', server2, growThreads, server, gsleep, i);\\n         ns.exec('/OPScripts/OPhack.js', server2, hackThreads, server, hsleep, i);\\n\\n         if (c < shiftCount) {\\n            await ns.sleep(sleepTime)\\n            c++\\n         }\\n         else {\\n            await ns.sleep(sleepTime + offset);\\n            c = 0;\\n         }\\n\\n\\n         i++\\n      }\\n      else {\\n         await ns.sleep(1000)\\n      }\\n   }\\n   await ns.sleep(120000)\\n}\",\"filename\":\"/OPScripts/bandaop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/OPScripts/bandaop.js\",\"url\":\"blob:file:///aac7038b-6db0-4489-89c5-11583a6b6e0b\",\"moduleSequenceNumber\":385021}],\"dependents\":[],\"ramUsage\":6.05,\"server\":\"home\",\"moduleSequenceNumber\":26478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const TASK_TRAIN = \\\"Train Combat\\\";\\nconst TASK_VIGI = \\\"Vigilante Justice\\\";\\nconst TASK_NOOB = String.fromCharCode(77) + \\\"ug People\\\";\\nconst TASK_RESPECT = String.fromCharCode(84) + \\\"errorism\\\";\\nconst TASK_MONEY = \\\"Human \\\" + String.fromCharCode(84) + \\\"rafficking\\\";\\nconst TASK_WARFARE = \\\"Territory Warfare\\\";\\nconst TASK_NULL = \\\"Unassigned\\\";\\nconst TASK_MANUAL = \\\"Manual/NotReallyTaskName\\\";\\n\\nconst ASCEND_ON_MPL = 5;\\nconst EQUIP_AFFORD_COEFF = 100;\\n\\nconst STATS_TRESHOLD = 0.7;\\nconst STATS_MIN = 4000;\\nconst STATS_HARD_MIN = 200;\\nconst TRAIN_CHANCE = 0.2;\\nconst RESPECT_MIN = 2e+6;\\n\\nconst WANTED_PENALTY_TRESHOLD = 0.99;\\nconst WARFARE_TRESHOLD = 2;\\n\\nconst MEMBERS_MIN = 6;\\nconst MEMBERS_MAX = 12;\\n\\nconst SLEEP_TIME = 10000;\\nconst MEMBERS = [\\\"Sansa\\\", \\\"Jon\\\", \\\"Arya\\\", \\\"Tyrion\\\", \\\"Jorah\\\", \\\"Samwell\\\", \\\"Brienne\\\", \\\"Sandor\\\", \\\"Bran\\\", \\\"Bronn\\\", \\\"Tormund\\\", \\\"Hodor\\\"];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tconst gang = ns.gang;\\n\\t// Get weighted stats sum (at this moment, sum of combat stats in eq proportions) \\n\\tfunction getStatsSum(member) {\\n\\t\\tconst info = gang.getMemberInformation(member);\\n\\t\\treturn info.str + info.def + info.dex + info.agi;\\n\\t}\\n\\t// Find the best gang power except our gang\\n\\tfunction maxEnemyPower(myGang) {\\n\\t\\tconst others = ns.gang.getOtherGangInformation();\\n\\t\\tlet maxPower = 0;\\n\\t\\tfor (let name in others) {\\n\\t\\t\\tif (name === myGang.faction) continue;\\n\\t\\t\\tmaxPower = Math.max(maxPower, others[name].power);\\n\\t\\t}\\n\\t\\treturn maxPower;\\n\\t}\\n\\t// Set a task or not to set (if manually overridden)\\n\\tconst autoTasks = {}\\n\\tfunction setAutoTask(member, task) {\\n\\t\\tconst info = gang.getMemberInformation(member);\\n\\t\\tconst lastTask = info.task;\\n\\t\\t// Manual task: stored task mismatches real task and not unassigned\\n\\t\\tif (lastTask !== TASK_NULL && autoTasks.hasOwnProperty(member) && autoTasks[member] !== lastTask) {\\n\\t\\t\\tautoTasks[member] = TASK_MANUAL;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t// Automatic task: set it if differs from real one\\n\\t\\tautoTasks[member] = task;\\n\\t\\tif (lastTask !== task) {\\n\\t\\t\\tgang.setMemberTask(member, task);\\n\\t\\t}\\n\\t}\\n\\t// The script accepts argument for default task override (optional)\\n\\tlet defaultTask = null;\\n\\tif (ns.args[0] && gang.getTaskNames().includes(ns.args[0])) {\\n\\t\\tdefaultTask = ns.args[0];\\n\\t}\\n\\t// Main loop\\n\\tfor (;;) {\\n\\t\\t// Recruit any member possible \\n\\t\\twhile (gang.canRecruitMember()) {\\n\\t\\t\\tgang.recruitMember('member' + Math.random().toString().substr(2,3));\\n\\t\\t}\\n\\t\\tlet bestStats = STATS_MIN / STATS_TRESHOLD; // minimum\\n\\t\\tconst members = gang.getMemberNames();\\n\\t\\tconst info = gang.getGangInformation();\\n\\t\\t// Ascend if good enough\\n\\t\\tfor (let member of members) {\\n\\t\\t\\tconst r = gang.getAscensionResult(member);\\n\\t\\t\\tif (!r) continue;\\n\\t\\t\\tconst mpl = r.agi * r.def * r.dex * r.str;\\n\\t\\t\\tif (mpl > ASCEND_ON_MPL) {\\n\\t\\t\\t\\tgang.ascendMember(member);\\n\\t\\t\\t\\tns.tprint(`Member ${member} ascended!`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Purchase equipment \\n\\t\\tconst allEquip = gang.getEquipmentNames();\\n\\t\\tlet money = ns.getServerMoneyAvailable('home');\\n\\t\\tfor (let equip of allEquip) {\\n\\t\\t\\tconst cost = gang.getEquipmentCost(equip);\\n\\t\\t\\tconst amount = money/cost;\\n\\t\\t\\tif (amount < EQUIP_AFFORD_COEFF) continue;\\n\\t\\t\\tfor (let member of members) {\\n\\t\\t\\t\\tconst info = gang.getMemberInformation(member);\\n\\t\\t\\t\\tif (info.upgrades.includes(equip) || info.augmentations.includes(equip)) continue;\\n\\t\\t\\t\\tif (gang.purchaseEquipment(member, equip)) {\\n\\t\\t\\t\\t\\tmoney -= cost;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Find best stats\\n\\t\\tfor (let member of members) {\\n\\t\\t\\tlet sum = getStatsSum(member);\\n\\t\\t\\tif (sum > bestStats) bestStats = sum;\\n\\t\\t}\\n\\t\\t// Check if we are powerful enough\\n\\t\\tlet powerfulEnough = info.power >= maxEnemyPower(info) * WARFARE_TRESHOLD;\\n\\t\\tgang.setTerritoryWarfare(powerfulEnough);\\n\\t\\t// Choose the default task for members\\n\\t\\tlet task = defaultTask;\\n\\t\\tif (!defaultTask) {\\n\\t\\t\\t// If gang isn't full - gain respect\\n\\t\\t\\tif (members.length < MEMBERS_MAX) {\\n\\t\\t\\t\\ttask = (members.length < MEMBERS_MIN) ? TASK_NOOB : TASK_RESPECT;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if respect too low - gain it first, power second, money last\\n\\t\\t\\t\\tif (info.respect < RESPECT_MIN) {\\n\\t\\t\\t\\t\\ttask = TASK_RESPECT;\\n\\t\\t\\t\\t} else if (!powerfulEnough) {\\n\\t\\t\\t\\t\\ttask = TASK_WARFARE;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttask = TASK_MONEY;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Assign tasks\\n\\t\\tfor (let member of members) {\\n\\t\\t\\tlet sum = getStatsSum(member);\\n\\t\\t\\t// Train members, not acceptable in 'noob mode'\\n\\t\\t\\tif (sum < STATS_HARD_MIN || (members.length >= MEMBERS_MIN && sum < bestStats * STATS_TRESHOLD)) {\\n\\t\\t\\t\\tsetAutoTask(member, TASK_TRAIN);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t// Vigi if wanted penalty too large\\n\\t\\t\\tif (info.wantedLevel > 2 && info.wantedPenalty < WANTED_PENALTY_TRESHOLD) {\\n\\t\\t\\t\\tsetAutoTask(member, TASK_VIGI);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t// Do the default task (autoselected or called with args[0])\\n\\t\\t\\tsetAutoTask(member, Math.random() < TRAIN_CHANCE ? TASK_TRAIN : task);\\n\\t\\t}\\n\\t\\tawait ns.sleep(SLEEP_TIME);\\n\\t}\\n}\",\"filename\":\"cbGang.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"cbGang.js\",\"url\":\"blob:https://danielyxie.github.io/501b6d69-cce6-4f88-8257-a098b24aa09d\",\"moduleSequenceNumber\":7860}],\"dependents\":[],\"ramUsage\":29.7,\"server\":\"home\",\"moduleSequenceNumber\":26479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getTaskNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getEquipmentNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const commission = 100000;\\nconst samplingLength = 30;\\n\\nfunction predictState(samples) {\\n  const limits = [null, null, null, null, null, null, 6, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20];\\n  let inc = 0;\\n  for (let i = 0; i < samples.length; ++i) {\\n    const total = i + 1;\\n    const idx = samples.length - total;\\n    if (samples[idx] > 1.) {\\n      ++inc;\\n    }\\n    const limit = limits[i];\\n    if (limit === null) {\\n      continue;\\n    }\\n    if (inc >= limit) {\\n      return 1;\\n    }\\n    if ((total-inc) >= limit) {\\n      return -1;\\n    }\\n  }\\n  return 0;\\n}\\n\\nfunction format(money) {\\n    const prefixes = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\"];\\n    for (let i = 0; i < prefixes.length; i++) {\\n        if (Math.abs(money) < 1000) {\\n            return `${Math.floor(money * 10) / 10}${prefixes[i]}`;\\n        } else {\\n            money /= 1000;\\n        }\\n    }\\n    return `${Math.floor(money * 10) / 10}${prefixes[prefixes.length - 1]}`;\\n}\\n\\nfunction posNegDiff(samples) {\\n  const pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n  return Math.abs(samples.length - 2*pos);\\n}\\n\\nfunction posNegRatio(samples) {\\n  const pos = samples.reduce((acc, curr) => acc + (curr > 1. ? 1 : 0), 0);\\n  return Math.round(100*(2*pos / samples.length - 1));\\n}\\n\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    let symLastPrice = {};\\n    let symChanges = {};\\n    for (const sym of ns.stock.getSymbols()) {\\n      symLastPrice[sym] = ns.stock.getPrice(sym);\\n      symChanges[sym] = []\\n    }\\n\\n    while (true) {\\n        await ns.sleep(2000);\\n\\n        if (symLastPrice['FSIG'] === ns.stock.getPrice('FSIG')) {\\n          continue;\\n        }\\n\\n        for (const sym of ns.stock.getSymbols()) {\\n          const current = ns.stock.getPrice(sym);\\n          symChanges[sym].push(current/symLastPrice[sym]);\\n          symLastPrice[sym] = current;\\n          if (symChanges[sym].length > samplingLength) {\\n            symChanges[sym] = symChanges[sym].slice(symChanges[sym].length - samplingLength);\\n          }\\n        }\\n\\n        const prioritizedSymbols = [...ns.stock.getSymbols()];\\n        prioritizedSymbols.sort((a, b) => posNegDiff(symChanges[b]) - posNegDiff(symChanges[a]));\\n        \\n        for (const sym of prioritizedSymbols) {\\n          const positions = ns.stock.getPosition(sym);\\n          const longShares = positions[0];\\n          const longPrice = positions[1];\\n          const shortShares = positions[2];\\n          const shortPrice = positions[3];\\n          const state = predictState(symChanges[sym]);\\n          const ratio = posNegRatio(symChanges[sym]);\\n          const bidPrice = ns.stock.getBidPrice(sym);\\n          const askPrice = ns.stock.getAskPrice(sym);\\n          if (longShares <= 0 && shortShares <= 0 && ns.stock.getPrice(sym) < 30000) {\\n            continue;\\n          }\\n\\n          if (longShares > 0) {\\n            const cost = longShares * longPrice;\\n            const profit = longShares * (bidPrice - longPrice) - 2 * commission;\\n            if (state < 0) {\\n              const sellPrice = ns.stock.sell(sym, longShares);\\n              if (sellPrice > 0) {\\n                  ns.print(`SOLD (long) ${sym}. Profit: ${format(profit)}`);\\n              }\\n            } else {\\n                ns.print(`${sym} (${ratio}): ${format(profit+cost)} / ${format(profit)} (${Math.round(profit/cost*10000)/100}%)`);\\n            }\\n          } else if (shortShares > 0) {\\n            const cost = shortShares * shortPrice;\\n            const profit = shortShares * (shortPrice - askPrice) - 2 * commission;\\n            if (state > 0) {\\n              const sellPrice = ns.stock.sellShort(sym, shortShares);\\n              if (sellPrice > 0) {\\n                  ns.tprint(`SOLD (short) ${sym}. Profit: ${format(profit)}`);\\n              }\\n            } else {\\n                ns.print(`${sym} (${ratio}): ${format(profit+cost)} / ${format(profit)} (${Math.round(profit/cost*10000)/100}%)`);\\n            }\\n          } else {\\n            const money = ns.getServerMoneyAvailable(\\\"home\\\");\\n            if (state > 0) {\\n              const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / askPrice));\\n              if (ns.stock.buy(sym, sharesToBuy) > 0) {\\n                  ns.print(`BOUGHT (long) ${sym}.`);\\n              }\\n            } else if (state < 0) {\\n              const sharesToBuy = Math.min(10000, ns.stock.getMaxShares(sym), Math.floor((money - commission) / bidPrice));\\n              if (ns.stock.short(sym, sharesToBuy) > 0) {\\n                  ns.print(`BOUGHT (short) ${sym}.`);\\n              }\\n            }\\n          }\\n        }\\n    }\\n}\",\"filename\":\"earlystock.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlystock.js\",\"url\":\"blob:file:///d5cb9598-3ae1-46d2-87ff-e51f8456f919\",\"moduleSequenceNumber\":132}],\"dependents\":[],\"ramUsage\":23.7,\"server\":\"home\",\"moduleSequenceNumber\":26480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getBidPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellShort\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.short\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Requires access to the TIX API and the 4S Mkt Data API\\nconst THRESHOLD_CASH_GOAL = 0.05; // Fraction of cash to aim to keep in hand\\nconst THRESHOLD_CASH_LOW = 0.001; // Fraction of cash in hand sale back to goal threshold\\n \\n// Probability stock will increase is a value between 0 and 1.\\nconst THRESHOLD_SELL = 0.5; // Probability we should start sell at if under. \\nconst THRESHOLD_BUY = 0.5; // Probability we should start buying at if over\\n \\nconst COMMISSION = 100000; //Buy or sell commission\\nconst REFRESH = 5200; // time to wait between stock price refreshes\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tail();\\n    let rollingProfit = 0;\\n    if (ns.args[0] == \\\"sellall\\\") {\\n        ns.tprint(\\\"selling all stocks\\\");\\n        const allStocks = refreshStocks(ns);\\n        allStocks.filter((stk) => stk.shares > 0).forEach((stk) =>{\\n            rollingProfit += sell(ns, stk, stk.shares, true);\\n        });\\n        ns.tprint(`made ~${format(rollingProfit)}`);\\n        return;\\n    }\\n    //Initialise\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        let i;\\n\\n        // get current stock info with highest return chance first.\\n        const allStocks = refreshStocks(ns);\\n        // get my stocks but sorted by weakest return chance\\n        const myStocks = allStocks.filter((stock) => stock.shares > 0).sort(function (a, b) { return a.prob - b.prob });\\n        const holdingPrice = allStocks.reduce((prev, stock) => prev += (stock.price * stock.shares), 0);\\n        const boughtPrice = allStocks.reduce((prev, stock) => prev += (stock.avgBuyPrice * stock.shares), 0);\\n        ns.print(`holding ${format(holdingPrice)} for current gain of ${format(holdingPrice - boughtPrice)}`);\\n        let corpus = ns.getServerMoneyAvailable(\\\"home\\\") + holdingPrice;\\n        ns.print(`corpus ${format(corpus)}`);\\n        ns.print(`actual profit: ${format(rollingProfit)}`);\\n \\n        //Sell underperforming shares\\n        myStocks.forEach((stock) => {\\n            if (stock.prob < THRESHOLD_SELL) {\\n                rollingProfit += sell(ns, stock, stock.shares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n \\n        // Sell shares if not enough cash in hand (start lowest return);\\n        myStocks.forEach((stock) => {\\n            const homeMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n            if (homeMoney < (THRESHOLD_CASH_LOW * corpus)) {\\n                ns.print(`need money, selling stocks`);\\n                let cashNeeded = (corpus * THRESHOLD_CASH_GOAL - homeMoney + COMMISSION);\\n                let numShares = Math.floor(cashNeeded / stock.price);\\n                rollingProfit += sell(ns, myStocks[i], numShares);\\n                corpus -= COMMISSION;\\n            }\\n        });\\n \\n        //Buy shares with cash remaining in hand\\n        let cashToSpend = ns.getServerMoneyAvailable(\\\"home\\\") - (corpus * THRESHOLD_CASH_GOAL);\\n        allStocks.filter((stock)=> (stock.prob > THRESHOLD_BUY && stock.remainingShares > 0)).forEach((stock)=>{\\n            let numShares = Math.min(Math.floor((cashToSpend - COMMISSION) / stock.price), stock.remainingShares);\\n            if (numShares > 0) {\\n                const spent = buy(ns, stock, numShares);\\n                cashToSpend -= spent;\\n            }\\n        });\\n        await ns.sleep(REFRESH);\\n    }\\n}\\n \\n/** @param {NS} ns **/\\nfunction refreshStocks(ns) {\\n    return ns.stock.getSymbols().map((sym)=> {\\n\\n        const position = ns.stock.getPosition(sym);\\n        const price = ns.stock.getPrice(sym);\\n        const shares = position[0];\\n        const avgBuyPrice = position[1];\\n        const prob = ns.stock.getForecast(sym);\\n        const remainingShares = ns.stock.getMaxShares(sym) - shares;\\n        return {\\n            sym,\\n            price,\\n            shares,\\n            avgBuyPrice,\\n            prob,\\n            remainingShares\\n        };\\n    }).sort(function (a, b) { return b.prob - a.prob });\\n}\\n \\n/** @param {NS} ns **/\\nfunction buy(ns, stock, numShares) {\\n    const price = ns.stock.buy(stock.sym, numShares);\\n    ns.print(`Bought ${stock.sym} for ${format(numShares * stock.price)}`);\\n    return price * numShares + COMMISSION;\\n}\\n \\n/** @param {NS} ns **/\\nfunction sell(ns, stock, numShares, isSellAll) {\\n    let profit = numShares * (stock.price - stock.avgBuyPrice) - 2 * COMMISSION;\\n    if (!isSellAll) {\\n        ns.print(`Sold ${stock.sym} for profit of ${format(profit)}`);\\n    } else {\\n        ns.tprint(`Sold ${stock.sym} for profit of ${format(profit)}`);\\n    }\\n    ns.stock.sell(stock.sym, numShares);\\n    return profit;\\n}\\n \\nfunction format(num) {\\n    let symbols = [\\\"\\\", \\\"K\\\", \\\"M\\\", \\\"B\\\", \\\"T\\\", \\\"Qa\\\", \\\"Qi\\\", \\\"Sx\\\", \\\"Sp\\\", \\\"Oc\\\"];\\n    let i;\\n    for (i = 0; (Math.abs(num) >= 1000) && (i < symbols.length); i++) {\\n        num /= 1000;\\n    } \\n    return ((Math.sign(num) < 0) ? \\\"-$\\\" : \\\"$\\\") + Math.abs(num.toFixed(3)) + symbols[i];\\n}\",\"filename\":\"4stocks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"4stocks.js\",\"url\":\"blob:file:///45f4785b-3c55-49be-b977-51f72c4b0bc4\",\"moduleSequenceNumber\":36231}],\"dependents\":[],\"ramUsage\":17.2,\"server\":\"home\",\"moduleSequenceNumber\":26481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tvar charInfo = ns.getPlayer()\\n\\tvar agility = 0;\\n\\twhile(agility < 100){\\n\\tawait ns.gymWorkout(\\\"powerhouse gym\\\",\\\"agility\\\",true)\\n\\t\\tcharInfo =  ns.getPlayer();\\n\\t \\tagility = charInfo.agility;\\n\\t\\tns.print(agility)\\n\\t\\tns.sleep(1000);\\n\\t}\\n\\tns.print(charInfo)\\n}\",\"filename\":\"bitburner.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bitburner.js\",\"url\":\"blob:file:///e20f0975-a292-4c99-aee7-40040bf110f2\",\"moduleSequenceNumber\":16142}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":26482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog(\\\"sleep\\\")\\n\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"strength\\\", false)\\n\\tns.print(\\\"Training Strength\\\")\\n\\twhile (ns.getPlayer().strength < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"defense\\\", false)\\n\\tns.print(\\\"Training Defense\\\")\\n\\n\\twhile (ns.getPlayer().defense < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"dexterity\\\", false)\\n\\tns.print(\\\"Training Dexterity\\\")\\n\\n\\twhile (ns.getPlayer().dexterity < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"agility\\\", false)\\n\\tns.print(\\\"Training Agility\\\")\\n\\n\\twhile (ns.getPlayer().agility < 70) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.tprint(\\\"Trained up ready for bad karma!\\\")\\n\\tns.run(\\\"homeCrimesSingularity.js\\\", 1)\\n\\n\\n\\n}\",\"filename\":\"blade.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"blade.js\",\"url\":\"blob:https://danielyxie.github.io/40fe7af0-22fb-4397-b5ac-540ba9086385\",\"moduleSequenceNumber\":26538}],\"dependents\":[],\"ramUsage\":5.1,\"server\":\"home\",\"moduleSequenceNumber\":26538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n    const argsSchema = [\\n        ['trips-per-cycle', 100000],\\n        ['money-threshold', 1000000000000]\\n    ];\\n\\n    /** @param {NS} ns \\n     * Script contributed by https://github.com/ShawnPatton\\n     * Concept: A small amount of intelligence is granted when you (successfully) travel to a new city. This script converts money into intelligence exp! **/\\n    ns.tail();\\n    let options = ns.flags(argsSchema);\\n    let tripsPerCycle = options['trips-per-cycle'];\\n    let moneyThreshold = options['money-threshold'];\\n    ns.tprint(`trips-per-cycle: ` + tripsPerCycle);\\n    ns.tprint(`money-threshold: ` + formatMoney(moneyThreshold));\\n    let justStarted = true;\\n    let previousInt = ns.getPlayer().intelligence;\\n    let currentInt = previousInt;\\n    let previousLevelTime = Date.now();\\n    let levelupTime;\\n    let cycles = 0;\\n    let duration = 0;\\n    let tripsPerLevel = 0;\\n    let tripsPerMs = 0;\\n    ns.tprint(`Starting Script at Int ` + currentInt);\\n    while (true) {\\n        while (ns.getPlayer().money > moneyThreshold) {\\n            for (let i = 0; i < tripsPerCycle; i++) {\\n                ns.travelToCity(\\\"Aevum\\\");\\n                ns.travelToCity(\\\"Sector-12\\\");\\n            }\\n            await ns.sleep(1);\\n            cycles++;\\n            if (previousInt != ns.getPlayer().intelligence) {\\n                currentInt = ns.getPlayer().intelligence;\\n                levelupTime = Date.now();\\n                duration = levelupTime - previousLevelTime;\\n                tripsPerLevel = cycles * tripsPerCycle * 2;\\n                tripsPerMs = Math.floor(tripsPerLevel / duration);\\n                ns.tprint(`Level Up: Int ` + currentInt + (justStarted ? ` Partial` : ` Full`) + ` Level in `\\n                    + formatDuration(duration) + ` & ` + formatNumberShort(tripsPerLevel) + ` Travels`);\\n                ns.tprint(`Approximately ` + tripsPerMs + ` Trips/Millisecond`);\\n                previousLevelTime = levelupTime;\\n                previousInt = currentInt;\\n                justStarted = false;\\n                cycles = 0;\\n            }\\n        }\\n        await ns.sleep(10000);\\n        ns.print(`Below money threshold, waiting 10 seconds`);\\n    }\\n}\\n\\n\\nfunction autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    return [];\\n}\\nfunction formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\nfunction formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\nfunction formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounted to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\",\"filename\":\"int-farm.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"int-farm.js\",\"url\":\"blob:file:///68d74d32-cf9f-4e5b-a9f0-78c52960b164\",\"moduleSequenceNumber\":44386}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":26484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"travelToCity\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const MoneyFormat = '$0.0a';\\nconst TimeFormat = '00:00:00';\\n\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n\\n    /*\\n    ns.hacknet-auto.script for Bitburner v0.47.2\\n    Winners don't use copyright\\n    \\n    Latest version of this script should be at\\n        https://github.com/iuriguilherme/netscripts.d\\n    Bitburner should be at https://github.com/danielyxie/bitburner\\n    \\n    This script requires 5.70 GB of RAM to run for 1 thread(s)\\n    \\n    This script will buy a ns.hacknet Node, fully upgrade it and then buy the next\\n    one in an infinite loop. If the cost of the next upgrade is higher than \\n    buying a new ns.hacknet Node, then a new one will be bought before the last one\\n    is upgraded. There is an option to set the budget limit.\\n*/\\n\\n    // We will not buy anything if there's less money than this ammount\\n    var reserveMoney = 2000;\\n    // Number of times to upgrade (shouldn't have to change this)\\n    var n = 1;\\n\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n\\n    ns.tail();\\n\\n    ns.print('Waiting to purchase next upgrade...');\\n\\n    // Buy first ns.hacknetNode if there are none\\n    if (\\n        ns.hacknet.numNodes() === 0 &&\\n        ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney\\n    ) {\\n        ns.hacknet.purchaseNode();\\n        displayDashBoard(ns);\\n    }\\n\\n    // If there are no ns.hacknet Nodes, we can't do anything, so the script ends.\\n    while (ns.hacknet.numNodes() > 0) {\\n        // If there is not enough money, we wait for it instead of ending the loop.\\n        while (ns.getServerMoneyAvailable(\\\"home\\\") >= reserveMoney) {\\n            for (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n                while (\\n                    ns.hacknet.getLevelUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeLevel(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getRamUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeRam(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n                while (\\n                    ns.hacknet.getCoreUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeCore(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n                 while (\\n                    ns.hacknet.getCacheUpgradeCost(i, n) < Infinity &&\\n                    ns.hacknet.upgradeCache(i, n)\\n                ) {\\n                    displayDashBoard(ns);\\n                    await ns.sleep(100);\\n                }\\n            } // END for (i = 0; i < ns.hacknet.numNodes(); i++)\\n            /*\\n                Buy next ns.hacknet Node if the last one is already fully upgraded.\\n                If for some reason the last ns.hacknet Node is fully upgraded and the\\n                others don't, the loop above will still attempt to upgrade them all.\\n            */\\n            if (\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) === Infinity &&\\n                ns.hacknet.getCacheUpgradeCost((ns.hacknet.numNodes()-1),n) === Infinity\\n            ) {\\n                // Only buy nodes up to 20. Past that its not really worth it.\\n                if (ns.hacknet.numNodes() < 20) {\\n                    ns.hacknet.purchaseNode();\\n\\n                    displayDashBoard(ns);\\n                }\\n            } else if (\\n                /*\\n                Or buy the next ns.hacknet Node if the next upgrade is more expensive\\n                than buying a new ns.hacknet Node.\\n                */\\n                ns.hacknet.getLevelUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getRamUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getCoreUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost() &&\\n                ns.hacknet.getCacheUpgradeCost((ns.hacknet.numNodes() - 1), n) > ns.hacknet.getPurchaseNodeCost()\\n\\n            ) {\\n                ns.hacknet.purchaseNode();\\n\\n                displayDashBoard(ns);\\n            }\\n            await ns.sleep(100);\\n        }\\n        await ns.sleep(100);\\n    }\\n};\\n\\n/** @param {import(\\\".\\\").NS } ns */\\nfunction displayDashBoard(ns) {\\n\\n    ns.clearLog();\\n    let nodes = Array(ns.hacknet.numNodes()).fill(0);\\n    let maxNodes = ns.hacknet.numNodes() < 20 ? 20 : Infinity\\n    ns.print(`Nodes: ${nodes.length} of ${maxNodes}`);\\n    ns.print(`Total Production: ${nodes.length === 0 ? \\\"$0 /s\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).production).reduce((a, b) => a + b), MoneyFormat)} /s`)\\n    ns.print(`Total Produced: ${nodes.length === 0 ? \\\"$0\\\" : ns.nFormat(nodes.map((v, i) => ns.hacknet.getNodeStats(i).totalProduction).reduce((a, b) => a + b), MoneyFormat)}`)\\n    ns.print(table(\\n        [\\\"Node\\\", \\\"Produced\\\", \\\"Uptime\\\", \\\"Production\\\", \\\"Lv\\\", \\\"RAM\\\", \\\"Cores\\\",\\\"Cache\\\"],\\n        nodes.map((v, i) => ns.hacknet.getNodeStats(i).name),\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).totalProduction, MoneyFormat)),\\n        nodes.map((v, i) => ns.nFormat(ns.hacknet.getNodeStats(i).timeOnline, TimeFormat)),\\n        nodes.map((v, i) => `${ns.nFormat(ns.hacknet.getNodeStats(i).production, MoneyFormat)} /s`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).level}`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).ram}`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).cores}`),\\n        nodes.map((v, i) => `${ns.hacknet.getNodeStats(i).cache}`),      \\n    ));\\n}\\n\\nconst MaxReducer = (a, b) => a > b ? a : b;\\n\\n/**\\n * Create a Table display of the provided data\\n * @param {string[]} headers Column Headers\\n * @param  {...string[]} columns Column data\\n */\\nfunction table(headers, ...columns) {\\n    // Calculate Column Widths\\n    let widths = [];\\n    // for (let i = 0; i < columns.length; i++) {\\n    //     widths[i] = columns[i].concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\n    // }\\n    columns.forEach((c, i) => {\\n        widths[i] = c.concat([headers[i]]).map(s => s.length).reduce(MaxReducer);\\n    });\\n\\n    let output = \\\"\\\\n\\\";\\n\\n    // Write Headers\\n    headers.forEach((h, i) => {\\n        output += ` ${h.padEnd(widths[i], \\\" \\\")} |`;\\n    });\\n\\n    output += \\\"\\\\n\\\";\\n\\n    // Write Separator\\n    headers.forEach((h, i) => {\\n        output += `${\\\"\\\".padEnd(widths[i] + 2, \\\"=\\\")}|`;\\n    });\\n\\n    output += \\\"\\\\n\\\";\\n\\n    let rows = columns[0].length;\\n    for (let row = 0; row < rows; row++) {\\n        columns.forEach((c, i) => {\\n            if (c[row] == \\\"-\\\") {\\n                output += ` ${\\\"\\\".padEnd(widths[i], \\\"-\\\")} |`;\\n            } else {\\n                output += ` ${c[row].padEnd(widths[i], \\\" \\\")} |`;\\n            }\\n        });\\n\\n        output += \\\"\\\\n\\\";\\n    }\\n\\n    return output;\\n}\",\"filename\":\"hacknetNode.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hacknetNode.js\",\"url\":\"blob:https://danielyxie.github.io/1466b173-6ef5-44ee-aa43-87cd33b3004d\",\"moduleSequenceNumber\":4457}],\"dependents\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":26485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const getPortsNum = ns => {\\r\\n    const portBusters = [\\r\\n      'BruteSSH.exe',\\r\\n      'FTPCrack.exe',\\r\\n      'relaySMTP.exe',\\r\\n      'HTTPWorm.exe',\\r\\n      'SQLInject.exe',\\r\\n    ];\\r\\n    let ports = 0;\\r\\n    for (const buster of portBusters) {\\r\\n      if (ns.fileExists(buster)) {\\r\\n        ports++;\\r\\n      }\\r\\n    }\\r\\n    return ports;\\r\\n  };\\r\\n  \\r\\n  const getMoney = ns => {\\r\\n    return ns.getServerMoneyAvailable('home');\\r\\n  };\\r\\n  \\r\\n  function buyPrograms(ns) {\\r\\n    const portBusters = [\\r\\n      {\\r\\n        name: 'BruteSSH.exe',\\r\\n        cost: 500000,\\r\\n      },\\r\\n      {\\r\\n        name: 'FTPCrack.exe',\\r\\n        cost: 1500000,\\r\\n      },\\r\\n      {\\r\\n        name: 'relaySMTP.exe',\\r\\n        cost: 5000000,\\r\\n      },\\r\\n      {\\r\\n        name: 'HTTPWorm.exe',\\r\\n        cost: 30000000,\\r\\n      },\\r\\n      {\\r\\n        name: 'SQLInject.exe',\\r\\n        cost: 250000000,\\r\\n      },\\r\\n    ];\\r\\n    for (const buster of portBusters) {\\r\\n      const money = getMoney(ns);\\r\\n      if (!ns.fileExists(buster.name) && money > buster.cost) {\\r\\n        ns.purchaseProgram(buster.name);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  export async function main(ns) {\\r\\n    while (getMoney(ns) < 200000) {\\r\\n      // Waiting for money\\r\\n      await ns.sleep(100);\\r\\n    }\\r\\n    ns.purchaseTor();\\r\\n  \\r\\n    while (getPortsNum(ns) !== 5) {\\r\\n      buyPrograms(ns);\\r\\n      await ns.sleep(500);\\r\\n    }\\r\\n  }\",\"filename\":\"/src/buyPrograms.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":26486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":2},{\"type\":\"fn\",\"name\":\"purchaseTor\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tns.tail();\\r\\n\\tns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n\\tconst CorpApi = eval(\\\"ns.corporation\\\");\\r\\n\\tconst corpName = \\\"Limitless\\\";\\r\\n\\tconst argDivision = \\\"Agriculture\\\";\\r\\n\\tconst tobDivision = \\\"Tobacco\\\";\\r\\n\\tconst mainCity = \\\"Sector-12\\\";\\r\\n\\tconst hire3Employees = 3;\\r\\n\\tconst startUpJobs = [\\\"Operations\\\", \\\"Engineer\\\", \\\"Business\\\"]\\r\\n\\tconst citiesToExpandTo = [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"]\\r\\n\\tvar agricultureProducts = [\\\"Food\\\", \\\"Plants\\\"]\\r\\n\\tvar firstWaveUpgradeNames = [\\\"FocusWires\\\", \\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\", \\\"Smart Factories\\\"]\\r\\n\\tvar firstWaveOffice = [\\\"Hardware\\\", \\\"AI Cores\\\", \\\"Real Estate\\\"]\\r\\n\\tvar firstWaveOfficeValues = [12.5, 7.5, 2700]\\r\\n\\tconst cities = [\\\"Sector-12\\\", \\\"Aevum\\\", \\\"Chongqing\\\", \\\"New Tokyo\\\", \\\"Ishima\\\", \\\"Volhaven\\\"]\\r\\n\\tconst firstExpansionEmployeeJobs = [\\\"Operations\\\", \\\"Engineer\\\", \\\"Business\\\", \\\"Management\\\", \\\"Research & Development\\\", \\\"Training\\\"]\\r\\n\\tconst firstUpgrades = [\\\"Smart Factories\\\", \\\"Smart Storage\\\"]\\r\\n\\tconst officeUpgrades = [\\\"Robots\\\", \\\"Hardware\\\", \\\"AI Cores\\\", \\\"Real Estate\\\"]\\r\\n\\tvar currentProductDeveloping;\\r\\n\\tvar startTobVersions = 0;\\r\\n\\tconst hire6Employees = 6;\\r\\n\\tconst hire6EmployeesAmounts = [2, 2, 1, 2, 2, 0]\\r\\n\\tvar secondWaveOfficeValues = [9.6, 265.7, 244.5, 11940]\\r\\n\\tvar secondWaveOfficeValueGoals = [96, 2800, 2520, 146400]\\r\\n\\tvar thirdWaveOfficeValues = [63, 650, 375, 8400]\\r\\n\\tvar thirdWaveOfficeValueGoals = [726, 9300, 6270, 230400]\\r\\n\\tlet currentSector12PositionSize = 9;\\r\\n\\tconst levelUpgrades = [\\\"FocusWires\\\", \\\"Neural Accelerators\\\", \\\"Speech Processor Implants\\\", \\\"Nuoptimal Nootropic Injector Implants\\\"]\\r\\n\\r\\n\\r\\n\\t//start corp with Agriculture and self-funded\\r\\n\\tconst corp = CorpApi.createCorporation(corpName, false)\\r\\n\\tns.tprint(`Setting up: ${corpName} Corp`)\\r\\n\\tconst CorpInfo = CorpApi.getCorporation();\\r\\n\\r\\n\\tCorpApi.expandIndustry(argDivision, argDivision)\\r\\n\\tns.tprint(`Setting up: ${argDivision} Division`)\\r\\n\\tns.tprint(`Setting up city: ${mainCity}`)\\r\\n\\r\\n\\t//buy smart supply\\r\\n\\tns.print(`Setting up: Smart Supply and Setting value to true`)\\r\\n\\tCorpApi.unlockUpgrade(\\\"Smart Supply\\\");\\r\\n\\t//set smart supply in sector-12 to true and hire and set employees\\r\\n\\tCorpApi.setSmartSupply(argDivision, mainCity, true)\\r\\n\\r\\n\\tfor (let i = 0; i < hire3Employees; i++) {\\r\\n\\t\\tCorpApi.hireEmployee(argDivision, mainCity)\\r\\n\\t\\t//assign jobs\\r\\n\\t\\tawait CorpApi.setAutoJobAssignment(argDivision, mainCity, startUpJobs[i], hire3Employees / 3);\\r\\n\\t\\tns.print(`Setting up: Employee${hire3Employees / 3} to job ${startUpJobs[i]}`)\\r\\n\\t}\\r\\n\\t//set warehouse to auto sell materials \\r\\n\\tns.print(`Setting up: Warehouse to auto sell materials  `)\\r\\n\\r\\n\\tfor (let p = 0; p < 2; p++) {\\r\\n\\t\\tCorpApi.sellMaterial(argDivision, mainCity, agricultureProducts[p], \\\"MAX\\\", \\\"MP\\\")\\r\\n\\t}\\r\\n\\t//upgrade warehouse twice\\r\\n\\tns.print(`Setting up: Purchase Warehouse upgrade twice`)\\r\\n\\tfor (let w = 0; w < 2; w++) {\\r\\n\\t\\tCorpApi.upgradeWarehouse(argDivision, \\\"Sector-12\\\")\\r\\n\\t}\\r\\n\\t//buying mats for upgrade\\r\\n\\tfor (let x = 0; x < 3; x++) {\\r\\n\\t\\tawait CorpApi.buyMaterial(argDivision, mainCity, firstWaveOffice[x], firstWaveOfficeValues[x]);\\r\\n\\t\\tvar myData;\\r\\n\\t\\twhile (true) {\\r\\n\\t\\t\\tmyData = CorpApi.getMaterial(argDivision, mainCity, firstWaveOffice[x])\\r\\n\\t\\t\\tif (myData.qty > 0) {\\r\\n\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, mainCity, firstWaveOffice[x], 0);\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse {\\r\\n\\t\\t\\t\\tawait ns.sleep(1000);\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tns.print(`Buying ${firstWaveOfficeValues[x]} of ${firstWaveOffice[x]} `)\\r\\n\\t}\\r\\n\\t//expand offices in all cities\\r\\n\\tfor (let c = 0; c < 5; c++) {\\r\\n\\t\\tCorpApi.expandCity(argDivision, citiesToExpandTo[c]);\\r\\n\\t\\tns.print(`Setting up new city: ${citiesToExpandTo[c]}`)\\r\\n\\r\\n\\t\\t//hire 3 employees for Operations, Engineer, and Business.\\t\\r\\n\\t\\tfor (let i = 0; i < hire3Employees; i++) {\\r\\n\\t\\t\\tns.print(`Setting up: Employee and job ${startUpJobs[i]} `)\\r\\n\\t\\t\\t//hire the 3 employees \\r\\n\\t\\t\\tCorpApi.hireEmployee(argDivision, citiesToExpandTo[c])\\r\\n\\t\\t\\t//set there jobs\\r\\n\\t\\t\\tawait CorpApi.setAutoJobAssignment(argDivision, citiesToExpandTo[c], startUpJobs[i], hire3Employees / 3);\\r\\n\\t\\t}\\r\\n\\t\\t//buy a warehouse\\r\\n\\t\\tns.print(`Setting up: warehouse `)\\r\\n\\t\\tawait CorpApi.purchaseWarehouse(argDivision, citiesToExpandTo[c])\\r\\n\\r\\n\\t\\t//expand twice\\r\\n\\t\\tns.print(`Setting up: warehouse expanded twice`)\\r\\n\\t\\tfor (let w = 0; w < 2; w++) {\\r\\n\\t\\t\\tCorpApi.upgradeWarehouse(argDivision, citiesToExpandTo[c])\\r\\n\\t\\t}\\r\\n\\t\\t//set product to sell at max mp\\r\\n\\t\\tns.print(`Setting up: product to sell at max mp `)\\r\\n\\t\\tfor (let p = 0; p < 2; p++) {\\r\\n\\t\\t\\tCorpApi.sellMaterial(argDivision, citiesToExpandTo[c], agricultureProducts[p], \\\"MAX\\\", \\\"MP\\\")\\r\\n\\t\\t}\\r\\n\\t\\t//buying mats for upgrade\\r\\n\\t\\tns.print(`Setting up: mats for upgrade `)\\r\\n\\r\\n\\t\\tfor (let x = 0; x < 3; x++) {\\r\\n\\t\\t\\tns.print(`Buying ${firstWaveOfficeValues[x]} of ${firstWaveOffice[x]} `)\\r\\n\\t\\t\\tawait CorpApi.buyMaterial(argDivision, citiesToExpandTo[c], firstWaveOffice[x], firstWaveOfficeValues[x]);\\r\\n\\t\\t\\tvar myData;\\r\\n\\t\\t\\twhile (true) {\\r\\n\\t\\t\\t\\tmyData = CorpApi.getMaterial(argDivision, citiesToExpandTo[c], firstWaveOffice[x])\\r\\n\\t\\t\\t\\tif (myData.qty > 0) {\\r\\n\\t\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, citiesToExpandTo[c], firstWaveOffice[x], 0);\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.print(`Bought ${firstWaveOffice[x]} `)\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tns.print(\\\"Purchase a single AdVert\\\")\\r\\n\\t//purchase a single AdVert.\\r\\n\\tawait CorpApi.hireAdVert(argDivision);\\r\\n\\r\\n\\tfor (let u = 0; u < 5; u++) {\\r\\n\\t\\tCorpApi.levelUpgrade(firstWaveUpgradeNames[u]);\\r\\n\\t\\tCorpApi.levelUpgrade(firstWaveUpgradeNames[u]);\\r\\n\\t}\\r\\n\\r\\n\\tvar whileSwitch = true;\\r\\n\\twhile (whileSwitch) {\\r\\n\\t\\tns.print(\\\"\\\")\\r\\n\\t\\tvar offer = CorpApi.getInvestmentOffer();\\r\\n\\t\\tns.print(`Current offer is ${offer.funds}`)\\r\\n\\t\\twhile (offer.funds > 210000000000) {\\r\\n\\t\\t\\tCorpApi.acceptInvestmentOffer();\\r\\n\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\tns.tprint(`Accepted first Investment Offer of ${offer.funds}`)\\r\\n\\t\\t\\t//Main UpGrades\\r\\n\\t\\t\\tns.print(`Purchasing  upgrades for Smart Storage and Smart Factories`)\\r\\n\\t\\t\\tfor (let i = 0; i < 2; i++) {\\r\\n\\t\\t\\t\\tfor (let u = 0; u < 10; u++) {\\r\\n\\t\\t\\t\\t\\tCorpApi.levelUpgrade(firstUpgrades[i]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//Office Upgrades\\r\\n\\t\\t\\tfor (let c = 0; c < 6; c++) {\\r\\n\\t\\t\\t\\tns.print(`Currently Working in: ${cities[c]}`)\\r\\n\\t\\t\\t\\tns.print(`Upgrading office by 6 Employees`)\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(argDivision, cities[c], 6);\\r\\n\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t\\tns.print(`Setting up: New Employee and job ${firstExpansionEmployeeJobs[i]} in ${cities[c]}`)\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(argDivision, cities[c])\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(argDivision, cities[c], firstExpansionEmployeeJobs[i], hire6EmployeesAmounts[i]);\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t//upgrade warehouse for each city 7 times\\r\\n\\t\\t\\t\\tns.print(`Setting up: Purchasing 7 Warehouse upgrades`)\\r\\n\\t\\t\\t\\tfor (let w = 0; w < 7; w++) {\\r\\n\\t\\t\\t\\t\\tCorpApi.upgradeWarehouse(argDivision, cities[c])\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tfor (let x = 0; x < 4; x++) {\\r\\n\\t\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, cities[c], officeUpgrades[x], secondWaveOfficeValues[x]);\\r\\n\\t\\t\\t\\t\\tvar myData;\\r\\n\\t\\t\\t\\t\\twhile (true) {\\r\\n\\t\\t\\t\\t\\t\\tmyData = CorpApi.getMaterial(argDivision, cities[c], officeUpgrades[x])\\r\\n\\t\\t\\t\\t\\t\\tif (myData.qty >= secondWaveOfficeValueGoals[x]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tawait CorpApi.buyMaterial(argDivision, cities[c], officeUpgrades[x], 0);\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\twhileSwitch = false;\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tawait ns.sleep(24000);\\r\\n\\t}\\r\\n\\twhileSwitch = true;\\r\\n\\tns.tprint(\\\"Starting Second round investing.\\\")\\r\\n\\r\\n\\twhile (whileSwitch) {\\r\\n\\t\\toffer = CorpApi.getInvestmentOffer();\\r\\n\\t\\tns.print(`Current offer is ${offer.funds}`)\\r\\n\\t\\twhile (offer.funds > 6000000000000) {\\r\\n\\t\\t\\tCorpApi.acceptInvestmentOffer();\\r\\n\\t\\t\\tCorpApi.expandIndustry(tobDivision, tobDivision);\\r\\n\\t\\t\\t//level wilson analytics 14 times\\r\\n\\t\\t\\tns.print(`Level wilson analytics 14 times`);\\r\\n\\t\\t\\tfor (let i = 0; i < 14; i++) {\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(\\\"Wilson Analytics\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.print(`Leveling some Upgrades`)\\r\\n\\t\\t\\tfor (let i = 0; i < 18; i++) {\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[0]);\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[1]);\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[2]);\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(levelUpgrades[3]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//Expand to Tobacco Division\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tns.print(`Hiring adVert 83 times.`)\\r\\n\\t\\t\\t\\t\\t\\tfor (let i = 0; i < 83; i++) {\\r\\n\\t\\t\\t\\t\\t\\t\\tCorpApi.hireAdVert(tobDivision);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t//set up first city given(sector-12)\\r\\n\\t\\t\\tns.print(`Setting up: ${tobDivision} Division`);\\r\\n\\t\\t\\tns.print(`Setting up city: ${mainCity}`);\\r\\n\\t\\t\\tfor (let i = 0; i < 3; i++) {\\r\\n\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//upgrade the office size to 9\\r\\n\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 6);\\r\\n\\r\\n\\t\\t\\t//hire 6 more employees\\r\\n\\t\\t\\tfor (let i = 0; i < hire6Employees; i++) {\\r\\n\\t\\t\\t\\t//hire the 6 employees\\r\\n\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tfor (let i = 0; i < hire6Employees; i++) {\\r\\n\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\tmainCity,\\r\\n\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\thire6EmployeesAmounts[i]\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//expand twice\\r\\n\\t\\t\\tns.print(`Setting up: warehouse in ${mainCity}and expanded twice`);\\r\\n\\t\\t\\tfor (let w = 0; w < 14; w++) {\\r\\n\\t\\t\\t\\tCorpApi.upgradeWarehouse(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tns.print(`Hiring 21 Employees to ${mainCity}`);\\r\\n\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 21);\\r\\n\\r\\n\\t\\t\\tfor (let i = 0; i < 21; i++) {\\r\\n\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tns.print(`Setting Jobs for new Employees for ${mainCity}`);\\r\\n\\r\\n\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t//set their jobs\\r\\n\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\tmainCity,\\r\\n\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\t6\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t//Expand Office into other cities\\r\\n\\t\\t\\tfor (let c = 0; c < 5; c++) {\\r\\n\\t\\t\\t\\tCorpApi.expandCity(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\tns.print(`Setting up new city: ${citiesToExpandTo[c]}`);\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t//upgrade the office size to 9\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, citiesToExpandTo[c], 6);\\r\\n\\t\\t\\t\\t//hire 3 employees for Operations, Engineer, and Business.\\r\\n\\t\\t\\t\\tns.print(`Hiring 9 Employees in ${citiesToExpandTo[c]} `);\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 9; i++) {\\r\\n\\t\\t\\t\\t\\t//hire the 3 employees\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tfor (let i = 0; i < hire6Employees; i++) {\\r\\n\\t\\t\\t\\t\\t//set there jobs\\r\\n\\t\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\t\\tcitiesToExpandTo[c],\\r\\n\\t\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\t\\thire6EmployeesAmounts[i]\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t//buy a warehouse\\r\\n\\t\\t\\t\\tns.print(`Setting up: warehouse in ${citiesToExpandTo[c]}`);\\r\\n\\t\\t\\t\\tawait CorpApi.purchaseWarehouse(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\t//expand twice\\r\\n\\t\\t\\t\\tns.print(`Setting up: warehouse expansion`);\\r\\n\\t\\t\\t\\tfor (let w = 0; w < 12; w++) {\\r\\n\\t\\t\\t\\t\\tCorpApi.upgradeWarehouse(tobDivision, citiesToExpandTo[c]);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t\\t\\tns.run(\\\"toDaMoon.js\\\", 1)\\r\\n\\t\\t\\twhileSwitch = false;\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\tawait ns.sleep(24000)\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/startCorp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":26487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n\\tns.tail();\\r\\n\\tns.disableLog(\\\"sleep\\\")\\r\\n\\r\\n\\tconst CorpApi = eval(\\\"ns.corporation\\\");\\r\\n\\tconst tobDivision = \\\"Tobacco\\\";\\r\\n\\tconst mainCity = \\\"Sector-12\\\";\\r\\n\\tconst firstExpansionEmployeeJobs = [\\\"Operations\\\", \\\"Engineer\\\", \\\"Business\\\", \\\"Management\\\", \\\"Research & Development\\\", \\\"Training\\\"]\\r\\n\\r\\n\\tvar corpInfo = CorpApi.getCorporation();\\r\\n\\r\\n\\r\\n\\tvar currentProductDeveloping;\\r\\n\\tvar startTobVersions = 0;\\r\\n\\r\\n\\r\\n\\tvar thirdWaveOfficeValues = [63, 650, 375, 8400]\\r\\n\\tvar thirdWaveOfficeValueGoals = [726, 9300, 6270, 230400]\\r\\n\\tlet currentSector12PositionSize = 9;\\r\\n\\tlet prodMulti = 6;\\r\\n\\tlet corpFunds = 0;\\r\\n\\tlet wilsonCost = 0;\\r\\n\\tlet adVertCost = 0;\\r\\n\\tlet sector12OfficeUpgrade = 0;\\r\\n\\r\\n\\r\\n\\twhile (true) {\\r\\n\\t\\tif (startTobVersions > 3) {\\r\\n\\t\\t\\tns.print(`Discontinuing Product Tobacco v${startTobVersions - 4}`)\\r\\n\\t\\t\\tCorpApi.discontinueProduct(tobDivision, `Tobacco v${startTobVersions - 2}`)\\r\\n\\t\\t}\\r\\n\\t\\tCorpApi.makeProduct(tobDivision, mainCity, `Tobacco v${startTobVersions}`, 10000000000, 10000000000);\\r\\n\\t\\tcurrentProductDeveloping = `Tobacco v${startTobVersions}`\\r\\n\\t\\tns.print(`Currently Creating: ${currentProductDeveloping}`)\\r\\n\\r\\n\\t\\twhile (CorpApi.getProduct(tobDivision, currentProductDeveloping).developmentProgress <= 100) {\\r\\n\\t\\t\\tawait ns.sleep(1000);\\r\\n\\t\\t\\tcorpInfo = CorpApi.getCorporation();\\r\\n\\t\\t\\tcorpFunds = corpInfo.funds;\\r\\n\\r\\n\\t\\t\\tprodMulti += prodMulti * .5;\\r\\n\\t\\t\\tcorpFunds -= 20000000000;\\r\\n\\t\\t\\twilsonCost = CorpApi.getUpgradeLevelCost(\\\"Wilson Analytics\\\")\\r\\n\\t\\t\\tadVertCost = CorpApi.getHireAdVertCost(tobDivision);\\r\\n\\t\\t\\tsector12OfficeUpgrade = CorpApi.getOfficeSizeUpgradeCost(tobDivision, mainCity, 15);\\r\\n\\t\\t\\tadVertCost = CorpApi.getHireAdVertCost(tobDivision);\\r\\n\\t\\t\\tsector12OfficeUpgrade = CorpApi.getOfficeSizeUpgradeCost(tobDivision, mainCity, 15);\\r\\n\\t\\t\\tif (corpFunds > wilsonCost) {\\r\\n\\t\\t\\t\\tCorpApi.levelUpgrade(\\\"Wilson Analytics\\\");\\r\\n\\t\\t\\t\\tns.print(`Leveled Wilson Analytics`)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (corpFunds > adVertCost) {\\r\\n\\t\\t\\t\\tCorpApi.hireAdVert(tobDivision);\\r\\n\\t\\t\\t\\tCorpApi.hireAdVert(tobDivision);\\r\\n\\t\\t\\t\\tns.print(`Bought adVert`)\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse if (corpFunds > sector12OfficeUpgrade) {\\r\\n\\t\\t\\t\\tcurrentSector12PositionSize += 3;\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 15);\\r\\n\\t\\t\\t\\tCorpApi.upgradeOfficeSize(tobDivision, mainCity, 15);\\r\\n\\t\\t\\t\\tns.print(`Upgrading ${mainCity} with 15 new employees`)\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 15; i++) {\\r\\n\\t\\t\\t\\t\\t//hire the 3 employees\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t\\t\\tCorpApi.hireEmployee(tobDivision, mainCity);\\r\\n\\t\\t\\t\\t};\\r\\n\\r\\n\\t\\t\\t\\tfor (let i = 0; i < 6; i++) {\\r\\n\\t\\t\\t\\t\\t//set their jobs\\r\\n\\t\\t\\t\\t\\tawait CorpApi.setAutoJobAssignment(\\r\\n\\t\\t\\t\\t\\t\\ttobDivision,\\r\\n\\t\\t\\t\\t\\t\\tmainCity,\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\tfirstExpansionEmployeeJobs[i],\\r\\n\\t\\t\\t\\t\\t\\tcurrentSector12PositionSize\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tstartTobVersions++;\\r\\n\\t\\tCorpApi.sellProduct(tobDivision, mainCity, currentProductDeveloping, \\\"Max\\\", `MP * ${prodMulti}`, true);\\r\\n\\t}\\r\\n}\",\"filename\":\"/src/toDaMoon.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":26488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\r\\nexport async function main(ns) {\\r\\n    ns.tail();\\r\\n    ns.clearLog();\\r\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\r\\n    ns.disableLog(\\\"sleep\\\");\\r\\n    //automatically purchase \\r\\n    //check: Level, Ram, Cores, and Cache Level\\r\\n    //the cheapest option buy\\r\\n    //check hashes and sell when hashes reach 95% of max available\\r\\n    const hacknetNodeFormulas = ns.formulas.hacknetNodes;\\r\\n    const hackNet = ns.hacknet;\\r\\n\\r\\n\\r\\n    while (true) {\\r\\n        var moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        var purchaseServerCost = hackNet.getPurchaseNodeCost();\\r\\n\\r\\n        if (moneyAvailable > purchaseServerCost) {\\r\\n            hackNet.purchaseNode();\\r\\n        }\\r\\n        var numHackNetServers = hackNet.numNodes();\\r\\n\\r\\n        for (let i = 0; i < numHackNetServers; i++) {\\r\\n\\r\\n            var cacheUpgradeCost = hackNet.getCacheUpgradeCost(i, 1);\\r\\n            var coreUpgradeCost = hackNet.getCoreUpgradeCost(i, 1);\\r\\n            var ramUpgradeCost = hackNet.getRamUpgradeCost(i, 1);\\r\\n            var levelUpgrade = hackNet.getLevelUpgradeCost(i, 1);\\r\\n\\r\\n            if (moneyAvailable > cacheUpgradeCost) {\\r\\n                hackNet.upgradeCache(i,1);\\r\\n            }\\r\\n            else if(moneyAvailable > coreUpgradeCost){\\r\\n                hackNet.upgradeCore(i, 1);\\r\\n            }\\r\\n            else if( moneyAvailable > ramUpgradeCost){\\r\\n                hackNet.ramUpgradeCost(i, 1);\\r\\n            }\\r\\n            else if(moneyAvailable > levelUpgrade){\\r\\n                hack.ramUpgradeCost(i,1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/src/epicHacknetServers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/src/epicHacknetServers.js\",\"url\":\"blob:file:///b54b1a2b-2a21-4230-a382-d1e1c693d190\",\"moduleSequenceNumber\":90497}],\"dependents\":[],\"ramUsage\":5.8,\"server\":\"home\",\"moduleSequenceNumber\":26489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\n\\tns.tail();\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tconst hackNet = ns.hacknet;\\n\\tconst buyMoneyHashAmount = 4;\\n\\tvar numHackNetServers = hackNet.numNodes();\\n\\tvar totalProduction = 0;\\n\\tvar sleepTime = 0;\\n\\twhile (true) {\\n\\t\\tsleepTime=0;\\n\\t\\tvar numHashes = hackNet.numHashes();\\n\\t\\tfor (let i = 0; i < numHackNetServers; i++) {\\n\\t\\t\\tvar getNodeStats = hackNet.getNodeStats(i);\\n\\t\\t\\ttotalProduction+=getNodeStats.production;\\n\\t\\t\\tsleepTime = Math.round((4/totalProduction)*1000);\\n\\t\\t\\tif(numHashes > buyMoneyHashAmount){\\n\\t\\t\\t\\thackNet.spendHashes(\\\"Sell for Money\\\",getNodeStats.name);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttotalProduction = 0;\\n\\t\\tawait ns.sleep(sleepTime);\\n\\t}\\n}\",\"filename\":\"spendHashOnCash.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"spendHashOnCash.js\",\"url\":\"blob:https://danielyxie.github.io/48f8be2e-0e78-4100-8959-0b62909b55bb\",\"moduleSequenceNumber\":539}],\"dependents\":[],\"ramUsage\":5.6,\"server\":\"home\",\"moduleSequenceNumber\":26490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tail();\\n\\tns.disableLog(\\\"sleep\\\")\\n\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"strength\\\", false)\\n\\tns.print(\\\"Training Strength\\\")\\n\\twhile (ns.getPlayer().strength < 15000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"defense\\\", false)\\n\\tns.print(\\\"Training Defense\\\")\\n\\n\\twhile (ns.getPlayer().defense < 15000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"dexterity\\\", false)\\n\\tns.print(\\\"Training Dexterity\\\")\\n\\n\\twhile (ns.getPlayer().dexterity < 5000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\tns.gymWorkout(\\\"powerhouse gym\\\", \\\"agility\\\", false)\\n\\tns.print(\\\"Training Agility\\\")\\n\\n\\twhile (ns.getPlayer().agility < 5000) {\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n\\t\\n}\",\"filename\":\"bladeMidGame.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"bladeMidGame.js\",\"url\":\"blob:https://danielyxie.github.io/36758fb4-6b27-48a7-acb1-2a388c37bdc3\",\"moduleSequenceNumber\":4456}],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":26491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gymWorkout\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"hacknet-node-0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"reserve.txt\",\"text\":\"100000000\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"64.2.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39821824177,\"moneyMax\":995545604425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1308,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"36.6.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46357165648,\"moneyMax\":1158929141200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1346,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"48.5.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":18719152513,\"moneyMax\":467978812825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1028,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"62.3.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":36337638019,\"moneyMax\":908440950475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1086,\"serverGrowth\":75}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"19.1.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38649988219,\"moneyMax\":966249705475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"8.9.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":21253085454,\"moneyMax\":531327136350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1013,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"72.5.3.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":15213503950,\"moneyMax\":380337598750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"64.7.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":18083469584,\"moneyMax\":452086739600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1075,\"serverGrowth\":89}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"89.0.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":25027977854,\"moneyMax\":625699446350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":971,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"46.5.2.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1491920475,\"moneyMax\":37298011875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":964,\"serverGrowth\":96}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"70.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1394,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"13.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1073510162,\"moneyMax\":26837754050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1065,\"serverGrowth\":71}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"8.6.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":817048462,\"moneyMax\":20426211550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":50}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"55.6.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":798095346,\"moneyMax\":19952383650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":942,\"serverGrowth\":50}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"38.7.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":605432256,\"moneyMax\":15135806400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":71}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"71.1.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":721808970,\"moneyMax\":18045224250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":76}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"43.0.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":946953216,\"moneyMax\":23673830400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":903,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"55.4.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1192976939,\"moneyMax\":29824423475,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":88}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"98.2.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":832385710,\"moneyMax\":20809642750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":65}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"41.9.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":542057712,\"moneyMax\":13551442800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"49.8.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":884816706,\"moneyMax\":22120417650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":929,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"73.3.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":758496901,\"moneyMax\":18962422525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":71}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"50.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1184562865,\"moneyMax\":29614071625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":59}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"25.7.0.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":915925652,\"moneyMax\":22898141300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":871,\"serverGrowth\":69}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"57.5.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":952971166,\"moneyMax\":23824279150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":794,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"56.2.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":759895819,\"moneyMax\":18997395475,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"83.1.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":768809931,\"moneyMax\":19220248275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"73.4.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1422582267,\"moneyMax\":35564556675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":67}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"93.2.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1642393019,\"moneyMax\":41059825475,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"40.7.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1241791969,\"moneyMax\":31044799225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":68}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"25.3.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1349335467,\"moneyMax\":33733386675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"97.7.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1029013858,\"moneyMax\":25725346450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"70.8.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":716397969,\"moneyMax\":17909949225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":724,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"1.0.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":557399418,\"moneyMax\":13934985450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":496,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"38.6.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":608869905,\"moneyMax\":15221747625,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":543,\"serverGrowth\":58}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"65.5.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":256386196,\"moneyMax\":6409654900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":446,\"serverGrowth\":32}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"34.4.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":180712159,\"moneyMax\":4517803975,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":378,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"73.7.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":985968605,\"moneyMax\":24649215125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":742,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"3.6.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"alpha-ent\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":281598232,\"moneyMax\":7039955800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":467,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"61.5.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":479756663,\"moneyMax\":11993916575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":561,\"serverGrowth\":63}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"21.4.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":403020089,\"moneyMax\":10075502225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":48}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"96.0.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":170990399,\"moneyMax\":4274759975,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":276,\"serverGrowth\":54}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"44.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":249857890,\"moneyMax\":6246447250,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":391,\"serverGrowth\":59}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"42.4.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":384,\"serverGrowth\":53}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"91.3.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":73800527,\"moneyMax\":1845013175,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":262,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"97.0.5.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"27.9.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"40.3.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"73.3.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"69.6.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"54.2.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"98.8.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"computek\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"66.5.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"79.1.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"36.9.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"96.7.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"56.5.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"39.2.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":31,\"hackDifficulty\":31,\"minDifficulty\":10,\"moneyAvailable\":63194733,\"moneyMax\":1579868325,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":212,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"56.5.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":43273669,\"moneyMax\":1081841725,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":268,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"28.5.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"91.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":480,\"serverGrowth\":35}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"21.4.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1094,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"8.4.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":682,\"serverGrowth\":48}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"54.7.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":512,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"17.0.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":340,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"13.8.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":217,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"92.7.8.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"77.0.3.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"87.5.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"16.5.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":0}},\"hacknet-node-0\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"68.9.1.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"cache\":5,\"cores\":10,\"hashCapacity\":1024,\"hashRate\":0.204492288,\"level\":100,\"onlineTimeSeconds\":148.20000000000013,\"totalHashesGenerated\":30.30575708160048}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"buyall\":\"buy BruteSSH.exe; buy FTPCrack.exe; buy relaySMTP.exe; buy HTTPWorm.exe; buy SQLInject.exe; buy ServerProfiler.exe; buy DeepscanV1.exe; buy DeepscanV2.exe; buy AutoLink.exe; buy Formulas.exe\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":false}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as NiteSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":false}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for The Black Hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":25192.157380446355,\"lastPrice\":25189.45140246778,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":19.32733737809797,\"otlkMagForecast\":69.28236663786343,\"cap\":602624415,\"spreadPerc\":0.1,\"shareTxForMovement\":60004,\"shareTxUntilMovement\":60004,\"totalShares\":98700000,\"maxShares\":19700000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":25070.421866537177,\"lastPrice\":25067.728964597107,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":18.749542559917174,\"otlkMagForecast\":69.06766733154437,\"cap\":626258514,\"spreadPerc\":0.3,\"shareTxForMovement\":66074,\"shareTxUntilMovement\":66074,\"totalShares\":95700000,\"maxShares\":19100000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":14622.006768296402,\"lastPrice\":14624.488584503624,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":12.629944545394615,\"otlkMagForecast\":63.1183581203822,\"cap\":82432960,\"spreadPerc\":0.4,\"shareTxForMovement\":65139,\"shareTxUntilMovement\":65139,\"totalShares\":106900000,\"maxShares\":21400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":12393.46673684277,\"lastPrice\":12391.470005487576,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":11.834965492764113,\"otlkMagForecast\":61.834158222243886,\"cap\":142889153,\"spreadPerc\":0.3,\"shareTxForMovement\":50302,\"shareTxUntilMovement\":50302,\"totalShares\":125400000,\"maxShares\":25100000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":41462.1397233536,\"lastPrice\":41455.90495985061,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":12.100175086746644,\"otlkMagForecast\":62.11615030643352,\"cap\":314638219,\"spreadPerc\":0.2,\"shareTxForMovement\":31190,\"shareTxUntilMovement\":31190,\"totalShares\":46000000,\"maxShares\":9200000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":55664.690321011905,\"lastPrice\":55652.2551531731,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":16.805491107025897,\"otlkMagForecast\":67.2767774500695,\"cap\":109906693,\"spreadPerc\":0.9,\"shareTxForMovement\":52021,\"shareTxUntilMovement\":52021,\"totalShares\":36200000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":22918.767863163273,\"lastPrice\":22914.68158935729,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":9.958235132848394,\"otlkMagForecast\":60.13623392492144,\"cap\":316570206,\"spreadPerc\":0.4,\"shareTxForMovement\":38149,\"shareTxUntilMovement\":38149,\"totalShares\":84300000,\"maxShares\":16900000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":32128.25885126873,\"lastPrice\":32119.83969163397,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":16.442340409831857,\"otlkMagForecast\":65.87716473295806,\"cap\":460027489,\"spreadPerc\":0.8,\"shareTxForMovement\":75441,\"shareTxUntilMovement\":75441,\"totalShares\":66600000,\"maxShares\":13300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":22200.87256653787,\"lastPrice\":22196.723564286447,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":true,\"otlkMag\":7.030224624663144,\"otlkMagForecast\":57.13537817883577,\"cap\":411783546,\"spreadPerc\":0.8,\"shareTxForMovement\":100084,\"shareTxUntilMovement\":100084,\"totalShares\":55600000,\"maxShares\":11100000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8973.170876507258,\"lastPrice\":8974.346887327432,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":9.813553336333491,\"otlkMagForecast\":59.8993038640868,\"cap\":55690789,\"spreadPerc\":1,\"shareTxForMovement\":99452,\"shareTxUntilMovement\":99452,\"totalShares\":103800000,\"maxShares\":20800000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":15857.734715828805,\"lastPrice\":15859.847078003922,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":8.830301643326779,\"otlkMagForecast\":58.90557738733058,\"cap\":340323235,\"spreadPerc\":0.8,\"shareTxForMovement\":100043,\"shareTxUntilMovement\":100043,\"totalShares\":54000000,\"maxShares\":10800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":14383.133417426405,\"lastPrice\":14380.816127672831,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":6.869028649517573,\"otlkMagForecast\":57.057638802456054,\"cap\":118995493,\"spreadPerc\":0.5,\"shareTxForMovement\":106691,\"shareTxUntilMovement\":106691,\"totalShares\":74000000,\"maxShares\":14800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":13813.839692018317,\"lastPrice\":13811.970165088058,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":7.514260167247861,\"otlkMagForecast\":57.40463985515933,\"cap\":283830672,\"spreadPerc\":0.7,\"shareTxForMovement\":92827,\"shareTxUntilMovement\":92827,\"totalShares\":59000000,\"maxShares\":11800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":16773.899625776743,\"lastPrice\":16775.91779515051,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":10.05024613022532,\"otlkMagForecast\":60.032353454229366,\"cap\":203279171,\"spreadPerc\":0.7,\"shareTxForMovement\":59847,\"shareTxUntilMovement\":59847,\"totalShares\":53100000,\"maxShares\":10600000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":15639.864425101177,\"lastPrice\":15637.714175928038,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":5.93951521235929,\"otlkMagForecast\":55.96620581198034,\"cap\":213272922,\"spreadPerc\":0.4,\"shareTxForMovement\":75938,\"shareTxUntilMovement\":75938,\"totalShares\":41800000,\"maxShares\":8400000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":9404.339344850096,\"lastPrice\":9405.753711073045,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":4.346546526663621,\"otlkMagForecast\":55.23571975860273,\"cap\":81441449,\"spreadPerc\":0.8,\"shareTxForMovement\":113405,\"shareTxUntilMovement\":113405,\"totalShares\":62900000,\"maxShares\":12600000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":16950.43797380921,\"lastPrice\":16947.634249207385,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":8.617102095437856,\"otlkMagForecast\":58.440906498429705,\"cap\":234546571,\"spreadPerc\":1,\"shareTxForMovement\":112732,\"shareTxUntilMovement\":112732,\"totalShares\":42800000,\"maxShares\":8600000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":13011.822372241253,\"lastPrice\":13010.061388121052,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":10.301800150037035,\"otlkMagForecast\":60.41259611161177,\"cap\":240062585,\"spreadPerc\":0.8,\"shareTxForMovement\":114004,\"shareTxUntilMovement\":114004,\"totalShares\":53200000,\"maxShares\":10600000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":23665.285196141875,\"lastPrice\":23669.098562672225,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.078426211017805,\"otlkMagForecast\":55.14873442487385,\"cap\":157399168,\"spreadPerc\":0.6,\"shareTxForMovement\":97942,\"shareTxUntilMovement\":97942,\"totalShares\":26400000,\"maxShares\":5300000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4067.6659287176135,\"lastPrice\":4065.4822556236213,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":false,\"otlkMag\":1.7374858089049563,\"otlkMagForecast\":51.52691873628205,\"cap\":12600812,\"spreadPerc\":0.5,\"shareTxForMovement\":27556,\"shareTxUntilMovement\":27556,\"totalShares\":98700000,\"maxShares\":19700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":7171.76860077548,\"lastPrice\":7173.6484440528175,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":5.937044394265985,\"otlkMagForecast\":55.93929365408867,\"cap\":159958938,\"spreadPerc\":0.9,\"shareTxForMovement\":98335,\"shareTxUntilMovement\":98335,\"totalShares\":42700000,\"maxShares\":8500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":3384.7054290181595,\"lastPrice\":3384.3127842646813,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":2.2830588481874963,\"otlkMagForecast\":51.21209137362012,\"cap\":50242632,\"spreadPerc\":1,\"shareTxForMovement\":114088,\"shareTxUntilMovement\":114088,\"totalShares\":53200000,\"maxShares\":10600000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":8455.02162405501,\"lastPrice\":8451.462660891888,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.96,\"b\":true,\"otlkMag\":8.973346002410818,\"otlkMagForecast\":59.365470325492424,\"cap\":38380883,\"spreadPerc\":0.8,\"shareTxForMovement\":85163,\"shareTxUntilMovement\":85163,\"totalShares\":29100000,\"maxShares\":5800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":6523.629997499957,\"lastPrice\":6525.802481385286,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.55,\"b\":true,\"otlkMag\":4.980032882148631,\"otlkMagForecast\":53.42342024447244,\"cap\":96409693,\"spreadPerc\":0.5,\"shareTxForMovement\":40458,\"shareTxUntilMovement\":40458,\"totalShares\":30000000,\"maxShares\":6000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5402.665288183419,\"lastPrice\":5401.551185363852,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.96,\"b\":true,\"otlkMag\":5.002455777116903,\"otlkMagForecast\":54.979445672899054,\"cap\":21598104,\"spreadPerc\":0.4,\"shareTxForMovement\":68248,\"shareTxUntilMovement\":68248,\"totalShares\":34100000,\"maxShares\":6800000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":4094.9390939326913,\"lastPrice\":4091.572237936239,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.83,\"b\":true,\"otlkMag\":1.7448870105254657,\"otlkMagForecast\":46.90401796424543,\"cap\":15328567,\"spreadPerc\":1.9,\"shareTxForMovement\":23637,\"shareTxUntilMovement\":23637,\"totalShares\":13300000,\"maxShares\":2700000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":3107.9950132846984,\"lastPrice\":3107.3340783814892,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.99,\"b\":true,\"otlkMag\":1.256006541984289,\"otlkMagForecast\":50.63457815093189,\"cap\":59813791,\"spreadPerc\":1.3,\"shareTxForMovement\":33764,\"shareTxUntilMovement\":33764,\"totalShares\":18600000,\"maxShares\":3700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3093.7024617318584,\"lastPrice\":3093.1973856867126,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":2.5164697610989677,\"otlkMagForecast\":48.37570273439032,\"cap\":26937139,\"spreadPerc\":0.9,\"shareTxForMovement\":64195,\"shareTxUntilMovement\":64195,\"totalShares\":14600000,\"maxShares\":2900000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3054.4377276202654,\"lastPrice\":3056.038968415371,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.44,\"b\":false,\"otlkMag\":1.7571677542458128,\"otlkMagForecast\":50.256489316062705,\"cap\":40032805,\"spreadPerc\":0.6,\"shareTxForMovement\":64441,\"shareTxUntilMovement\":64441,\"totalShares\":8800000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":326.3106019375033,\"lastPrice\":326.5111104254637,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.86,\"b\":true,\"otlkMag\":1.941473659852976,\"otlkMagForecast\":52.437576935396535,\"cap\":4303387,\"spreadPerc\":1,\"shareTxForMovement\":27013,\"shareTxUntilMovement\":27013,\"totalShares\":110200000,\"maxShares\":22000000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":462.39728012207974,\"lastPrice\":462.5492796524528,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":true,\"otlkMag\":13.424484844614847,\"otlkMagForecast\":63.559097656322415,\"cap\":7493017,\"spreadPerc\":0.7,\"shareTxForMovement\":62744,\"shareTxUntilMovement\":62744,\"totalShares\":230900000,\"maxShares\":46200000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":24602.425478020912,\"lastPrice\":24598.408900500886,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":8.087963273019687,\"otlkMagForecast\":57.9613726403898,\"cap\":507476387,\"spreadPerc\":0.6,\"shareTxForMovement\":93512,\"shareTxUntilMovement\":93512,\"totalShares\":14700000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":21522.288075766042,\"lastPrice\":21525.154996424506,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":10.870624036049986,\"otlkMagForecast\":60.91810765506042,\"cap\":239212908,\"spreadPerc\":1,\"shareTxForMovement\":174617,\"shareTxUntilMovement\":174617,\"totalShares\":19100000,\"maxShares\":3800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":21,\"lastUpdate\":1648610001529,\"ticksUntilCycle\":51}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":15,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":80,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":24,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#00E3F8\",\"primary\":\"#CCF5FF\",\"primarydark\":\"#00CCFF\",\"successlight\":\"#0f0\",\"success\":\"#00C677\",\"successdark\":\"#FF0808\",\"errorlight\":\"#FEB3B3\",\"error\":\"#CF3B2D\",\"errordark\":\"#AA0202\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#4496B1\",\"secondarydark\":\"#008C69\",\"warninglight\":\"#FAF5B4\",\"warning\":\"#FF6831\",\"warningdark\":\"#470012\",\"infolight\":\"#03F2FF\",\"info\":\"#00FF73\",\"infodark\":\"#369360\",\"welllight\":\"#A7FFFC\",\"well\":\"#003655\",\"white\":\"#fff\",\"black\":\"#000000\",\"hp\":\"#D3442E\",\"money\":\"#FFDE05\",\"hack\":\"#00E5FF\",\"combat\":\"#FF782F\",\"cha\":\"#AB72FF\",\"int\":\"#0083D4\",\"rep\":\"#43FFFC\",\"disabled\":\"#757575\",\"backgroundprimary\":\"#000D1E\",\"backgroundsecondary\":\"#00132C\",\"button\":\"#0F3A5E\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-4,\"y\":7,\"opened\":false}}","VersionSave":"12","AllGangsSave":"{\"Slum Snakes\":{\"power\":64402.00336881074,\"territory\":1},\"Tetrads\":{\"power\":6767.797451756166,\"territory\":0},\"The Syndicate\":{\"power\":6963.392303792312,\"territory\":0},\"The Dark Army\":{\"power\":6937.774485168406,\"territory\":0},\"Speakers for the Dead\":{\"power\":5682.71528889377,\"territory\":0},\"NiteSec\":{\"power\":6890.19011263937,\"territory\":0},\"The Black Hand\":{\"power\":5935.103228583103,\"territory\":0}}","LastExportBonus":"1648598302424","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}