-Div is a root component for rendering, the other tags are its children. Will learn how to render adjacent elements without wrapping them in an parent element.
-Tag names are case-sensitive and non-HTML elements are capitalized.

Rendering with JSX

-We create new JSX elements so that we can encapsulate larger structures so you can use custom tags. The react component returns the JSX that goes where the tag is used.
-Namespaced Components: a namespaces provides and organizational unit fro your components so that related components can share the same namespace prefix. The idea of namespaced is to have a namespace component render its child components using the namespace syntax.
-JSX has a special syntax that allows you to embed JavaScript expressions. Anytime React renders JSX content, expressions in the markup are evaluated.This is the dynamic aspect of JSX.
-React evaluates expressions and updates the HTML content based on what has already been rendered and what has changed.
-Fragments are a way to group together chunks of markup without having to add unnecessary structure to your page.

Component Properties, State, and Context

-State is the dynamic part of a React component. You can declare the initial state of a component, which changes over 
time.
-Properties(props) are used to pass data into your React components. Instead of calling a method with a new state as teh argument, properties are passed only when the component is rendered.
-The initial state of a component isn't actually required, but if your component uses state, it should be set.
-The initial state of a component should always ben an object with one or more properties. 
-Properties are immutable, and there's no need for them to be kept as an instance property value. State, on the other hand, changes all the time, so the component needs an instance-level reference to it.
-You can pass just about anything you want as a property value via JSX, just as long as it's a valid JavaScript expression.
-A pure function is a function without side effects. That is to say, called with a given set of arguments, the function always produces the same output. This is relevant for React components because, given a set of properties, it's easier to predict what the rendered content will be. Functions that always return the same value with a given argument values are easier to test as well.
-The basic premise of container components is simple: don't couple data fetching with the component that renders the data. The container is responsible for fetching the data and passing it to its child component. It contains the component responsible for rendering the data.

Getting Started with Hooks

-When our components are first rendered, they probably expect some state values to be set. This is called the initial state of the component, and we can use the useState() Hook to set the initial state.
-You can have as many pieces of state in your component as you need. The best practice is to have one call to useState() per state value.
-When we call useState(), we get an array returned to us. The first value of this array is the state value itself.
-With functional components that use the useState() Hook, state values are updated differently to class components that rely on the setState() method. Instead of using setState() to update every piece of component state, you have individual functions to set each state value. The useState() Hook returns an array. The first item is the state value and the second is the function used to update the value.
-The useEffect() Hook is used to run "side-effects" in your component.
-By default, React assumes that every effect that is run needs to be cleaned up. This typically isn't the case. For example, you might have specific property or state values that require cleanup when they change. You can pass an array of values to watch as the second argument to useEffect().
-React applications often have a few pieces of data that are global in nature. This means that several components, possibly every component in the app, share this data. 
-Most of our components will directly fetch the data that they and their children need. In other cases, our app has some API endpoint with data that is used by several components throughout the application. To share global data like this, you can use the React context API. As the name suggests, components that are rendered within a context are able to access the data provided by the context.
-A reducer function in a React application is a function that takes the current state, an action, and any other arguments that are needed to update the state. It returns the new state of the component. The action argument tells the reducer function what new state to return and is often used in a switch statement.
-When our components have one piece of state that depends on another, it's difficult to use the useState() Hook. This Hook comes with the assumption that when a state needs to be updated, it's one piece at a time. In real applications, there are often scenarios where updating one piece of state means that another piece of state needs to be updated as well, based on this new value.
- Utility-centric HTML elements are more reusable
than feature-centric HTML elements.

Crafting Reusable Components

-. Having monolithic feature
components makes it difficult to coordinate any kind of team development effort. The
bigger monolithic components become, the more difficult they are to refactor into
something better later on.
-The JSX of any monolithic component is the best starting point for figuring out how to
refactor it into smaller components. 
-Whenever you come across components
that only use property values, it's a good idea to make them functional. For one thing, it
makes it explicit that the component doesn't rely on any state or life cycle methods. It's also
more efficient because React doesn't perform as much work when it detects that a
component is a function.

The React Component Life Cycle
-Initial Render LifeCycle
    -getDerivedStateFromProps()
    -render()
    -componentDidMount()
-Update LifeCycle
    -getDerivedStateFromProps()
    -shouldComponentUpdate()
    -render()
    -getSnapshotBeforeUpdate()
    -componentDidUpdate

-These are the two main life cycle flows of a React component. The first happens when the component is initially rendered. The second happens whenever the component is updated.
    *getDerivedStateFromProps(): This method allows you to update the state of the component based on the property values of the component. This method is called when the component is initially rendered and when it receives new property values.
    *render(): Returns the content to be rendered by the component. This is called when the component is first mounted to the DOM, when it receives new property values, and when setState() is called.
    *componentDidMount(): This is called after the component is mounted to the DOM. This is where you can perform component initialization work, such as fetching data.
    *shouldComponentUpdate(): You can use this method to compare new states or props with current states or props. Then, you can return false if there's no need to re-render the component. This method is used to make your components more efficient.
    *getSnapshotBeforeUpdate(): This method lets you perform operations directly on the DOM elements of your component before they're actually committed to the DOM. The difference between this method and render() is that getSnapshotBeforeUpdate() isn't asynchronous. With render(), there's a good chance that the DOM structure could change between when it's called and when the changes are actually made in the DOM.
    *componentDidUpdate(): This is called when the component is updated. It's rare that you'll have to use this method.
    *componentWillUnmount(). This is the only life cycle method that's called when a component is about to be removed.
-When your components are initialized, you'll want to populate their state or properties. Otherwise, the component won't have anything to render other than its skeleton markup.
-Due to the naming of componentDidMount(), React newcomers think that it's bad to wait until the component is mounted to the DOM before issuing requests for component data. In other words, the user experience might suffer if React has to perform a lot of work before the request is even sent. In reality, fetching data is an asynchronous task and initiating it before or after render() makes no real difference as far as your application is concerned.
    *https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html
    *React.Component: https://reactjs.org/docs/react-component.html 
    *State and Lifecycle: https://reactjs.org/docs/state-and-lifecycle.html

Validating Component Properties

-Property validation in React components is like field validation in HTML forms.Property
validation enhances the developer experience, rather than the user experience.
-The key aspect of property validation is knowing what's passed into the component as a
property value.
-The idea isn't to fail fast with property validation. It's to provide information to the
developer. When property validation fails, you know that something was provided as a
component property that shouldn't have been. It's a matter of finding where the value is
passed in the code and fixing it.
    -Fail fast is an architectural property of software in which the system will
crash completely rather than continue running in an inconsistent state
-When you know what to expect from your component properties, the context in which the
component is used becomes less important. This means that as long as the component is
able to validate its property values, it really shouldn't matter where the component is used;
it could easily be used by any feature.
-Using React-style property validation, you can avoid writing defensive code.
    -Defensive code is code that needs to account for a number of edge cases
        during runtime, in a production environment. Coding defensively is
        necessary when potential problems cannot be detected during
        development, such as with React component property validation.

    *https://reactjs.org/docs/typechecking-with-proptypes.html

Handling Navigation with Routes

-Almost every web application requires routing: the process of responding to a URL, based
on a set of route handler declarations. In other words, this is a mapping from the URL to
rendered content.
-With react-router, you can collocate routes with the content that they render. In this
section, you'll see that this is done using JSX syntax that defines routes.
    *https://reactrouter.com/
    *https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams

Code Splitting Using Lazy Components and Suspense

-Code splitting is
necessary when you have larger applications with a lot of JavaScript code that must be
delivered to the browser.
-Big monolithic JavaScript bundles that house the entire application can create usability
issues on initial page loads due to longer load times. With code splitting, we have more
fine-grained control over how code makes its way from the server to the browser.
-The code examples are using the create-react-app tooling for creating bundles.
The nice thing about this approach is that you don't have to maintain any sort of bundle
configuration. Instead, bundles are created for you automatically, based on how you import
your modules. If you're using the import statement everywhere, your app will be
downloaded all at once in one bundle. When your app gets bigger, there are likely going to
be features that some users never use or don't use as frequently as others. You can use the
import() function to import modules on demand. By using this function, you're telling
webpack to create a separate bundle for the code that you're importing dynamically.
-Instead of manually handling the promise returned by import() by returning the default
export and setting state, you can lean on the lazy() API. This function takes a function
that returns an import() promise. The return value is a lazy component that you can just
render.
-The Suspense component compliments lazy components by providing a fallback
to display while the code bundle is being fetched.
-Lazy components need to be rendered inside of a Suspense component. They do not have
to be direct children of Suspense though, which is important because this means that you
can have one Suspense component handle every lazy component in your app. 
-The whole idea with the lazy() and Suspense APIs is to provide a better user experience
for both of the following:
    *The initial load, by splitting code into bundles so that the whole app doesn't have
        to be downloaded upfront
    *Providing consistent fallback content while code bundles load
-Instead of just returning the promise from import(), you can build a new promise using Promise.all(). 
This method returns a promise that resolves when all of the promises that are passed to it have resolved. You can pass
two promises to Promise.all(). The first is the promise returned by import(), which eventually resolves the module object from the code bundle once it's
downloaded. The problem is that this resolves immediately when doing local development.
The second promise that's passed to Promise.all() is how we simulate latency, by not
resolving the promise for three seconds (normally to simulate an import function).
-The fallback property can be any valid
React element, which means that we can enhance the fallback to be something more
visually appealing. For example, the react-spinners package has a selection of spinner
components, all of which can be used as a fallback with Suspense.
    *The react-spinners package has
        several spinners for you to choose from, each of which has a number of configuration
        options. There are other spinner libraries that you can use or you can implement your own.
-It might be tempting to make most of your React components lazy components that live in
their own bundle. After all, there isn't much extra work that needs to happen in order to set
up separate bundles and to make lazy components. There are some downsides to this
though. If you have too many lazy components, your app is going to end up making
several HTTP requests to fetch them – at the same time. There's no benefit to having
separate bundles for components that are used on the same part of the app. You're better
off trying to bundle components together in a way that one HTTP request is made to load
what is needed on the current page.
-A helpful way to think of this is to associate "pages" with bundles. If you have lazy page
components, then everything on that page will also be lazy, yet bundled together with
other components on the page.

Server-Side React Components

*-Another term for server-side rendering is isomorphic JavaScript.-*
-This is a fancy way of saying JavaScript code that can run in the browser and in Node.js 
without modification. 
-The beauty of React is that it's a small abstraction layer that sits on top of a rendering target.
So far, the target has been the browser, but it can also be the server. The render target can
be anything, just as long as the correct translation calls are implemented behind the scenes.
-In the case of rendering on the server, components are rendered to strings. The server can't
actually display rendered HTML; all it can do is send the rendered markup to the browser.
-The main motivation behind server-side rendering is improved
performance. In particular, the initial rendering just feels faster for the user and this
translates to an overall better user experience. It doesn't matter how fast your application is
once it's loaded and ready to go; it's the initial load time that leaves a lasting impression on
your users.

-There are three ways in which this approach results in better performance for the initial
load:
    *The rendering that takes place on the server is generating a string; there's no
    need to compute a difference or to interact with the DOM in any way. Producing
    a string of rendered markup is inherently faster than rendering components in
    the browser.
    *The rendered HTML is displayed as soon as it arrives. Any JavaScript code that
    needs to run on the initial load is run after the user is already looking at the
    content.
    *There are fewer network requests to fetch data from the API because these have
    already happened on the server, and the server, typically, has far more resources
    than a single client.
-There's a good chance that your application will need to talk to API endpoints that are out
of your control, for example, an application that is composed of many different
microservice endpoints. It's rare that you can use data from these services without
modification. Rather, you have to write code that transforms data so that it's usable by your
React components
-If you're rendering your components on a Node.js server, then this data transformation
code will be used by both the client and the server. This is because, on the initial load, the
server will need to talk to the API and, later on, the component in the browser will need to
talk to the API.
    -It's not just about transforming the data that's returned from these services either. For
    example, you have to think about providing input to them as well, such as when creating or
    modifying resources.
    -The fundamental adjustment that you'll need to make as a React programmer is to assume
    that any given component that you implement will need to be rendered on the server. This
    may seem like a minor adjustment, but the devil is in the detail
-Rendering components in Node.js means rendering to strings, instead of trying to figure
out the best way to insert them into the DOM. The string content is then returned to the
browser, which displays this to the user immediately. 
